
GARAZA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08006878  08006878  00007878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec8  08006ec8  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006ec8  08006ec8  00007ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed0  08006ed0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed0  08006ed0  00007ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ed4  08006ed4  00007ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006ed8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  2000000c  08006ee4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08006ee4  00008690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b5a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003081  00000000  00000000  0001cb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0001fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2d  00000000  00000000  00020f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239d3  00000000  00000000  00021ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b3f  00000000  00000000  00045878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d60e8  00000000  00000000  0005e3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013449f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052d8  00000000  00000000  001344e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001397bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006860 	.word	0x08006860

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006860 	.word	0x08006860

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_uldivmod>:
 8000a34:	b953      	cbnz	r3, 8000a4c <__aeabi_uldivmod+0x18>
 8000a36:	b94a      	cbnz	r2, 8000a4c <__aeabi_uldivmod+0x18>
 8000a38:	2900      	cmp	r1, #0
 8000a3a:	bf08      	it	eq
 8000a3c:	2800      	cmpeq	r0, #0
 8000a3e:	bf1c      	itt	ne
 8000a40:	f04f 31ff 	movne.w	r1, #4294967295
 8000a44:	f04f 30ff 	movne.w	r0, #4294967295
 8000a48:	f000 b988 	b.w	8000d5c <__aeabi_idiv0>
 8000a4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a54:	f000 f806 	bl	8000a64 <__udivmoddi4>
 8000a58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a60:	b004      	add	sp, #16
 8000a62:	4770      	bx	lr

08000a64 <__udivmoddi4>:
 8000a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a68:	9d08      	ldr	r5, [sp, #32]
 8000a6a:	468e      	mov	lr, r1
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	4688      	mov	r8, r1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d14a      	bne.n	8000b0a <__udivmoddi4+0xa6>
 8000a74:	428a      	cmp	r2, r1
 8000a76:	4617      	mov	r7, r2
 8000a78:	d962      	bls.n	8000b40 <__udivmoddi4+0xdc>
 8000a7a:	fab2 f682 	clz	r6, r2
 8000a7e:	b14e      	cbz	r6, 8000a94 <__udivmoddi4+0x30>
 8000a80:	f1c6 0320 	rsb	r3, r6, #32
 8000a84:	fa01 f806 	lsl.w	r8, r1, r6
 8000a88:	fa20 f303 	lsr.w	r3, r0, r3
 8000a8c:	40b7      	lsls	r7, r6
 8000a8e:	ea43 0808 	orr.w	r8, r3, r8
 8000a92:	40b4      	lsls	r4, r6
 8000a94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a98:	fa1f fc87 	uxth.w	ip, r7
 8000a9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000aa0:	0c23      	lsrs	r3, r4, #16
 8000aa2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fb01 f20c 	mul.w	r2, r1, ip
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d909      	bls.n	8000ac6 <__udivmoddi4+0x62>
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ab8:	f080 80ea 	bcs.w	8000c90 <__udivmoddi4+0x22c>
 8000abc:	429a      	cmp	r2, r3
 8000abe:	f240 80e7 	bls.w	8000c90 <__udivmoddi4+0x22c>
 8000ac2:	3902      	subs	r1, #2
 8000ac4:	443b      	add	r3, r7
 8000ac6:	1a9a      	subs	r2, r3, r2
 8000ac8:	b2a3      	uxth	r3, r4
 8000aca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ace:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ad6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ada:	459c      	cmp	ip, r3
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0x8e>
 8000ade:	18fb      	adds	r3, r7, r3
 8000ae0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae4:	f080 80d6 	bcs.w	8000c94 <__udivmoddi4+0x230>
 8000ae8:	459c      	cmp	ip, r3
 8000aea:	f240 80d3 	bls.w	8000c94 <__udivmoddi4+0x230>
 8000aee:	443b      	add	r3, r7
 8000af0:	3802      	subs	r0, #2
 8000af2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000af6:	eba3 030c 	sub.w	r3, r3, ip
 8000afa:	2100      	movs	r1, #0
 8000afc:	b11d      	cbz	r5, 8000b06 <__udivmoddi4+0xa2>
 8000afe:	40f3      	lsrs	r3, r6
 8000b00:	2200      	movs	r2, #0
 8000b02:	e9c5 3200 	strd	r3, r2, [r5]
 8000b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d905      	bls.n	8000b1a <__udivmoddi4+0xb6>
 8000b0e:	b10d      	cbz	r5, 8000b14 <__udivmoddi4+0xb0>
 8000b10:	e9c5 0100 	strd	r0, r1, [r5]
 8000b14:	2100      	movs	r1, #0
 8000b16:	4608      	mov	r0, r1
 8000b18:	e7f5      	b.n	8000b06 <__udivmoddi4+0xa2>
 8000b1a:	fab3 f183 	clz	r1, r3
 8000b1e:	2900      	cmp	r1, #0
 8000b20:	d146      	bne.n	8000bb0 <__udivmoddi4+0x14c>
 8000b22:	4573      	cmp	r3, lr
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xc8>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 8105 	bhi.w	8000d36 <__udivmoddi4+0x2d2>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4690      	mov	r8, r2
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d0e5      	beq.n	8000b06 <__udivmoddi4+0xa2>
 8000b3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b3e:	e7e2      	b.n	8000b06 <__udivmoddi4+0xa2>
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	f000 8090 	beq.w	8000c66 <__udivmoddi4+0x202>
 8000b46:	fab2 f682 	clz	r6, r2
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	f040 80a4 	bne.w	8000c98 <__udivmoddi4+0x234>
 8000b50:	1a8a      	subs	r2, r1, r2
 8000b52:	0c03      	lsrs	r3, r0, #16
 8000b54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b58:	b280      	uxth	r0, r0
 8000b5a:	b2bc      	uxth	r4, r7
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d907      	bls.n	8000b82 <__udivmoddi4+0x11e>
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x11c>
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	f200 80e0 	bhi.w	8000d40 <__udivmoddi4+0x2dc>
 8000b80:	46c4      	mov	ip, r8
 8000b82:	1a9b      	subs	r3, r3, r2
 8000b84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b90:	fb02 f404 	mul.w	r4, r2, r4
 8000b94:	429c      	cmp	r4, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x144>
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x142>
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	f200 80ca 	bhi.w	8000d3a <__udivmoddi4+0x2d6>
 8000ba6:	4602      	mov	r2, r0
 8000ba8:	1b1b      	subs	r3, r3, r4
 8000baa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bae:	e7a5      	b.n	8000afc <__udivmoddi4+0x98>
 8000bb0:	f1c1 0620 	rsb	r6, r1, #32
 8000bb4:	408b      	lsls	r3, r1
 8000bb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bba:	431f      	orrs	r7, r3
 8000bbc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bc0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bc4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bc8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bcc:	4323      	orrs	r3, r4
 8000bce:	fa00 f801 	lsl.w	r8, r0, r1
 8000bd2:	fa1f fc87 	uxth.w	ip, r7
 8000bd6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bda:	0c1c      	lsrs	r4, r3, #16
 8000bdc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000be0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000be4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	d909      	bls.n	8000c04 <__udivmoddi4+0x1a0>
 8000bf0:	193c      	adds	r4, r7, r4
 8000bf2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000bf6:	f080 809c 	bcs.w	8000d32 <__udivmoddi4+0x2ce>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f240 8099 	bls.w	8000d32 <__udivmoddi4+0x2ce>
 8000c00:	3802      	subs	r0, #2
 8000c02:	443c      	add	r4, r7
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	fa1f fe83 	uxth.w	lr, r3
 8000c0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c10:	fb09 4413 	mls	r4, r9, r3, r4
 8000c14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c1c:	45a4      	cmp	ip, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x1ce>
 8000c20:	193c      	adds	r4, r7, r4
 8000c22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c26:	f080 8082 	bcs.w	8000d2e <__udivmoddi4+0x2ca>
 8000c2a:	45a4      	cmp	ip, r4
 8000c2c:	d97f      	bls.n	8000d2e <__udivmoddi4+0x2ca>
 8000c2e:	3b02      	subs	r3, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c36:	eba4 040c 	sub.w	r4, r4, ip
 8000c3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c3e:	4564      	cmp	r4, ip
 8000c40:	4673      	mov	r3, lr
 8000c42:	46e1      	mov	r9, ip
 8000c44:	d362      	bcc.n	8000d0c <__udivmoddi4+0x2a8>
 8000c46:	d05f      	beq.n	8000d08 <__udivmoddi4+0x2a4>
 8000c48:	b15d      	cbz	r5, 8000c62 <__udivmoddi4+0x1fe>
 8000c4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c52:	fa04 f606 	lsl.w	r6, r4, r6
 8000c56:	fa22 f301 	lsr.w	r3, r2, r1
 8000c5a:	431e      	orrs	r6, r3
 8000c5c:	40cc      	lsrs	r4, r1
 8000c5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c62:	2100      	movs	r1, #0
 8000c64:	e74f      	b.n	8000b06 <__udivmoddi4+0xa2>
 8000c66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c6a:	0c01      	lsrs	r1, r0, #16
 8000c6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c70:	b280      	uxth	r0, r0
 8000c72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c76:	463b      	mov	r3, r7
 8000c78:	4638      	mov	r0, r7
 8000c7a:	463c      	mov	r4, r7
 8000c7c:	46b8      	mov	r8, r7
 8000c7e:	46be      	mov	lr, r7
 8000c80:	2620      	movs	r6, #32
 8000c82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c86:	eba2 0208 	sub.w	r2, r2, r8
 8000c8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c8e:	e766      	b.n	8000b5e <__udivmoddi4+0xfa>
 8000c90:	4601      	mov	r1, r0
 8000c92:	e718      	b.n	8000ac6 <__udivmoddi4+0x62>
 8000c94:	4610      	mov	r0, r2
 8000c96:	e72c      	b.n	8000af2 <__udivmoddi4+0x8e>
 8000c98:	f1c6 0220 	rsb	r2, r6, #32
 8000c9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	40b1      	lsls	r1, r6
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	430a      	orrs	r2, r1
 8000cae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb08 f904 	mul.w	r9, r8, r4
 8000cc2:	40b0      	lsls	r0, r6
 8000cc4:	4589      	cmp	r9, r1
 8000cc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cca:	b280      	uxth	r0, r0
 8000ccc:	d93e      	bls.n	8000d4c <__udivmoddi4+0x2e8>
 8000cce:	1879      	adds	r1, r7, r1
 8000cd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cd4:	d201      	bcs.n	8000cda <__udivmoddi4+0x276>
 8000cd6:	4589      	cmp	r9, r1
 8000cd8:	d81f      	bhi.n	8000d1a <__udivmoddi4+0x2b6>
 8000cda:	eba1 0109 	sub.w	r1, r1, r9
 8000cde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce2:	fb09 f804 	mul.w	r8, r9, r4
 8000ce6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cea:	b292      	uxth	r2, r2
 8000cec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf0:	4542      	cmp	r2, r8
 8000cf2:	d229      	bcs.n	8000d48 <__udivmoddi4+0x2e4>
 8000cf4:	18ba      	adds	r2, r7, r2
 8000cf6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000cfa:	d2c4      	bcs.n	8000c86 <__udivmoddi4+0x222>
 8000cfc:	4542      	cmp	r2, r8
 8000cfe:	d2c2      	bcs.n	8000c86 <__udivmoddi4+0x222>
 8000d00:	f1a9 0102 	sub.w	r1, r9, #2
 8000d04:	443a      	add	r2, r7
 8000d06:	e7be      	b.n	8000c86 <__udivmoddi4+0x222>
 8000d08:	45f0      	cmp	r8, lr
 8000d0a:	d29d      	bcs.n	8000c48 <__udivmoddi4+0x1e4>
 8000d0c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d10:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d14:	3801      	subs	r0, #1
 8000d16:	46e1      	mov	r9, ip
 8000d18:	e796      	b.n	8000c48 <__udivmoddi4+0x1e4>
 8000d1a:	eba7 0909 	sub.w	r9, r7, r9
 8000d1e:	4449      	add	r1, r9
 8000d20:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d24:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d28:	fb09 f804 	mul.w	r8, r9, r4
 8000d2c:	e7db      	b.n	8000ce6 <__udivmoddi4+0x282>
 8000d2e:	4673      	mov	r3, lr
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1ce>
 8000d32:	4650      	mov	r0, sl
 8000d34:	e766      	b.n	8000c04 <__udivmoddi4+0x1a0>
 8000d36:	4608      	mov	r0, r1
 8000d38:	e6fd      	b.n	8000b36 <__udivmoddi4+0xd2>
 8000d3a:	443b      	add	r3, r7
 8000d3c:	3a02      	subs	r2, #2
 8000d3e:	e733      	b.n	8000ba8 <__udivmoddi4+0x144>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	443b      	add	r3, r7
 8000d46:	e71c      	b.n	8000b82 <__udivmoddi4+0x11e>
 8000d48:	4649      	mov	r1, r9
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x222>
 8000d4c:	eba1 0109 	sub.w	r1, r1, r9
 8000d50:	46c4      	mov	ip, r8
 8000d52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d56:	fb09 f804 	mul.w	r8, r9, r4
 8000d5a:	e7c4      	b.n	8000ce6 <__udivmoddi4+0x282>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000d6a:	f107 020f 	add.w	r2, r7, #15
 8000d6e:	1df9      	adds	r1, r7, #7
 8000d70:	2364      	movs	r3, #100	@ 0x64
 8000d72:	9300      	str	r3, [sp, #0]
 8000d74:	2301      	movs	r3, #1
 8000d76:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <RC522_SPI_Transfer+0x28>)
 8000d78:	f003 fbf3 	bl	8004562 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000c4 	.word	0x200000c4

08000d8c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	460a      	mov	r2, r1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000da2:	480d      	ldr	r0, [pc, #52]	@ (8000dd8 <Write_MFRC522+0x4c>)
 8000da4:	f002 f92a 	bl	8002ffc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ffd3 	bl	8000d60 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ffcf 	bl	8000d60 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <Write_MFRC522+0x4c>)
 8000dca:	f002 f917 	bl	8002ffc <HAL_GPIO_WritePin>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40020400 	.word	0x40020400

08000ddc <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dec:	4810      	ldr	r0, [pc, #64]	@ (8000e30 <Read_MFRC522+0x54>)
 8000dee:	f002 f905 	bl	8002ffc <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ffa9 	bl	8000d60 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff ffa6 	bl	8000d60 <RC522_SPI_Transfer>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e1e:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <Read_MFRC522+0x54>)
 8000e20:	f002 f8ec 	bl	8002ffc <HAL_GPIO_WritePin>
	
	return val;	
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020400 	.word	0x40020400

08000e34 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ffc8 	bl	8000ddc <Read_MFRC522>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000e50:	7bfa      	ldrb	r2, [r7, #15]
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4611      	mov	r1, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff95 	bl	8000d8c <Write_MFRC522>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	460a      	mov	r2, r1
 8000e74:	71fb      	strb	r3, [r7, #7]
 8000e76:	4613      	mov	r3, r2
 8000e78:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ffad 	bl	8000ddc <Read_MFRC522>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000e86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	b25a      	sxtb	r2, r3
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4013      	ands	r3, r2
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff75 	bl	8000d8c <Write_MFRC522>
} 
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000eae:	2014      	movs	r0, #20
 8000eb0:	f7ff ff94 	bl	8000ddc <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	2014      	movs	r0, #20
 8000eb8:	f7ff ffbc 	bl	8000e34 <SetBitMask>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000ec4:	210f      	movs	r1, #15
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff ff60 	bl	8000d8c <Write_MFRC522>
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eda:	4813      	ldr	r0, [pc, #76]	@ (8000f28 <MFRC522_Init+0x58>)
 8000edc:	f002 f88e 	bl	8002ffc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	4811      	ldr	r0, [pc, #68]	@ (8000f2c <MFRC522_Init+0x5c>)
 8000ee6:	f002 f889 	bl	8002ffc <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000eea:	f7ff ffe9 	bl	8000ec0 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000eee:	218d      	movs	r1, #141	@ 0x8d
 8000ef0:	202a      	movs	r0, #42	@ 0x2a
 8000ef2:	f7ff ff4b 	bl	8000d8c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000ef6:	213e      	movs	r1, #62	@ 0x3e
 8000ef8:	202b      	movs	r0, #43	@ 0x2b
 8000efa:	f7ff ff47 	bl	8000d8c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8000efe:	211e      	movs	r1, #30
 8000f00:	202d      	movs	r0, #45	@ 0x2d
 8000f02:	f7ff ff43 	bl	8000d8c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	202c      	movs	r0, #44	@ 0x2c
 8000f0a:	f7ff ff3f 	bl	8000d8c <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000f0e:	2140      	movs	r1, #64	@ 0x40
 8000f10:	2015      	movs	r0, #21
 8000f12:	f7ff ff3b 	bl	8000d8c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000f16:	213d      	movs	r1, #61	@ 0x3d
 8000f18:	2011      	movs	r0, #17
 8000f1a:	f7ff ff37 	bl	8000d8c <Write_MFRC522>

	AntennaOn();
 8000f1e:	f7ff ffc4 	bl	8000eaa <AntennaOn>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800

08000f30 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000f42:	2302      	movs	r3, #2
 8000f44:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b0c      	cmp	r3, #12
 8000f52:	d006      	beq.n	8000f62 <MFRC522_ToCard+0x32>
 8000f54:	2b0e      	cmp	r3, #14
 8000f56:	d109      	bne.n	8000f6c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000f58:	2312      	movs	r3, #18
 8000f5a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	777b      	strb	r3, [r7, #29]
			break;
 8000f60:	e005      	b.n	8000f6e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000f62:	2377      	movs	r3, #119	@ 0x77
 8000f64:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000f66:	2330      	movs	r3, #48	@ 0x30
 8000f68:	777b      	strb	r3, [r7, #29]
			break;
 8000f6a:	e000      	b.n	8000f6e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000f6c:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000f6e:	7fbb      	ldrb	r3, [r7, #30]
 8000f70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff ff07 	bl	8000d8c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000f7e:	2180      	movs	r1, #128	@ 0x80
 8000f80:	2004      	movs	r0, #4
 8000f82:	f7ff ff72 	bl	8000e6a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000f86:	2180      	movs	r1, #128	@ 0x80
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f7ff ff53 	bl	8000e34 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2001      	movs	r0, #1
 8000f92:	f7ff fefb 	bl	8000d8c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	e00a      	b.n	8000fb2 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8000f9c:	68ba      	ldr	r2, [r7, #8]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	2009      	movs	r0, #9
 8000fa8:	f7ff fef0 	bl	8000d8c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	7bbb      	ldrb	r3, [r7, #14]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d3f0      	bcc.n	8000f9c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f7ff fee4 	bl	8000d8c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b0c      	cmp	r3, #12
 8000fc8:	d103      	bne.n	8000fd2 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000fca:	2180      	movs	r1, #128	@ 0x80
 8000fcc:	200d      	movs	r0, #13
 8000fce:	f7ff ff31 	bl	8000e34 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000fd2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000fd6:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f7ff feff 	bl	8000ddc <Read_MFRC522>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	773b      	strb	r3, [r7, #28]
        i--;
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00a      	beq.n	8001004 <MFRC522_ToCard+0xd4>
 8000fee:	7f3b      	ldrb	r3, [r7, #28]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d105      	bne.n	8001004 <MFRC522_ToCard+0xd4>
 8000ff8:	7f3a      	ldrb	r2, [r7, #28]
 8000ffa:	7f7b      	ldrb	r3, [r7, #29]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0e9      	beq.n	8000fd8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	200d      	movs	r0, #13
 8001008:	f7ff ff2f 	bl	8000e6a <ClearBitMask>
	
    if (i != 0)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d052      	beq.n	80010b8 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001012:	2006      	movs	r0, #6
 8001014:	f7ff fee2 	bl	8000ddc <Read_MFRC522>
 8001018:	4603      	mov	r3, r0
 800101a:	f003 031b 	and.w	r3, r3, #27
 800101e:	2b00      	cmp	r3, #0
 8001020:	d148      	bne.n	80010b4 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001026:	7f3a      	ldrb	r2, [r7, #28]
 8001028:	7fbb      	ldrb	r3, [r7, #30]
 800102a:	4013      	ands	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8001036:	2301      	movs	r3, #1
 8001038:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b0c      	cmp	r3, #12
 800103e:	d13b      	bne.n	80010b8 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001040:	200a      	movs	r0, #10
 8001042:	f7ff fecb 	bl	8000ddc <Read_MFRC522>
 8001046:	4603      	mov	r3, r0
 8001048:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800104a:	200c      	movs	r0, #12
 800104c:	f7ff fec6 	bl	8000ddc <Read_MFRC522>
 8001050:	4603      	mov	r3, r0
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800105e:	7f3b      	ldrb	r3, [r7, #28]
 8001060:	3b01      	subs	r3, #1
 8001062:	00da      	lsls	r2, r3, #3
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	4413      	add	r3, r2
 8001068:	461a      	mov	r2, r3
 800106a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e004      	b.n	800107a <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8001070:	7f3b      	ldrb	r3, [r7, #28]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	461a      	mov	r2, r3
 8001076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001078:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800107a:	7f3b      	ldrb	r3, [r7, #28]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8001080:	2301      	movs	r3, #1
 8001082:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001084:	7f3b      	ldrb	r3, [r7, #28]
 8001086:	2b10      	cmp	r3, #16
 8001088:	d901      	bls.n	800108e <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 800108a:	2310      	movs	r3, #16
 800108c:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	e00a      	b.n	80010aa <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	18d4      	adds	r4, r2, r3
 800109a:	2009      	movs	r0, #9
 800109c:	f7ff fe9e 	bl	8000ddc <Read_MFRC522>
 80010a0:	4603      	mov	r3, r0
 80010a2:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	7f3b      	ldrb	r3, [r7, #28]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d3f0      	bcc.n	8001094 <MFRC522_ToCard+0x164>
 80010b2:	e001      	b.n	80010b8 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 80010b4:	2302      	movs	r3, #2
 80010b6:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	@ 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd90      	pop	{r4, r7, pc}

080010c2 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af02      	add	r7, sp, #8
 80010c8:	4603      	mov	r3, r0
 80010ca:	6039      	str	r1, [r7, #0]
 80010cc:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80010ce:	2107      	movs	r1, #7
 80010d0:	200d      	movs	r0, #13
 80010d2:	f7ff fe5b 	bl	8000d8c <Write_MFRC522>
	
	TagType[0] = reqMode;
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	2201      	movs	r2, #1
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	200c      	movs	r0, #12
 80010ea:	f7ff ff21 	bl	8000f30 <MFRC522_ToCard>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <MFRC522_Request+0x3c>
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b10      	cmp	r3, #16
 80010fc:	d001      	beq.n	8001102 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 80010fe:	2302      	movs	r3, #2
 8001100:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af02      	add	r7, sp, #8
 8001112:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8001114:	2300      	movs	r3, #0
 8001116:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001118:	2100      	movs	r1, #0
 800111a:	200d      	movs	r0, #13
 800111c:	f7ff fe36 	bl	8000d8c <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2293      	movs	r2, #147	@ 0x93
 8001124:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3301      	adds	r3, #1
 800112a:	2220      	movs	r2, #32
 800112c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2202      	movs	r2, #2
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	200c      	movs	r0, #12
 800113c:	f7ff fef8 	bl	8000f30 <MFRC522_ToCard>
 8001140:	4603      	mov	r3, r0
 8001142:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d118      	bne.n	800117c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800114a:	2300      	movs	r3, #0
 800114c:	73bb      	strb	r3, [r7, #14]
 800114e:	e009      	b.n	8001164 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8001150:	7bbb      	ldrb	r3, [r7, #14]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	781a      	ldrb	r2, [r3, #0]
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	4053      	eors	r3, r2
 800115c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3301      	adds	r3, #1
 8001162:	73bb      	strb	r3, [r7, #14]
 8001164:	7bbb      	ldrb	r3, [r7, #14]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d9f2      	bls.n	8001150 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	7b7a      	ldrb	r2, [r7, #13]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8001178:	2302      	movs	r3, #2
 800117a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
} 
 800117e:	4618      	mov	r0, r3
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a33      	ldr	r2, [pc, #204]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a2c      	ldr	r2, [pc, #176]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b26      	ldr	r3, [pc, #152]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a25      	ldr	r2, [pc, #148]	@ (8001290 <MX_GPIO_Init+0x108>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <MX_GPIO_Init+0x108>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	218c      	movs	r1, #140	@ 0x8c
 8001212:	4820      	ldr	r0, [pc, #128]	@ (8001294 <MX_GPIO_Init+0x10c>)
 8001214:	f001 fef2 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f240 2112 	movw	r1, #530	@ 0x212
 800121e:	481e      	ldr	r0, [pc, #120]	@ (8001298 <MX_GPIO_Init+0x110>)
 8001220:	f001 feec 	bl	8002ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_5
 8001224:	2200      	movs	r2, #0
 8001226:	f24a 2162 	movw	r1, #41570	@ 0xa262
 800122a:	481c      	ldr	r0, [pc, #112]	@ (800129c <MX_GPIO_Init+0x114>)
 800122c:	f001 fee6 	bl	8002ffc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC2 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 8001230:	238c      	movs	r3, #140	@ 0x8c
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	4813      	ldr	r0, [pc, #76]	@ (8001294 <MX_GPIO_Init+0x10c>)
 8001248:	f001 fd44 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9;
 800124c:	f240 2312 	movw	r3, #530	@ 0x212
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <MX_GPIO_Init+0x110>)
 8001266:	f001 fd35 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB15 PB5
                           PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_5
 800126a:	f24a 2362 	movw	r3, #41570	@ 0xa262
 800126e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	@ (800129c <MX_GPIO_Init+0x114>)
 8001284:	f001 fd26 	bl	8002cd4 <HAL_GPIO_Init>

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40023800 	.word	0x40023800
 8001294:	40020800 	.word	0x40020800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400

080012a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012a6:	4a13      	ldr	r2, [pc, #76]	@ (80012f4 <MX_I2C1_Init+0x54>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012ac:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <MX_I2C1_Init+0x58>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d0:	4b07      	ldr	r3, [pc, #28]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <MX_I2C1_Init+0x50>)
 80012de:	f001 fea7 	bl	8003030 <HAL_I2C_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e8:	f000 fcd4 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000028 	.word	0x20000028
 80012f4:	40005400 	.word	0x40005400
 80012f8:	00061a80 	.word	0x00061a80

080012fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	@ (8001380 <HAL_I2C_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12c      	bne.n	8001378 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <HAL_I2C_MspInit+0x88>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a17      	ldr	r2, [pc, #92]	@ (8001384 <HAL_I2C_MspInit+0x88>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_I2C_MspInit+0x88>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800133a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001340:	2312      	movs	r3, #18
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800134c:	2304      	movs	r3, #4
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	480c      	ldr	r0, [pc, #48]	@ (8001388 <HAL_I2C_MspInit+0x8c>)
 8001358:	f001 fcbc 	bl	8002cd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_I2C_MspInit+0x88>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	4a07      	ldr	r2, [pc, #28]	@ (8001384 <HAL_I2C_MspInit+0x88>)
 8001366:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800136a:	6413      	str	r3, [r2, #64]	@ 0x40
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_I2C_MspInit+0x88>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	@ 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40005400 	.word	0x40005400
 8001384:	40023800 	.word	0x40023800
 8001388:	40020400 	.word	0x40020400
 800138c:	00000000 	.word	0x00000000

08001390 <HAL_TIM_IC_CaptureCallback>:
void delay(uint16_t time) {
	__HAL_TIM_SET_COUNTER(&htim6, 0);
	while (__HAL_TIM_SET_COUNTER(&htim6, 0) < time);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7f1b      	ldrb	r3, [r3, #28]
 800139c:	2b01      	cmp	r3, #1
 800139e:	f040 8083 	bne.w	80014a8 <HAL_TIM_IC_CaptureCallback+0x118>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 80013a2:	4b99      	ldr	r3, [pc, #612]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x278>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d11a      	bne.n	80013e0 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80013aa:	2100      	movs	r1, #0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f004 fa2b 	bl	8005808 <HAL_TIM_ReadCapturedValue>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4a95      	ldr	r2, [pc, #596]	@ (800160c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80013b6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80013b8:	4b93      	ldr	r3, [pc, #588]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x278>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 020a 	bic.w	r2, r2, #10
 80013cc:	621a      	str	r2, [r3, #32]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0202 	orr.w	r2, r2, #2
 80013dc:	621a      	str	r2, [r3, #32]
 80013de:	e063      	b.n	80014a8 <HAL_TIM_IC_CaptureCallback+0x118>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured == 1)   // if the first is already captured
 80013e0:	4b89      	ldr	r3, [pc, #548]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x278>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d15f      	bne.n	80014a8 <HAL_TIM_IC_CaptureCallback+0x118>
				{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 80013e8:	2100      	movs	r1, #0
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f004 fa0c 	bl	8005808 <HAL_TIM_ReadCapturedValue>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a87      	ldr	r2, [pc, #540]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x280>)
 80013f4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	@ 0x24

			if (IC_Val2 > IC_Val1) {
 80013fe:	4b84      	ldr	r3, [pc, #528]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b82      	ldr	r3, [pc, #520]	@ (800160c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d907      	bls.n	800141a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 800140a:	4b81      	ldr	r3, [pc, #516]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x280>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b7f      	ldr	r3, [pc, #508]	@ (800160c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	4a7f      	ldr	r2, [pc, #508]	@ (8001614 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e00f      	b.n	800143a <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_Val1 > IC_Val2) {
 800141a:	4b7c      	ldr	r3, [pc, #496]	@ (800160c <HAL_TIM_IC_CaptureCallback+0x27c>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b7c      	ldr	r3, [pc, #496]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d909      	bls.n	800143a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001426:	4b7a      	ldr	r3, [pc, #488]	@ (8001610 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	4b78      	ldr	r3, [pc, #480]	@ (800160c <HAL_TIM_IC_CaptureCallback+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001434:	33ff      	adds	r3, #255	@ 0xff
 8001436:	4a77      	ldr	r2, [pc, #476]	@ (8001614 <HAL_TIM_IC_CaptureCallback+0x284>)
 8001438:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034 / 2;
 800143a:	4b76      	ldr	r3, [pc, #472]	@ (8001614 <HAL_TIM_IC_CaptureCallback+0x284>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f824 	bl	800048c <__aeabi_ui2d>
 8001444:	a36e      	add	r3, pc, #440	@ (adr r3, 8001600 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f899 	bl	8000580 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800145e:	f7ff f9b9 	bl	80007d4 <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fac3 	bl	80009f4 <__aeabi_d2uiz>
 800146e:	4603      	mov	r3, r0
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b69      	ldr	r3, [pc, #420]	@ (8001618 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001474:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001476:	4b64      	ldr	r3, [pc, #400]	@ (8001608 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6a1a      	ldr	r2, [r3, #32]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 020a 	bic.w	r2, r2, #10
 800148a:	621a      	str	r2, [r3, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a12      	ldr	r2, [r2, #32]
 8001496:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001498:	4b60      	ldr	r3, [pc, #384]	@ (800161c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	4b5f      	ldr	r3, [pc, #380]	@ (800161c <HAL_TIM_IC_CaptureCallback+0x28c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0202 	bic.w	r2, r2, #2
 80014a6:	60da      	str	r2, [r3, #12]
		}
	}

	//2uz
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // if the interrupt source is channel1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7f1b      	ldrb	r3, [r3, #28]
 80014ac:	2b04      	cmp	r3, #4
 80014ae:	f040 8083 	bne.w	80015b8 <HAL_TIM_IC_CaptureCallback+0x228>
			{
		if (Is_First_Captured_2 == 0) // if the first value is not captured
 80014b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001620 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d11a      	bne.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x160>
				{
			IC_Val1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 80014ba:	2108      	movs	r1, #8
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f004 f9a3 	bl	8005808 <HAL_TIM_ReadCapturedValue>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a57      	ldr	r2, [pc, #348]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014c6:	6013      	str	r3, [r2, #0]
			Is_First_Captured_2 = 1;  // set the first captured as true
 80014c8:	4b55      	ldr	r3, [pc, #340]	@ (8001620 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1a      	ldr	r2, [r3, #32]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80014dc:	621a      	str	r2, [r3, #32]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014ec:	621a      	str	r2, [r3, #32]
 80014ee:	e063      	b.n	80015b8 <HAL_TIM_IC_CaptureCallback+0x228>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured_2 == 1)   // if the first is already captured
 80014f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001620 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d15f      	bne.n	80015b8 <HAL_TIM_IC_CaptureCallback+0x228>
				{
			IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read second value
 80014f8:	2108      	movs	r1, #8
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f004 f984 	bl	8005808 <HAL_TIM_ReadCapturedValue>
 8001500:	4603      	mov	r3, r0
 8001502:	4a49      	ldr	r2, [pc, #292]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001504:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	@ 0x24

			if (IC_Val2_2 > IC_Val1_2) {
 800150e:	4b46      	ldr	r3, [pc, #280]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b44      	ldr	r3, [pc, #272]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d907      	bls.n	800152a <HAL_TIM_IC_CaptureCallback+0x19a>
				Difference2 = IC_Val2_2 - IC_Val1_2;
 800151a:	4b43      	ldr	r3, [pc, #268]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0x298>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a41      	ldr	r2, [pc, #260]	@ (800162c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e00f      	b.n	800154a <HAL_TIM_IC_CaptureCallback+0x1ba>
			}

			else if (IC_Val1_2 > IC_Val2_2) {
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0x294>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4b3e      	ldr	r3, [pc, #248]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d909      	bls.n	800154a <HAL_TIM_IC_CaptureCallback+0x1ba>
				Difference2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 8001536:	4b3c      	ldr	r3, [pc, #240]	@ (8001628 <HAL_TIM_IC_CaptureCallback+0x298>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <HAL_TIM_IC_CaptureCallback+0x294>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001544:	33ff      	adds	r3, #255	@ 0xff
 8001546:	4a39      	ldr	r2, [pc, #228]	@ (800162c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001548:	6013      	str	r3, [r2, #0]
			}

			Distance2 = Difference2 * .034 / 2;
 800154a:	4b38      	ldr	r3, [pc, #224]	@ (800162c <HAL_TIM_IC_CaptureCallback+0x29c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff9c 	bl	800048c <__aeabi_ui2d>
 8001554:	a32a      	add	r3, pc, #168	@ (adr r3, 8001600 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7ff f811 	bl	8000580 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800156e:	f7ff f931 	bl	80007d4 <__aeabi_ddiv>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff fa3b 	bl	80009f4 <__aeabi_d2uiz>
 800157e:	4603      	mov	r3, r0
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b2b      	ldr	r3, [pc, #172]	@ (8001630 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001584:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_2 = 0; // set it back to false
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a1a      	ldr	r2, [r3, #32]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800159a:	621a      	str	r2, [r3, #32]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6a12      	ldr	r2, [r2, #32]
 80015a6:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 80015a8:	4b1c      	ldr	r3, [pc, #112]	@ (800161c <HAL_TIM_IC_CaptureCallback+0x28c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_TIM_IC_CaptureCallback+0x28c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0208 	bic.w	r2, r2, #8
 80015b6:	60da      	str	r2, [r3, #12]
		}
	}

	//3uz
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // if the interrupt source is channel1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7f1b      	ldrb	r3, [r3, #28]
 80015bc:	2b08      	cmp	r3, #8
 80015be:	f040 80a1 	bne.w	8001704 <HAL_TIM_IC_CaptureCallback+0x374>
			{
		if (Is_First_Captured_3 == 0) // if the first value is not captured
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d138      	bne.n	800163c <HAL_TIM_IC_CaptureCallback+0x2ac>
				{
			IC_Val1_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 80015ca:	210c      	movs	r1, #12
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f004 f91b 	bl	8005808 <HAL_TIM_ReadCapturedValue>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 80015d6:	6013      	str	r3, [r2, #0]
			Is_First_Captured_3 = 1;  // set the first captured as true
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1a      	ldr	r2, [r3, #32]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80015ec:	621a      	str	r2, [r3, #32]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015fc:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
		}
	}

}
 80015fe:	e081      	b.n	8001704 <HAL_TIM_IC_CaptureCallback+0x374>
 8001600:	b020c49c 	.word	0xb020c49c
 8001604:	3fa16872 	.word	0x3fa16872
 8001608:	20000088 	.word	0x20000088
 800160c:	2000007c 	.word	0x2000007c
 8001610:	20000080 	.word	0x20000080
 8001614:	20000084 	.word	0x20000084
 8001618:	20000089 	.word	0x20000089
 800161c:	20000524 	.word	0x20000524
 8001620:	20000094 	.word	0x20000094
 8001624:	2000008c 	.word	0x2000008c
 8001628:	20000090 	.word	0x20000090
 800162c:	20000098 	.word	0x20000098
 8001630:	20000095 	.word	0x20000095
 8001634:	200000a4 	.word	0x200000a4
 8001638:	2000009c 	.word	0x2000009c
		else if (Is_First_Captured_3 == 1)   // if the first is already captured
 800163c:	4b36      	ldr	r3, [pc, #216]	@ (8001718 <HAL_TIM_IC_CaptureCallback+0x388>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d15f      	bne.n	8001704 <HAL_TIM_IC_CaptureCallback+0x374>
			IC_Val2_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read second value
 8001644:	210c      	movs	r1, #12
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f004 f8de 	bl	8005808 <HAL_TIM_ReadCapturedValue>
 800164c:	4603      	mov	r3, r0
 800164e:	4a33      	ldr	r2, [pc, #204]	@ (800171c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001650:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2_3 > IC_Val1_3) {
 800165a:	4b30      	ldr	r3, [pc, #192]	@ (800171c <HAL_TIM_IC_CaptureCallback+0x38c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	4b30      	ldr	r3, [pc, #192]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d907      	bls.n	8001676 <HAL_TIM_IC_CaptureCallback+0x2e6>
				Difference3 = IC_Val2_3 - IC_Val1_3;
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0x390>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	4a2c      	ldr	r2, [pc, #176]	@ (8001724 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e00f      	b.n	8001696 <HAL_TIM_IC_CaptureCallback+0x306>
			else if (IC_Val1_3 > IC_Val2_3) {
 8001676:	4b2a      	ldr	r3, [pc, #168]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b28      	ldr	r3, [pc, #160]	@ (800171c <HAL_TIM_IC_CaptureCallback+0x38c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d909      	bls.n	8001696 <HAL_TIM_IC_CaptureCallback+0x306>
				Difference3 = (0xffff - IC_Val1_3) + IC_Val2_3;
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b26      	ldr	r3, [pc, #152]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001690:	33ff      	adds	r3, #255	@ 0xff
 8001692:	4a24      	ldr	r2, [pc, #144]	@ (8001724 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001694:	6013      	str	r3, [r2, #0]
			Distance3 = Difference3 * .034 / 2;
 8001696:	4b23      	ldr	r3, [pc, #140]	@ (8001724 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fef6 	bl	800048c <__aeabi_ui2d>
 80016a0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001710 <HAL_TIM_IC_CaptureCallback+0x380>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ff6b 	bl	8000580 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016ba:	f7ff f88b 	bl	80007d4 <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f995 	bl	80009f4 <__aeabi_d2uiz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <HAL_TIM_IC_CaptureCallback+0x398>)
 80016d0:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_3 = 0; // set it back to false
 80016d2:	4b11      	ldr	r3, [pc, #68]	@ (8001718 <HAL_TIM_IC_CaptureCallback+0x388>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80016e6:	621a      	str	r2, [r3, #32]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6a12      	ldr	r2, [r2, #32]
 80016f2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 80016f4:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_TIM_IC_CaptureCallback+0x39c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <HAL_TIM_IC_CaptureCallback+0x39c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0210 	bic.w	r2, r2, #16
 8001702:	60da      	str	r2, [r3, #12]
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	b020c49c 	.word	0xb020c49c
 8001714:	3fa16872 	.word	0x3fa16872
 8001718:	200000a4 	.word	0x200000a4
 800171c:	200000a0 	.word	0x200000a0
 8001720:	2000009c 	.word	0x2000009c
 8001724:	200000a8 	.word	0x200000a8
 8001728:	200000a5 	.word	0x200000a5
 800172c:	20000524 	.word	0x20000524

08001730 <HCSR04_Read>:

void HCSR04_Read(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800173a:	480b      	ldr	r0, [pc, #44]	@ (8001768 <HCSR04_Read+0x38>)
 800173c:	f001 fc5e 	bl	8002ffc <HAL_GPIO_WritePin>
	HAL_Delay(1);   // wait for 10 us
 8001740:	2001      	movs	r0, #1
 8001742:	f001 f991 	bl	8002a68 <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001746:	2200      	movs	r2, #0
 8001748:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800174c:	4806      	ldr	r0, [pc, #24]	@ (8001768 <HCSR04_Read+0x38>)
 800174e:	f001 fc55 	bl	8002ffc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HCSR04_Read+0x3c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	4b04      	ldr	r3, [pc, #16]	@ (800176c <HCSR04_Read+0x3c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0202 	orr.w	r2, r2, #2
 8001760:	60da      	str	r2, [r3, #12]
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40020000 	.word	0x40020000
 800176c:	20000524 	.word	0x20000524

08001770 <HCSR04_Read2>:
void HCSR04_Read2(void) {
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001774:	2201      	movs	r2, #1
 8001776:	2102      	movs	r1, #2
 8001778:	480a      	ldr	r0, [pc, #40]	@ (80017a4 <HCSR04_Read2+0x34>)
 800177a:	f001 fc3f 	bl	8002ffc <HAL_GPIO_WritePin>
	HAL_Delay(1);   // wait for 10 us
 800177e:	2001      	movs	r0, #1
 8001780:	f001 f972 	bl	8002a68 <HAL_Delay>
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	4806      	ldr	r0, [pc, #24]	@ (80017a4 <HCSR04_Read2+0x34>)
 800178a:	f001 fc37 	bl	8002ffc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HCSR04_Read2+0x38>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <HCSR04_Read2+0x38>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0208 	orr.w	r2, r2, #8
 800179c:	60da      	str	r2, [r3, #12]
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020000 	.word	0x40020000
 80017a8:	20000524 	.word	0x20000524

080017ac <HCSR04_Read3>:
void HCSR04_Read3(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG3_PORT, TRIG3_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80017b0:	2201      	movs	r2, #1
 80017b2:	2110      	movs	r1, #16
 80017b4:	480a      	ldr	r0, [pc, #40]	@ (80017e0 <HCSR04_Read3+0x34>)
 80017b6:	f001 fc21 	bl	8002ffc <HAL_GPIO_WritePin>
	HAL_Delay(1);   // wait for 10 us
 80017ba:	2001      	movs	r0, #1
 80017bc:	f001 f954 	bl	8002a68 <HAL_Delay>
	HAL_GPIO_WritePin(TRIG3_PORT, TRIG3_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80017c0:	2200      	movs	r2, #0
 80017c2:	2110      	movs	r1, #16
 80017c4:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <HCSR04_Read3+0x34>)
 80017c6:	f001 fc19 	bl	8002ffc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HCSR04_Read3+0x38>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <HCSR04_Read3+0x38>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f042 0210 	orr.w	r2, r2, #16
 80017d8:	60da      	str	r2, [r3, #12]
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40020000 	.word	0x40020000
 80017e4:	20000524 	.word	0x20000524

080017e8 <playTone>:

void playTone(uint32_t freq, uint32_t duration_ms) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	uint32_t timer_clk = 1000000;  // After prescaler = 89
 80017f2:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <playTone+0x58>)
 80017f4:	617b      	str	r3, [r7, #20]
	uint32_t period = timer_clk / freq - 1;
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	3b01      	subs	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
	uint32_t duty = (period + 1) / 2;
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	3301      	adds	r3, #1
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(&htim3, period);
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <playTone+0x5c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001812:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <playTone+0x5c>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <playTone+0x5c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001820:	2100      	movs	r1, #0
 8001822:	4808      	ldr	r0, [pc, #32]	@ (8001844 <playTone+0x5c>)
 8001824:	f003 fa2a 	bl	8004c7c <HAL_TIM_PWM_Start>
	HAL_Delay(duration_ms);
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f001 f91d 	bl	8002a68 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800182e:	2100      	movs	r1, #0
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <playTone+0x5c>)
 8001832:	f003 faeb 	bl	8004e0c <HAL_TIM_PWM_Stop>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	000f4240 	.word	0x000f4240
 8001844:	200005b4 	.word	0x200005b4

08001848 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int map(int st1, int fn1, int st2, int fn2, int value) {
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
	return (1.0 * (value - st1)) / ((fn1 - st1) * 1.0) * (fn2 - st2) + st2;
 8001856:	6a3a      	ldr	r2, [r7, #32]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe25 	bl	80004ac <__aeabi_i2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe1d 	bl	80004ac <__aeabi_i2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4620      	mov	r0, r4
 8001878:	4629      	mov	r1, r5
 800187a:	f7fe ffab 	bl	80007d4 <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe0d 	bl	80004ac <__aeabi_i2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fe71 	bl	8000580 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4614      	mov	r4, r2
 80018a4:	461d      	mov	r5, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe fe00 	bl	80004ac <__aeabi_i2d>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4620      	mov	r0, r4
 80018b2:	4629      	mov	r1, r5
 80018b4:	f7fe fcae 	bl	8000214 <__adddf3>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f7ff f870 	bl	80009a4 <__aeabi_d2iz>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080018d0 <servo_write>:

void servo_write(int angle) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR1 = map(0, 180, 50, 250, angle);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	23fa      	movs	r3, #250	@ 0xfa
 80018de:	2232      	movs	r2, #50	@ 0x32
 80018e0:	21b4      	movs	r1, #180	@ 0xb4
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff ffb0 	bl	8001848 <map>
 80018e8:	4602      	mov	r2, r0
 80018ea:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <servo_write+0x28>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	2000056c 	.word	0x2000056c

080018fc <servo_sweep>:

void servo_sweep(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
	for (int i = 0; i <= 50; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	e008      	b.n	800191a <servo_sweep+0x1e>
		servo_write(i);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffe1 	bl	80018d0 <servo_write>
		HAL_Delay(10);
 800190e:	200a      	movs	r0, #10
 8001910:	f001 f8aa 	bl	8002a68 <HAL_Delay>
	for (int i = 0; i <= 50; i++) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3301      	adds	r3, #1
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b32      	cmp	r3, #50	@ 0x32
 800191e:	ddf3      	ble.n	8001908 <servo_sweep+0xc>
	}
	HAL_Delay(3000);
 8001920:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001924:	f001 f8a0 	bl	8002a68 <HAL_Delay>
	for (int i = 50; i >= 0; i--) {
 8001928:	2332      	movs	r3, #50	@ 0x32
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	e008      	b.n	8001940 <servo_sweep+0x44>
		servo_write(i);
 800192e:	6838      	ldr	r0, [r7, #0]
 8001930:	f7ff ffce 	bl	80018d0 <servo_write>
		HAL_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f001 f897 	bl	8002a68 <HAL_Delay>
	for (int i = 50; i >= 0; i--) {
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3b01      	subs	r3, #1
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	daf3      	bge.n	800192e <servo_sweep+0x32>
	}

}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <ultras>:

void ultras(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	HCSR04_Read();
 8001954:	f7ff feec 	bl	8001730 <HCSR04_Read>
	//HAL_Delay(200);

	if (Distance <= 5) {
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <ultras+0xb4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d80a      	bhi.n	8001976 <ultras+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001960:	2200      	movs	r2, #0
 8001962:	2140      	movs	r1, #64	@ 0x40
 8001964:	4828      	ldr	r0, [pc, #160]	@ (8001a08 <ultras+0xb8>)
 8001966:	f001 fb49 	bl	8002ffc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800196a:	2201      	movs	r2, #1
 800196c:	2108      	movs	r1, #8
 800196e:	4827      	ldr	r0, [pc, #156]	@ (8001a0c <ultras+0xbc>)
 8001970:	f001 fb44 	bl	8002ffc <HAL_GPIO_WritePin>
 8001974:	e009      	b.n	800198a <ultras+0x3a>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8001976:	2201      	movs	r2, #1
 8001978:	2140      	movs	r1, #64	@ 0x40
 800197a:	4823      	ldr	r0, [pc, #140]	@ (8001a08 <ultras+0xb8>)
 800197c:	f001 fb3e 	bl	8002ffc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2108      	movs	r1, #8
 8001984:	4821      	ldr	r0, [pc, #132]	@ (8001a0c <ultras+0xbc>)
 8001986:	f001 fb39 	bl	8002ffc <HAL_GPIO_WritePin>
	}

	HCSR04_Read2();
 800198a:	f7ff fef1 	bl	8001770 <HCSR04_Read2>
	//HAL_Delay(200);

	if (Distance2 <= 5) {
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <ultras+0xc0>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b05      	cmp	r3, #5
 8001994:	d80b      	bhi.n	80019ae <ultras+0x5e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800199c:	481a      	ldr	r0, [pc, #104]	@ (8001a08 <ultras+0xb8>)
 800199e:	f001 fb2d 	bl	8002ffc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1); // LED2 ON
 80019a2:	2201      	movs	r2, #1
 80019a4:	2104      	movs	r1, #4
 80019a6:	4819      	ldr	r0, [pc, #100]	@ (8001a0c <ultras+0xbc>)
 80019a8:	f001 fb28 	bl	8002ffc <HAL_GPIO_WritePin>
 80019ac:	e00a      	b.n	80019c4 <ultras+0x74>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019b4:	4814      	ldr	r0, [pc, #80]	@ (8001a08 <ultras+0xb8>)
 80019b6:	f001 fb21 	bl	8002ffc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2104      	movs	r1, #4
 80019be:	4813      	ldr	r0, [pc, #76]	@ (8001a0c <ultras+0xbc>)
 80019c0:	f001 fb1c 	bl	8002ffc <HAL_GPIO_WritePin>
	}

	HCSR04_Read3();
 80019c4:	f7ff fef2 	bl	80017ac <HCSR04_Read3>
	//HAL_Delay(200);

	if (Distance3 <= 5) {
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <ultras+0xc4>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d80b      	bhi.n	80019e8 <ultras+0x98>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2102      	movs	r1, #2
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <ultras+0xb8>)
 80019d6:	f001 fb11 	bl	8002ffc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // LED2 ON
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <ultras+0xb8>)
 80019e2:	f001 fb0b 	bl	8002ffc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	}

}
 80019e6:	e00a      	b.n	80019fe <ultras+0xae>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2102      	movs	r1, #2
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <ultras+0xb8>)
 80019ee:	f001 fb05 	bl	8002ffc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019f8:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <ultras+0xb8>)
 80019fa:	f001 faff 	bl	8002ffc <HAL_GPIO_WritePin>
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000089 	.word	0x20000089
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	20000095 	.word	0x20000095
 8001a14:	200000a5 	.word	0x200000a5

08001a18 <ocitanje>:

void ocitanje(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af02      	add	r7, sp, #8
	status = MFRC522_Request(PICC_REQIDL, str);
 8001a1e:	4942      	ldr	r1, [pc, #264]	@ (8001b28 <ocitanje+0x110>)
 8001a20:	2026      	movs	r0, #38	@ 0x26
 8001a22:	f7ff fb4e 	bl	80010c2 <MFRC522_Request>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <ocitanje+0x114>)
 8001a2c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_Anticoll(str);
 8001a2e:	483e      	ldr	r0, [pc, #248]	@ (8001b28 <ocitanje+0x110>)
 8001a30:	f7ff fb6c 	bl	800110c <MFRC522_Anticoll>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <ocitanje+0x114>)
 8001a3a:	701a      	strb	r2, [r3, #0]
	memcpy(sNum, str, 4);
 8001a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b28 <ocitanje+0x110>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a3b      	ldr	r2, [pc, #236]	@ (8001b30 <ocitanje+0x118>)
 8001a42:	6013      	str	r3, [r2, #0]
	HAL_Delay(200);
 8001a44:	20c8      	movs	r0, #200	@ 0xc8
 8001a46:	f001 f80f 	bl	8002a68 <HAL_Delay>
	if ((str[0] == 0x75) && (str[1] == 0xED) && (str[2] == 0xE7)
 8001a4a:	4b37      	ldr	r3, [pc, #220]	@ (8001b28 <ocitanje+0x110>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b75      	cmp	r3, #117	@ 0x75
 8001a50:	d124      	bne.n	8001a9c <ocitanje+0x84>
 8001a52:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <ocitanje+0x110>)
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	2bed      	cmp	r3, #237	@ 0xed
 8001a58:	d120      	bne.n	8001a9c <ocitanje+0x84>
 8001a5a:	4b33      	ldr	r3, [pc, #204]	@ (8001b28 <ocitanje+0x110>)
 8001a5c:	789b      	ldrb	r3, [r3, #2]
 8001a5e:	2be7      	cmp	r3, #231	@ 0xe7
 8001a60:	d11c      	bne.n	8001a9c <ocitanje+0x84>
			&& (str[3] == 0x2B)) {
 8001a62:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <ocitanje+0x110>)
 8001a64:	78db      	ldrb	r3, [r3, #3]
 8001a66:	2b2b      	cmp	r3, #43	@ 0x2b
 8001a68:	d118      	bne.n	8001a9c <ocitanje+0x84>
		playTone(2500, 300);
 8001a6a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001a6e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001a72:	f7ff feb9 	bl	80017e8 <playTone>
		ssd1306_Fill(Black);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f000 fa54 	bl	8001f24 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 fb9c 	bl	80021bc <ssd1306_SetCursor>
		ssd1306_WriteString("Kartica ocitana!", Font_6x8, White);
 8001a84:	4b2b      	ldr	r3, [pc, #172]	@ (8001b34 <ocitanje+0x11c>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	9200      	str	r2, [sp, #0]
 8001a8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8c:	482a      	ldr	r0, [pc, #168]	@ (8001b38 <ocitanje+0x120>)
 8001a8e:	f000 fb6f 	bl	8002170 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001a92:	f000 fa5f 	bl	8001f54 <ssd1306_UpdateScreen>
		servo_sweep();
 8001a96:	f7ff ff31 	bl	80018fc <servo_sweep>
 8001a9a:	e042      	b.n	8001b22 <ocitanje+0x10a>


	} else if ((str[0] != 0x75) && (str[1] != 0xED) && (str[2] != 0xE7)
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <ocitanje+0x110>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b75      	cmp	r3, #117	@ 0x75
 8001aa2:	d02d      	beq.n	8001b00 <ocitanje+0xe8>
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <ocitanje+0x110>)
 8001aa6:	785b      	ldrb	r3, [r3, #1]
 8001aa8:	2bed      	cmp	r3, #237	@ 0xed
 8001aaa:	d029      	beq.n	8001b00 <ocitanje+0xe8>
 8001aac:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <ocitanje+0x110>)
 8001aae:	789b      	ldrb	r3, [r3, #2]
 8001ab0:	2be7      	cmp	r3, #231	@ 0xe7
 8001ab2:	d025      	beq.n	8001b00 <ocitanje+0xe8>
			&& (str[3] != 0x2B)) {
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <ocitanje+0x110>)
 8001ab6:	78db      	ldrb	r3, [r3, #3]
 8001ab8:	2b2b      	cmp	r3, #43	@ 0x2b
 8001aba:	d021      	beq.n	8001b00 <ocitanje+0xe8>
		playTone(3000, 100);
 8001abc:	2164      	movs	r1, #100	@ 0x64
 8001abe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ac2:	f7ff fe91 	bl	80017e8 <playTone>
		HAL_Delay(10);
 8001ac6:	200a      	movs	r0, #10
 8001ac8:	f000 ffce 	bl	8002a68 <HAL_Delay>
		playTone(3000, 100);
 8001acc:	2164      	movs	r1, #100	@ 0x64
 8001ace:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001ad2:	f7ff fe89 	bl	80017e8 <playTone>
		ssd1306_Fill(Black);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f000 fa24 	bl	8001f24 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001adc:	2100      	movs	r1, #0
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 fb6c 	bl	80021bc <ssd1306_SetCursor>
		ssd1306_WriteString("Pogresna kartica!.", Font_6x8, White);
 8001ae4:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <ocitanje+0x11c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	9200      	str	r2, [sp, #0]
 8001aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aec:	4813      	ldr	r0, [pc, #76]	@ (8001b3c <ocitanje+0x124>)
 8001aee:	f000 fb3f 	bl	8002170 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001af2:	f000 fa2f 	bl	8001f54 <ssd1306_UpdateScreen>

		HAL_Delay(3000);
 8001af6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001afa:	f000 ffb5 	bl	8002a68 <HAL_Delay>
 8001afe:	e010      	b.n	8001b22 <ocitanje+0x10a>
	}

	else {
		ssd1306_Fill(Black);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 fa0f 	bl	8001f24 <ssd1306_Fill>
		ssd1306_SetCursor(0, 0);
 8001b06:	2100      	movs	r1, #0
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f000 fb57 	bl	80021bc <ssd1306_SetCursor>
		ssd1306_WriteString("Prislonite karticu.", Font_6x8, White);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <ocitanje+0x11c>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	9200      	str	r2, [sp, #0]
 8001b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b16:	480a      	ldr	r0, [pc, #40]	@ (8001b40 <ocitanje+0x128>)
 8001b18:	f000 fb2a 	bl	8002170 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001b1c:	f000 fa1a 	bl	8001f54 <ssd1306_UpdateScreen>
	}

}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200000b0 	.word	0x200000b0
 8001b2c:	200000ac 	.word	0x200000ac
 8001b30:	200000c0 	.word	0x200000c0
 8001b34:	08006ea4 	.word	0x08006ea4
 8001b38:	08006878 	.word	0x08006878
 8001b3c:	0800688c 	.word	0x0800688c
 8001b40:	080068a0 	.word	0x080068a0

08001b44 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b48:	f000 ff1c 	bl	8002984 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b4c:	f000 f834 	bl	8001bb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b50:	f7ff fb1a 	bl	8001188 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001b54:	f000 f8a4 	bl	8001ca0 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8001b58:	f000 fe78 	bl	800284c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001b5c:	f7ff fba0 	bl	80012a0 <MX_I2C1_Init>
	MX_TIM1_Init();
 8001b60:	f000 fbf4 	bl	800234c <MX_TIM1_Init>
	MX_TIM6_Init();
 8001b64:	f000 fd2e 	bl	80025c4 <MX_TIM6_Init>
	MX_TIM3_Init();
 8001b68:	f000 fcd2 	bl	8002510 <MX_TIM3_Init>
	MX_TIM2_Init();
 8001b6c:	f000 fc5a 	bl	8002424 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	MFRC522_Init();
 8001b70:	f7ff f9ae 	bl	8000ed0 <MFRC522_Init>
	ssd1306_Init();
 8001b74:	f000 f96c 	bl	8001e50 <ssd1306_Init>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	480c      	ldr	r0, [pc, #48]	@ (8001bac <main+0x68>)
 8001b7c:	f003 fa06 	bl	8004f8c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001b80:	2108      	movs	r1, #8
 8001b82:	480a      	ldr	r0, [pc, #40]	@ (8001bac <main+0x68>)
 8001b84:	f003 fa02 	bl	8004f8c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8001b88:	210c      	movs	r1, #12
 8001b8a:	4808      	ldr	r0, [pc, #32]	@ (8001bac <main+0x68>)
 8001b8c:	f003 f9fe 	bl	8004f8c <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start(&htim6);
 8001b90:	4807      	ldr	r0, [pc, #28]	@ (8001bb0 <main+0x6c>)
 8001b92:	f002 ffbb 	bl	8004b0c <HAL_TIM_Base_Start>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b96:	2100      	movs	r1, #0
 8001b98:	4806      	ldr	r0, [pc, #24]	@ (8001bb4 <main+0x70>)
 8001b9a:	f003 f86f 	bl	8004c7c <HAL_TIM_PWM_Start>
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		ultras();
 8001b9e:	f7ff fed7 	bl	8001950 <ultras>
		ocitanje();
 8001ba2:	f7ff ff39 	bl	8001a18 <ocitanje>
		ultras();
 8001ba6:	bf00      	nop
 8001ba8:	e7f9      	b.n	8001b9e <main+0x5a>
 8001baa:	bf00      	nop
 8001bac:	20000524 	.word	0x20000524
 8001bb0:	200005fc 	.word	0x200005fc
 8001bb4:	2000056c 	.word	0x2000056c

08001bb8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b094      	sub	sp, #80	@ 0x50
 8001bbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	2234      	movs	r2, #52	@ 0x34
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 fe1e 	bl	8006808 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <SystemClock_Config+0xd4>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	4a29      	ldr	r2, [pc, #164]	@ (8001c8c <SystemClock_Config+0xd4>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bec:	4b27      	ldr	r3, [pc, #156]	@ (8001c8c <SystemClock_Config+0xd4>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <SystemClock_Config+0xd8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c04:	4a22      	ldr	r2, [pc, #136]	@ (8001c90 <SystemClock_Config+0xd8>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <SystemClock_Config+0xd8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c20:	2310      	movs	r3, #16
 8001c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c24:	2302      	movs	r3, #2
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8001c30:	2340      	movs	r3, #64	@ 0x40
 8001c32:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4618      	mov	r0, r3
 8001c46:	f002 f965 	bl	8003f14 <HAL_RCC_OscConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0x9c>
		Error_Handler();
 8001c50:	f000 f820 	bl	8001c94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001c54:	230f      	movs	r3, #15
 8001c56:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001c5c:	2390      	movs	r3, #144	@ 0x90
 8001c5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c60:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001c64:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6a:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 fe8a 	bl	800398c <HAL_RCC_ClockConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0xca>
		Error_Handler();
 8001c7e:	f000 f809 	bl	8001c94 <Error_Handler>
	}
}
 8001c82:	bf00      	nop
 8001c84:	3750      	adds	r7, #80	@ 0x50
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40007000 	.word	0x40007000

08001c94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <Error_Handler+0x8>

08001ca0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ca4:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001ca6:	4a18      	ldr	r2, [pc, #96]	@ (8001d08 <MX_SPI1_Init+0x68>)
 8001ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001caa:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cb2:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001ccc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cd4:	2218      	movs	r2, #24
 8001cd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cec:	220a      	movs	r2, #10
 8001cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	@ (8001d04 <MX_SPI1_Init+0x64>)
 8001cf2:	f002 fbad 	bl	8004450 <HAL_SPI_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cfc:	f7ff ffca 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200000c4 	.word	0x200000c4
 8001d08:	40013000 	.word	0x40013000

08001d0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a28      	ldr	r2, [pc, #160]	@ (8001dcc <HAL_SPI_MspInit+0xc0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d149      	bne.n	8001dc2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b27      	ldr	r3, [pc, #156]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	4a26      	ldr	r2, [pc, #152]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3e:	4b24      	ldr	r3, [pc, #144]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_SPI_MspInit+0xc4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d82:	23c0      	movs	r3, #192	@ 0xc0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d92:	2305      	movs	r3, #5
 8001d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480d      	ldr	r0, [pc, #52]	@ (8001dd4 <HAL_SPI_MspInit+0xc8>)
 8001d9e:	f000 ff99 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001da2:	2308      	movs	r3, #8
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001db2:	2305      	movs	r3, #5
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4806      	ldr	r0, [pc, #24]	@ (8001dd8 <HAL_SPI_MspInit+0xcc>)
 8001dbe:	f000 ff89 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	@ 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40013000 	.word	0x40013000
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000
 8001dd8:	40020400 	.word	0x40020400

08001ddc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af04      	add	r7, sp, #16
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	9302      	str	r3, [sp, #8]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2301      	movs	r3, #1
 8001e06:	2200      	movs	r2, #0
 8001e08:	2178      	movs	r1, #120	@ 0x78
 8001e0a:	4803      	ldr	r0, [pc, #12]	@ (8001e18 <ssd1306_WriteCommand+0x2c>)
 8001e0c:	f001 fa54 	bl	80032b8 <HAL_I2C_Mem_Write>
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000028 	.word	0x20000028

08001e1c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af04      	add	r7, sp, #16
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2e:	9202      	str	r2, [sp, #8]
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2301      	movs	r3, #1
 8001e38:	2240      	movs	r2, #64	@ 0x40
 8001e3a:	2178      	movs	r1, #120	@ 0x78
 8001e3c:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <ssd1306_WriteData+0x30>)
 8001e3e:	f001 fa3b 	bl	80032b8 <HAL_I2C_Mem_Write>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000028 	.word	0x20000028

08001e50 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e54:	f7ff ffc2 	bl	8001ddc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e58:	2064      	movs	r0, #100	@ 0x64
 8001e5a:	f000 fe05 	bl	8002a68 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f9d8 	bl	8002214 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e64:	2020      	movs	r0, #32
 8001e66:	f7ff ffc1 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7ff ffbe 	bl	8001dec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e70:	20b0      	movs	r0, #176	@ 0xb0
 8001e72:	f7ff ffbb 	bl	8001dec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e76:	20c8      	movs	r0, #200	@ 0xc8
 8001e78:	f7ff ffb8 	bl	8001dec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff ffb5 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e82:	2010      	movs	r0, #16
 8001e84:	f7ff ffb2 	bl	8001dec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e88:	2040      	movs	r0, #64	@ 0x40
 8001e8a:	f7ff ffaf 	bl	8001dec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e8e:	20ff      	movs	r0, #255	@ 0xff
 8001e90:	f000 f9ac 	bl	80021ec <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e94:	20a1      	movs	r0, #161	@ 0xa1
 8001e96:	f7ff ffa9 	bl	8001dec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e9a:	20a6      	movs	r0, #166	@ 0xa6
 8001e9c:	f7ff ffa6 	bl	8001dec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001ea0:	20a8      	movs	r0, #168	@ 0xa8
 8001ea2:	f7ff ffa3 	bl	8001dec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001ea6:	203f      	movs	r0, #63	@ 0x3f
 8001ea8:	f7ff ffa0 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001eac:	20a4      	movs	r0, #164	@ 0xa4
 8001eae:	f7ff ff9d 	bl	8001dec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001eb2:	20d3      	movs	r0, #211	@ 0xd3
 8001eb4:	f7ff ff9a 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff ff97 	bl	8001dec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ebe:	20d5      	movs	r0, #213	@ 0xd5
 8001ec0:	f7ff ff94 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ec4:	20f0      	movs	r0, #240	@ 0xf0
 8001ec6:	f7ff ff91 	bl	8001dec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001eca:	20d9      	movs	r0, #217	@ 0xd9
 8001ecc:	f7ff ff8e 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ed0:	2022      	movs	r0, #34	@ 0x22
 8001ed2:	f7ff ff8b 	bl	8001dec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ed6:	20da      	movs	r0, #218	@ 0xda
 8001ed8:	f7ff ff88 	bl	8001dec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001edc:	2012      	movs	r0, #18
 8001ede:	f7ff ff85 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ee2:	20db      	movs	r0, #219	@ 0xdb
 8001ee4:	f7ff ff82 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ee8:	2020      	movs	r0, #32
 8001eea:	f7ff ff7f 	bl	8001dec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001eee:	208d      	movs	r0, #141	@ 0x8d
 8001ef0:	f7ff ff7c 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ef4:	2014      	movs	r0, #20
 8001ef6:	f7ff ff79 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001efa:	2001      	movs	r0, #1
 8001efc:	f000 f98a 	bl	8002214 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f000 f80f 	bl	8001f24 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f06:	f000 f825 	bl	8001f54 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <ssd1306_Init+0xd0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f10:	4b03      	ldr	r3, [pc, #12]	@ (8001f20 <ssd1306_Init+0xd0>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f16:	4b02      	ldr	r3, [pc, #8]	@ (8001f20 <ssd1306_Init+0xd0>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	711a      	strb	r2, [r3, #4]
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000051c 	.word	0x2000051c

08001f24 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <ssd1306_Fill+0x14>
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <ssd1306_Fill+0x16>
 8001f38:	23ff      	movs	r3, #255	@ 0xff
 8001f3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <ssd1306_Fill+0x2c>)
 8001f42:	f004 fc61 	bl	8006808 <memset>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000011c 	.word	0x2000011c

08001f54 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	e016      	b.n	8001f8e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	3b50      	subs	r3, #80	@ 0x50
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff40 	bl	8001dec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff ff3d 	bl	8001dec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001f72:	2010      	movs	r0, #16
 8001f74:	f7ff ff3a 	bl	8001dec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	01db      	lsls	r3, r3, #7
 8001f7c:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <ssd1306_UpdateScreen+0x4c>)
 8001f7e:	4413      	add	r3, r2
 8001f80:	2180      	movs	r1, #128	@ 0x80
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff4a 	bl	8001e1c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	71fb      	strb	r3, [r7, #7]
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2b07      	cmp	r3, #7
 8001f92:	d9e5      	bls.n	8001f60 <ssd1306_UpdateScreen+0xc>
    }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000011c 	.word	0x2000011c

08001fa4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	71bb      	strb	r3, [r7, #6]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	db3d      	blt.n	800203a <ssd1306_DrawPixel+0x96>
 8001fbe:	79bb      	ldrb	r3, [r7, #6]
 8001fc0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001fc2:	d83a      	bhi.n	800203a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001fc4:	797b      	ldrb	r3, [r7, #5]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d11a      	bne.n	8002000 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001fca:	79fa      	ldrb	r2, [r7, #7]
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	b2d8      	uxtb	r0, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	01db      	lsls	r3, r3, #7
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002048 <ssd1306_DrawPixel+0xa4>)
 8001fda:	5cd3      	ldrb	r3, [r2, r3]
 8001fdc:	b25a      	sxtb	r2, r3
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b259      	sxtb	r1, r3
 8001ff0:	79fa      	ldrb	r2, [r7, #7]
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	01db      	lsls	r3, r3, #7
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b2c9      	uxtb	r1, r1
 8001ffa:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <ssd1306_DrawPixel+0xa4>)
 8001ffc:	54d1      	strb	r1, [r2, r3]
 8001ffe:	e01d      	b.n	800203c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	b2d8      	uxtb	r0, r3
 8002008:	4603      	mov	r3, r0
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	4413      	add	r3, r2
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <ssd1306_DrawPixel+0xa4>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	b25a      	sxtb	r2, r3
 8002014:	79bb      	ldrb	r3, [r7, #6]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	b25b      	sxtb	r3, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	b25b      	sxtb	r3, r3
 8002026:	4013      	ands	r3, r2
 8002028:	b259      	sxtb	r1, r3
 800202a:	79fa      	ldrb	r2, [r7, #7]
 800202c:	4603      	mov	r3, r0
 800202e:	01db      	lsls	r3, r3, #7
 8002030:	4413      	add	r3, r2
 8002032:	b2c9      	uxtb	r1, r1
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <ssd1306_DrawPixel+0xa4>)
 8002036:	54d1      	strb	r1, [r2, r3]
 8002038:	e000      	b.n	800203c <ssd1306_DrawPixel+0x98>
        return;
 800203a:	bf00      	nop
    }
}
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	2000011c 	.word	0x2000011c

0800204c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	4604      	mov	r4, r0
 8002054:	4638      	mov	r0, r7
 8002056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800205a:	4623      	mov	r3, r4
 800205c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b1f      	cmp	r3, #31
 8002062:	d902      	bls.n	800206a <ssd1306_WriteChar+0x1e>
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b7e      	cmp	r3, #126	@ 0x7e
 8002068:	d901      	bls.n	800206e <ssd1306_WriteChar+0x22>
        return 0;
 800206a:	2300      	movs	r3, #0
 800206c:	e079      	b.n	8002162 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <ssd1306_WriteChar+0x34>
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	3b20      	subs	r3, #32
 800207a:	4413      	add	r3, r2
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	e000      	b.n	8002082 <ssd1306_WriteChar+0x36>
 8002080:	783b      	ldrb	r3, [r7, #0]
 8002082:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002084:	4b39      	ldr	r3, [pc, #228]	@ (800216c <ssd1306_WriteChar+0x120>)
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	7dfb      	ldrb	r3, [r7, #23]
 800208c:	4413      	add	r3, r2
 800208e:	2b80      	cmp	r3, #128	@ 0x80
 8002090:	dc06      	bgt.n	80020a0 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002092:	4b36      	ldr	r3, [pc, #216]	@ (800216c <ssd1306_WriteChar+0x120>)
 8002094:	885b      	ldrh	r3, [r3, #2]
 8002096:	461a      	mov	r2, r3
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800209c:	2b40      	cmp	r3, #64	@ 0x40
 800209e:	dd01      	ble.n	80020a4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e05e      	b.n	8002162 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	e04d      	b.n	8002146 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	3b20      	subs	r3, #32
 80020b0:	7879      	ldrb	r1, [r7, #1]
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4619      	mov	r1, r3
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	440b      	add	r3, r1
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	e036      	b.n	8002138 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d013      	beq.n	8002102 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <ssd1306_WriteChar+0x120>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	b2d8      	uxtb	r0, r3
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <ssd1306_WriteChar+0x120>)
 80020ea:	885b      	ldrh	r3, [r3, #2]
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7ff ff52 	bl	8001fa4 <ssd1306_DrawPixel>
 8002100:	e017      	b.n	8002132 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002102:	4b1a      	ldr	r3, [pc, #104]	@ (800216c <ssd1306_WriteChar+0x120>)
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	4413      	add	r3, r2
 800210e:	b2d8      	uxtb	r0, r3
 8002110:	4b16      	ldr	r3, [pc, #88]	@ (800216c <ssd1306_WriteChar+0x120>)
 8002112:	885b      	ldrh	r3, [r3, #2]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4413      	add	r3, r2
 800211c:	b2d9      	uxtb	r1, r3
 800211e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	f7ff ff39 	bl	8001fa4 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	3301      	adds	r3, #1
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	7dfb      	ldrb	r3, [r7, #23]
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	429a      	cmp	r2, r3
 800213e:	d3c4      	bcc.n	80020ca <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3301      	adds	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	787b      	ldrb	r3, [r7, #1]
 8002148:	461a      	mov	r2, r3
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4293      	cmp	r3, r2
 800214e:	d3ac      	bcc.n	80020aa <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <ssd1306_WriteChar+0x120>)
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	7dfb      	ldrb	r3, [r7, #23]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4413      	add	r3, r2
 800215a:	b29a      	uxth	r2, r3
 800215c:	4b03      	ldr	r3, [pc, #12]	@ (800216c <ssd1306_WriteChar+0x120>)
 800215e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3724      	adds	r7, #36	@ 0x24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	2000051c 	.word	0x2000051c

08002170 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	4638      	mov	r0, r7
 800217a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800217e:	e013      	b.n	80021a8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	7818      	ldrb	r0, [r3, #0]
 8002184:	7e3b      	ldrb	r3, [r7, #24]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	463b      	mov	r3, r7
 800218a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800218c:	f7ff ff5e 	bl	800204c <ssd1306_WriteChar>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d002      	beq.n	80021a2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	e008      	b.n	80021b4 <ssd1306_WriteString+0x44>
        }
        str++;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3301      	adds	r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e7      	bne.n	8002180 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	781b      	ldrb	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	460a      	mov	r2, r1
 80021c6:	71fb      	strb	r3, [r7, #7]
 80021c8:	4613      	mov	r3, r2
 80021ca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <ssd1306_SetCursor+0x2c>)
 80021d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80021d4:	79bb      	ldrb	r3, [r7, #6]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <ssd1306_SetCursor+0x2c>)
 80021da:	805a      	strh	r2, [r3, #2]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	2000051c 	.word	0x2000051c

080021ec <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80021f6:	2381      	movs	r3, #129	@ 0x81
 80021f8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fdf5 	bl	8001dec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fdf1 	bl	8001dec <ssd1306_WriteCommand>
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002224:	23af      	movs	r3, #175	@ 0xaf
 8002226:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002228:	4b08      	ldr	r3, [pc, #32]	@ (800224c <ssd1306_SetDisplayOn+0x38>)
 800222a:	2201      	movs	r2, #1
 800222c:	715a      	strb	r2, [r3, #5]
 800222e:	e004      	b.n	800223a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002230:	23ae      	movs	r3, #174	@ 0xae
 8002232:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002234:	4b05      	ldr	r3, [pc, #20]	@ (800224c <ssd1306_SetDisplayOn+0x38>)
 8002236:	2200      	movs	r2, #0
 8002238:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fdd5 	bl	8001dec <ssd1306_WriteCommand>
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000051c 	.word	0x2000051c

08002250 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	4b10      	ldr	r3, [pc, #64]	@ (800229c <HAL_MspInit+0x4c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225e:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <HAL_MspInit+0x4c>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002264:	6453      	str	r3, [r2, #68]	@ 0x44
 8002266:	4b0d      	ldr	r3, [pc, #52]	@ (800229c <HAL_MspInit+0x4c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	603b      	str	r3, [r7, #0]
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_MspInit+0x4c>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <HAL_MspInit+0x4c>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6413      	str	r3, [r2, #64]	@ 0x40
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_MspInit+0x4c>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800

080022a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <NMI_Handler+0x4>

080022a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ac:	bf00      	nop
 80022ae:	e7fd      	b.n	80022ac <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <MemManage_Handler+0x4>

080022b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f6:	f000 fb97 	bl	8002a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <TIM1_CC_IRQHandler+0x10>)
 8002306:	f002 ff69 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000524 	.word	0x20000524

08002314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <TIM2_IRQHandler+0x10>)
 800231a:	f002 ff5f 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000056c 	.word	0x2000056c

08002328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	@ (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800235c:	463b      	mov	r3, r7
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002368:	4b2c      	ldr	r3, [pc, #176]	@ (800241c <MX_TIM1_Init+0xd0>)
 800236a:	4a2d      	ldr	r2, [pc, #180]	@ (8002420 <MX_TIM1_Init+0xd4>)
 800236c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 800236e:	4b2b      	ldr	r3, [pc, #172]	@ (800241c <MX_TIM1_Init+0xd0>)
 8002370:	220f      	movs	r2, #15
 8002372:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <MX_TIM1_Init+0xd0>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800237a:	4b28      	ldr	r3, [pc, #160]	@ (800241c <MX_TIM1_Init+0xd0>)
 800237c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002380:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002382:	4b26      	ldr	r3, [pc, #152]	@ (800241c <MX_TIM1_Init+0xd0>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002388:	4b24      	ldr	r3, [pc, #144]	@ (800241c <MX_TIM1_Init+0xd0>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238e:	4b23      	ldr	r3, [pc, #140]	@ (800241c <MX_TIM1_Init+0xd0>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002394:	4821      	ldr	r0, [pc, #132]	@ (800241c <MX_TIM1_Init+0xd0>)
 8002396:	f002 fda9 	bl	8004eec <HAL_TIM_IC_Init>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023a0:	f7ff fc78 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4619      	mov	r1, r3
 80023b2:	481a      	ldr	r0, [pc, #104]	@ (800241c <MX_TIM1_Init+0xd0>)
 80023b4:	f003 fed4 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80023be:	f7ff fc69 	bl	8001c94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c2:	2300      	movs	r3, #0
 80023c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023c6:	2301      	movs	r3, #1
 80023c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023d2:	463b      	mov	r3, r7
 80023d4:	2200      	movs	r2, #0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4810      	ldr	r0, [pc, #64]	@ (800241c <MX_TIM1_Init+0xd0>)
 80023da:	f002 ffef 	bl	80053bc <HAL_TIM_IC_ConfigChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80023e4:	f7ff fc56 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80023e8:	463b      	mov	r3, r7
 80023ea:	2208      	movs	r2, #8
 80023ec:	4619      	mov	r1, r3
 80023ee:	480b      	ldr	r0, [pc, #44]	@ (800241c <MX_TIM1_Init+0xd0>)
 80023f0:	f002 ffe4 	bl	80053bc <HAL_TIM_IC_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80023fa:	f7ff fc4b 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80023fe:	463b      	mov	r3, r7
 8002400:	220c      	movs	r2, #12
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	@ (800241c <MX_TIM1_Init+0xd0>)
 8002406:	f002 ffd9 	bl	80053bc <HAL_TIM_IC_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002410:	f7ff fc40 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20000524 	.word	0x20000524
 8002420:	40010000 	.word	0x40010000

08002424 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08e      	sub	sp, #56	@ 0x38
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002438:	f107 0320 	add.w	r3, r7, #32
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
 8002450:	615a      	str	r2, [r3, #20]
 8002452:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002454:	4b2d      	ldr	r3, [pc, #180]	@ (800250c <MX_TIM2_Init+0xe8>)
 8002456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800245a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160;
 800245c:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <MX_TIM2_Init+0xe8>)
 800245e:	22a0      	movs	r2, #160	@ 0xa0
 8002460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <MX_TIM2_Init+0xe8>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <MX_TIM2_Init+0xe8>)
 800246a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800246e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002470:	4b26      	ldr	r3, [pc, #152]	@ (800250c <MX_TIM2_Init+0xe8>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002476:	4b25      	ldr	r3, [pc, #148]	@ (800250c <MX_TIM2_Init+0xe8>)
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800247c:	4823      	ldr	r0, [pc, #140]	@ (800250c <MX_TIM2_Init+0xe8>)
 800247e:	f002 faf5 	bl	8004a6c <HAL_TIM_Base_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002488:	f7ff fc04 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002490:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002492:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002496:	4619      	mov	r1, r3
 8002498:	481c      	ldr	r0, [pc, #112]	@ (800250c <MX_TIM2_Init+0xe8>)
 800249a:	f003 f8ed 	bl	8005678 <HAL_TIM_ConfigClockSource>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80024a4:	f7ff fbf6 	bl	8001c94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024a8:	4818      	ldr	r0, [pc, #96]	@ (800250c <MX_TIM2_Init+0xe8>)
 80024aa:	f002 fb97 	bl	8004bdc <HAL_TIM_PWM_Init>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80024b4:	f7ff fbee 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	4619      	mov	r1, r3
 80024c6:	4811      	ldr	r0, [pc, #68]	@ (800250c <MX_TIM2_Init+0xe8>)
 80024c8:	f003 fe4a 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80024d2:	f7ff fbdf 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024d6:	2360      	movs	r3, #96	@ 0x60
 80024d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2200      	movs	r2, #0
 80024ea:	4619      	mov	r1, r3
 80024ec:	4807      	ldr	r0, [pc, #28]	@ (800250c <MX_TIM2_Init+0xe8>)
 80024ee:	f003 f801 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80024f8:	f7ff fbcc 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024fc:	4803      	ldr	r0, [pc, #12]	@ (800250c <MX_TIM2_Init+0xe8>)
 80024fe:	f000 f945 	bl	800278c <HAL_TIM_MspPostInit>

}
 8002502:	bf00      	nop
 8002504:	3738      	adds	r7, #56	@ 0x38
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000056c 	.word	0x2000056c

08002510 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002516:	f107 0320 	add.w	r3, r7, #32
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]
 800252e:	615a      	str	r2, [r3, #20]
 8002530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002532:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <MX_TIM3_Init+0xac>)
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <MX_TIM3_Init+0xb0>)
 8002536:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 8002538:	4b20      	ldr	r3, [pc, #128]	@ (80025bc <MX_TIM3_Init+0xac>)
 800253a:	2259      	movs	r2, #89	@ 0x59
 800253c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <MX_TIM3_Init+0xac>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 8002544:	4b1d      	ldr	r3, [pc, #116]	@ (80025bc <MX_TIM3_Init+0xac>)
 8002546:	f240 128f 	movw	r2, #399	@ 0x18f
 800254a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <MX_TIM3_Init+0xac>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <MX_TIM3_Init+0xac>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002558:	4818      	ldr	r0, [pc, #96]	@ (80025bc <MX_TIM3_Init+0xac>)
 800255a:	f002 fb3f 	bl	8004bdc <HAL_TIM_PWM_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002564:	f7ff fb96 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	4619      	mov	r1, r3
 8002576:	4811      	ldr	r0, [pc, #68]	@ (80025bc <MX_TIM3_Init+0xac>)
 8002578:	f003 fdf2 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002582:	f7ff fb87 	bl	8001c94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002586:	2360      	movs	r3, #96	@ 0x60
 8002588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2200      	movs	r2, #0
 800259a:	4619      	mov	r1, r3
 800259c:	4807      	ldr	r0, [pc, #28]	@ (80025bc <MX_TIM3_Init+0xac>)
 800259e:	f002 ffa9 	bl	80054f4 <HAL_TIM_PWM_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80025a8:	f7ff fb74 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025ac:	4803      	ldr	r0, [pc, #12]	@ (80025bc <MX_TIM3_Init+0xac>)
 80025ae:	f000 f8ed 	bl	800278c <HAL_TIM_MspPostInit>

}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	@ 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200005b4 	.word	0x200005b4
 80025c0:	40000400 	.word	0x40000400

080025c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	463b      	mov	r3, r7
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <MX_TIM6_Init+0x64>)
 80025d4:	4a15      	ldr	r2, [pc, #84]	@ (800262c <MX_TIM6_Init+0x68>)
 80025d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80025d8:	4b13      	ldr	r3, [pc, #76]	@ (8002628 <MX_TIM6_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025de:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <MX_TIM6_Init+0x64>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80025e4:	4b10      	ldr	r3, [pc, #64]	@ (8002628 <MX_TIM6_Init+0x64>)
 80025e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002628 <MX_TIM6_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025f2:	480d      	ldr	r0, [pc, #52]	@ (8002628 <MX_TIM6_Init+0x64>)
 80025f4:	f002 fa3a 	bl	8004a6c <HAL_TIM_Base_Init>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80025fe:	f7ff fb49 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800260a:	463b      	mov	r3, r7
 800260c:	4619      	mov	r1, r3
 800260e:	4806      	ldr	r0, [pc, #24]	@ (8002628 <MX_TIM6_Init+0x64>)
 8002610:	f003 fda6 	bl	8006160 <HAL_TIMEx_MasterConfigSynchronization>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800261a:	f7ff fb3b 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200005fc 	.word	0x200005fc
 800262c:	40001000 	.word	0x40001000

08002630 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1d      	ldr	r2, [pc, #116]	@ (80026c4 <HAL_TIM_IC_MspInit+0x94>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d134      	bne.n	80026bc <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <HAL_TIM_IC_MspInit+0x98>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <HAL_TIM_IC_MspInit+0x98>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6453      	str	r3, [r2, #68]	@ 0x44
 8002662:	4b19      	ldr	r3, [pc, #100]	@ (80026c8 <HAL_TIM_IC_MspInit+0x98>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	613b      	str	r3, [r7, #16]
 800266c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_TIM_IC_MspInit+0x98>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a14      	ldr	r2, [pc, #80]	@ (80026c8 <HAL_TIM_IC_MspInit+0x98>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <HAL_TIM_IC_MspInit+0x98>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 800268a:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 800268e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800269c:	2301      	movs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	4619      	mov	r1, r3
 80026a6:	4809      	ldr	r0, [pc, #36]	@ (80026cc <HAL_TIM_IC_MspInit+0x9c>)
 80026a8:	f000 fb14 	bl	8002cd4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 80026ac:	2200      	movs	r2, #0
 80026ae:	2103      	movs	r1, #3
 80026b0:	201b      	movs	r0, #27
 80026b2:	f000 fad8 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026b6:	201b      	movs	r0, #27
 80026b8:	f000 faf1 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80026bc:	bf00      	nop
 80026be:	3728      	adds	r7, #40	@ 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020000 	.word	0x40020000

080026d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026e0:	d116      	bne.n	8002710 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <HAL_TIM_Base_MspInit+0x70>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	4a15      	ldr	r2, [pc, #84]	@ (8002740 <HAL_TIM_Base_MspInit+0x70>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f2:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <HAL_TIM_Base_MspInit+0x70>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2103      	movs	r1, #3
 8002702:	201c      	movs	r0, #28
 8002704:	f000 faaf 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002708:	201c      	movs	r0, #28
 800270a:	f000 fac8 	bl	8002c9e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800270e:	e012      	b.n	8002736 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0b      	ldr	r2, [pc, #44]	@ (8002744 <HAL_TIM_Base_MspInit+0x74>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10d      	bne.n	8002736 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <HAL_TIM_Base_MspInit+0x70>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	4a07      	ldr	r2, [pc, #28]	@ (8002740 <HAL_TIM_Base_MspInit+0x70>)
 8002724:	f043 0310 	orr.w	r3, r3, #16
 8002728:	6413      	str	r3, [r2, #64]	@ 0x40
 800272a:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <HAL_TIM_Base_MspInit+0x70>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f003 0310 	and.w	r3, r3, #16
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40001000 	.word	0x40001000

08002748 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0b      	ldr	r2, [pc, #44]	@ (8002784 <HAL_TIM_PWM_MspInit+0x3c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10d      	bne.n	8002776 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <HAL_TIM_PWM_MspInit+0x40>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <HAL_TIM_PWM_MspInit+0x40>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6413      	str	r3, [r2, #64]	@ 0x40
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <HAL_TIM_PWM_MspInit+0x40>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	40000400 	.word	0x40000400
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	@ 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ac:	d11e      	bne.n	80027ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	4b22      	ldr	r3, [pc, #136]	@ (800283c <HAL_TIM_MspPostInit+0xb0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a21      	ldr	r2, [pc, #132]	@ (800283c <HAL_TIM_MspPostInit+0xb0>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <HAL_TIM_MspPostInit+0xb0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027ca:	2301      	movs	r3, #1
 80027cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027da:	2301      	movs	r3, #1
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	4816      	ldr	r0, [pc, #88]	@ (8002840 <HAL_TIM_MspPostInit+0xb4>)
 80027e6:	f000 fa75 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027ea:	e022      	b.n	8002832 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <HAL_TIM_MspPostInit+0xb8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d11d      	bne.n	8002832 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_TIM_MspPostInit+0xb0>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	4a0f      	ldr	r2, [pc, #60]	@ (800283c <HAL_TIM_MspPostInit+0xb0>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6313      	str	r3, [r2, #48]	@ 0x30
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <HAL_TIM_MspPostInit+0xb0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002812:	2340      	movs	r3, #64	@ 0x40
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002816:	2302      	movs	r3, #2
 8002818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002822:	2302      	movs	r3, #2
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002826:	f107 0314 	add.w	r3, r7, #20
 800282a:	4619      	mov	r1, r3
 800282c:	4806      	ldr	r0, [pc, #24]	@ (8002848 <HAL_TIM_MspPostInit+0xbc>)
 800282e:	f000 fa51 	bl	8002cd4 <HAL_GPIO_Init>
}
 8002832:	bf00      	nop
 8002834:	3728      	adds	r7, #40	@ 0x28
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000
 8002844:	40000400 	.word	0x40000400
 8002848:	40020800 	.word	0x40020800

0800284c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <MX_USART2_UART_Init+0x50>)
 8002854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 8002858:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800285c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002882:	4805      	ldr	r0, [pc, #20]	@ (8002898 <MX_USART2_UART_Init+0x4c>)
 8002884:	f003 fcfc 	bl	8006280 <HAL_UART_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800288e:	f7ff fa01 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000644 	.word	0x20000644
 800289c:	40004400 	.word	0x40004400

080028a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <HAL_UART_MspInit+0x84>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12b      	bne.n	800291a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <HAL_UART_MspInit+0x88>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <HAL_UART_MspInit+0x88>)
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_UART_MspInit+0x88>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_UART_MspInit+0x88>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	4a10      	ldr	r2, [pc, #64]	@ (8002928 <HAL_UART_MspInit+0x88>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_UART_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028fa:	230c      	movs	r3, #12
 80028fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002906:	2303      	movs	r3, #3
 8002908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800290a:	2307      	movs	r3, #7
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	4805      	ldr	r0, [pc, #20]	@ (800292c <HAL_UART_MspInit+0x8c>)
 8002916:	f000 f9dd 	bl	8002cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	@ 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40004400 	.word	0x40004400
 8002928:	40023800 	.word	0x40023800
 800292c:	40020000 	.word	0x40020000

08002930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002968 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002934:	f7ff fcf8 	bl	8002328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800293a:	490d      	ldr	r1, [pc, #52]	@ (8002970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002950:	4c0a      	ldr	r4, [pc, #40]	@ (800297c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800295e:	f003 ff5b 	bl	8006818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002962:	f7ff f8ef 	bl	8001b44 <main>
  bx  lr    
 8002966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002974:	08006ed8 	.word	0x08006ed8
  ldr r2, =_sbss
 8002978:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800297c:	20000690 	.word	0x20000690

08002980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC_IRQHandler>
	...

08002984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0d      	ldr	r2, [pc, #52]	@ (80029c4 <HAL_Init+0x40>)
 800298e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002994:	4b0b      	ldr	r3, [pc, #44]	@ (80029c4 <HAL_Init+0x40>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <HAL_Init+0x40>)
 800299a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800299e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a0:	4b08      	ldr	r3, [pc, #32]	@ (80029c4 <HAL_Init+0x40>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a07      	ldr	r2, [pc, #28]	@ (80029c4 <HAL_Init+0x40>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ac:	2003      	movs	r0, #3
 80029ae:	f000 f94f 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029b2:	200f      	movs	r0, #15
 80029b4:	f000 f808 	bl	80029c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b8:	f7ff fc4a 	bl	8002250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	40023c00 	.word	0x40023c00

080029c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d0:	4b12      	ldr	r3, [pc, #72]	@ (8002a1c <HAL_InitTick+0x54>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b12      	ldr	r3, [pc, #72]	@ (8002a20 <HAL_InitTick+0x58>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029de:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f967 	bl	8002cba <HAL_SYSTICK_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00e      	b.n	8002a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b0f      	cmp	r3, #15
 80029fa:	d80a      	bhi.n	8002a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029fc:	2200      	movs	r2, #0
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f000 f92f 	bl	8002c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a08:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <HAL_InitTick+0x5c>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e000      	b.n	8002a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000008 	.word	0x20000008
 8002a24:	20000004 	.word	0x20000004

08002a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_IncTick+0x20>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_IncTick+0x24>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <HAL_IncTick+0x24>)
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	2000068c 	.word	0x2000068c

08002a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return uwTick;
 8002a54:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <HAL_GetTick+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	2000068c 	.word	0x2000068c

08002a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a70:	f7ff ffee 	bl	8002a50 <HAL_GetTick>
 8002a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d005      	beq.n	8002a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <HAL_Delay+0x44>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a8e:	bf00      	nop
 8002a90:	f7ff ffde 	bl	8002a50 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d8f7      	bhi.n	8002a90 <HAL_Delay+0x28>
  {
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000008 	.word	0x20000008

08002ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae2:	4a04      	ldr	r2, [pc, #16]	@ (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	60d3      	str	r3, [r2, #12]
}
 8002ae8:	bf00      	nop
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <__NVIC_GetPriorityGrouping+0x18>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db0b      	blt.n	8002b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4907      	ldr	r1, [pc, #28]	@ (8002b4c <__NVIC_EnableIRQ+0x38>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2001      	movs	r0, #1
 8002b36:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db0a      	blt.n	8002b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	@ (8002b9c <__NVIC_SetPriority+0x4c>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	440b      	add	r3, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00a      	b.n	8002b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <__NVIC_SetPriority+0x50>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	3b04      	subs	r3, #4
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	761a      	strb	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f7ff ff8e 	bl	8002b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff29 	bl	8002ab0 <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff3e 	bl	8002af8 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ff8e 	bl	8002ba4 <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff5d 	bl	8002b50 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff31 	bl	8002b14 <__NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffa2 	bl	8002c0c <SysTick_Config>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	@ 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e165      	b.n	8002fbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 8154 	bne.w	8002fb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d130      	bne.n	8002d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0201 	and.w	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d017      	beq.n	8002dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80ae 	beq.w	8002fb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002fd4 <HAL_GPIO_Init+0x300>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	4a5c      	ldr	r2, [pc, #368]	@ (8002fd4 <HAL_GPIO_Init+0x300>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6a:	4b5a      	ldr	r3, [pc, #360]	@ (8002fd4 <HAL_GPIO_Init+0x300>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e76:	4a58      	ldr	r2, [pc, #352]	@ (8002fd8 <HAL_GPIO_Init+0x304>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fdc <HAL_GPIO_Init+0x308>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d025      	beq.n	8002eee <HAL_GPIO_Init+0x21a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <HAL_GPIO_Init+0x30c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d01f      	beq.n	8002eea <HAL_GPIO_Init+0x216>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe4 <HAL_GPIO_Init+0x310>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d019      	beq.n	8002ee6 <HAL_GPIO_Init+0x212>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002fe8 <HAL_GPIO_Init+0x314>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d013      	beq.n	8002ee2 <HAL_GPIO_Init+0x20e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8002fec <HAL_GPIO_Init+0x318>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00d      	beq.n	8002ede <HAL_GPIO_Init+0x20a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff0 <HAL_GPIO_Init+0x31c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <HAL_GPIO_Init+0x206>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a49      	ldr	r2, [pc, #292]	@ (8002ff4 <HAL_GPIO_Init+0x320>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_GPIO_Init+0x202>
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	e00c      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ed6:	2307      	movs	r3, #7
 8002ed8:	e00a      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002eda:	2305      	movs	r3, #5
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x21c>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4935      	ldr	r1, [pc, #212]	@ (8002fd8 <HAL_GPIO_Init+0x304>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f32:	4a31      	ldr	r2, [pc, #196]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f38:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f5c:	4a26      	ldr	r2, [pc, #152]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f62:	4b25      	ldr	r3, [pc, #148]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb0:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <HAL_GPIO_Init+0x324>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f ae96 	bls.w	8002cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	@ 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40021400 	.word	0x40021400
 8002ff4:	40021800 	.word	0x40021800
 8002ff8:	40013c00 	.word	0x40013c00

08002ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	807b      	strh	r3, [r7, #2]
 8003008:	4613      	mov	r3, r2
 800300a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800300c:	787b      	ldrb	r3, [r7, #1]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003018:	e003      	b.n	8003022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	041a      	lsls	r2, r3, #16
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	619a      	str	r2, [r3, #24]
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e12b      	b.n	800329a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe f950 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0201 	bic.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003082:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003092:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003094:	f000 fd6c 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 8003098:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a81      	ldr	r2, [pc, #516]	@ (80032a4 <HAL_I2C_Init+0x274>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d807      	bhi.n	80030b4 <HAL_I2C_Init+0x84>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a80      	ldr	r2, [pc, #512]	@ (80032a8 <HAL_I2C_Init+0x278>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e006      	b.n	80030c2 <HAL_I2C_Init+0x92>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a7d      	ldr	r2, [pc, #500]	@ (80032ac <HAL_I2C_Init+0x27c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	bf94      	ite	ls
 80030bc:	2301      	movls	r3, #1
 80030be:	2300      	movhi	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e0e7      	b.n	800329a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a78      	ldr	r2, [pc, #480]	@ (80032b0 <HAL_I2C_Init+0x280>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0c9b      	lsrs	r3, r3, #18
 80030d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a6a      	ldr	r2, [pc, #424]	@ (80032a4 <HAL_I2C_Init+0x274>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d802      	bhi.n	8003104 <HAL_I2C_Init+0xd4>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3301      	adds	r3, #1
 8003102:	e009      	b.n	8003118 <HAL_I2C_Init+0xe8>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800310a:	fb02 f303 	mul.w	r3, r2, r3
 800310e:	4a69      	ldr	r2, [pc, #420]	@ (80032b4 <HAL_I2C_Init+0x284>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	3301      	adds	r3, #1
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	430b      	orrs	r3, r1
 800311e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800312a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	495c      	ldr	r1, [pc, #368]	@ (80032a4 <HAL_I2C_Init+0x274>)
 8003134:	428b      	cmp	r3, r1
 8003136:	d819      	bhi.n	800316c <HAL_I2C_Init+0x13c>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e59      	subs	r1, r3, #1
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	fbb1 f3f3 	udiv	r3, r1, r3
 8003146:	1c59      	adds	r1, r3, #1
 8003148:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800314c:	400b      	ands	r3, r1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_I2C_Init+0x138>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e59      	subs	r1, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003160:	3301      	adds	r3, #1
 8003162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003166:	e051      	b.n	800320c <HAL_I2C_Init+0x1dc>
 8003168:	2304      	movs	r3, #4
 800316a:	e04f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d111      	bne.n	8003198 <HAL_I2C_Init+0x168>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	2b00      	cmp	r3, #0
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e012      	b.n	80031be <HAL_I2C_Init+0x18e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Init+0x196>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e022      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10e      	bne.n	80031ec <HAL_I2C_Init+0x1bc>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1e58      	subs	r0, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	440b      	add	r3, r1
 80031dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e0:	3301      	adds	r3, #1
 80031e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ea:	e00f      	b.n	800320c <HAL_I2C_Init+0x1dc>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1e58      	subs	r0, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	460b      	mov	r3, r1
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	0099      	lsls	r1, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003202:	3301      	adds	r3, #1
 8003204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003208:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	6809      	ldr	r1, [r1, #0]
 8003210:	4313      	orrs	r3, r2
 8003212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800323a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6911      	ldr	r1, [r2, #16]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68d2      	ldr	r2, [r2, #12]
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	430b      	orrs	r3, r1
 800324e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695a      	ldr	r2, [r3, #20]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	000186a0 	.word	0x000186a0
 80032a8:	001e847f 	.word	0x001e847f
 80032ac:	003d08ff 	.word	0x003d08ff
 80032b0:	431bde83 	.word	0x431bde83
 80032b4:	10624dd3 	.word	0x10624dd3

080032b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af02      	add	r7, sp, #8
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	817b      	strh	r3, [r7, #10]
 80032ca:	460b      	mov	r3, r1
 80032cc:	813b      	strh	r3, [r7, #8]
 80032ce:	4613      	mov	r3, r2
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d2:	f7ff fbbd 	bl	8002a50 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	f040 80d9 	bne.w	8003498 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2319      	movs	r3, #25
 80032ec:	2201      	movs	r2, #1
 80032ee:	496d      	ldr	r1, [pc, #436]	@ (80034a4 <HAL_I2C_Mem_Write+0x1ec>)
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f971 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0cc      	b.n	800349a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_I2C_Mem_Write+0x56>
 800330a:	2302      	movs	r3, #2
 800330c:	e0c5      	b.n	800349a <HAL_I2C_Mem_Write+0x1e2>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d007      	beq.n	8003334 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2221      	movs	r2, #33	@ 0x21
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	@ 0x40
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003364:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4a4d      	ldr	r2, [pc, #308]	@ (80034a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003374:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003376:	88f8      	ldrh	r0, [r7, #6]
 8003378:	893a      	ldrh	r2, [r7, #8]
 800337a:	8979      	ldrh	r1, [r7, #10]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4603      	mov	r3, r0
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f890 	bl	80034ac <I2C_RequestMemoryWrite>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d052      	beq.n	8003438 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e081      	b.n	800349a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fa36 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00d      	beq.n	80033c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d107      	bne.n	80033be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e06b      	b.n	800349a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d11b      	bne.n	8003438 <HAL_I2C_Mem_Write+0x180>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d017      	beq.n	8003438 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1aa      	bne.n	8003396 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fa29 	bl	800389c <I2C_WaitOnBTFFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	2b04      	cmp	r3, #4
 8003456:	d107      	bne.n	8003468 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003466:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e016      	b.n	800349a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800347a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	e000      	b.n	800349a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003498:	2302      	movs	r3, #2
  }
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	00100002 	.word	0x00100002
 80034a8:	ffff0000 	.word	0xffff0000

080034ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	4608      	mov	r0, r1
 80034b6:	4611      	mov	r1, r2
 80034b8:	461a      	mov	r2, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	817b      	strh	r3, [r7, #10]
 80034be:	460b      	mov	r3, r1
 80034c0:	813b      	strh	r3, [r7, #8]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2200      	movs	r2, #0
 80034de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f878 	bl	80035d8 <I2C_WaitOnFlagUntilTimeout>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00d      	beq.n	800350a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034fc:	d103      	bne.n	8003506 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003504:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e05f      	b.n	80035ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003518:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	6a3a      	ldr	r2, [r7, #32]
 800351e:	492d      	ldr	r1, [pc, #180]	@ (80035d4 <I2C_RequestMemoryWrite+0x128>)
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f8d3 	bl	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e04c      	b.n	80035ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003548:	6a39      	ldr	r1, [r7, #32]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f95e 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b04      	cmp	r3, #4
 800355c:	d107      	bne.n	800356e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800356c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e02b      	b.n	80035ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	e021      	b.n	80035c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003584:	893b      	ldrh	r3, [r7, #8]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b29b      	uxth	r3, r3
 800358a:	b2da      	uxtb	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	6a39      	ldr	r1, [r7, #32]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f938 	bl	800380c <I2C_WaitOnTXEFlagUntilTimeout>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00d      	beq.n	80035be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d107      	bne.n	80035ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e005      	b.n	80035ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035be:	893b      	ldrh	r3, [r7, #8]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	00010002 	.word	0x00010002

080035d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	e048      	b.n	800367c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f0:	d044      	beq.n	800367c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f2:	f7ff fa2d 	bl	8002a50 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d302      	bcc.n	8003608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d139      	bne.n	800367c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10d      	bne.n	800362e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	43da      	mvns	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4013      	ands	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf0c      	ite	eq
 8003624:	2301      	moveq	r3, #1
 8003626:	2300      	movne	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	e00c      	b.n	8003648 <I2C_WaitOnFlagUntilTimeout+0x70>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	43da      	mvns	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4013      	ands	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	429a      	cmp	r2, r3
 800364c:	d116      	bne.n	800367c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e023      	b.n	80036c4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	0c1b      	lsrs	r3, r3, #16
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b01      	cmp	r3, #1
 8003684:	d10d      	bne.n	80036a2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	43da      	mvns	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4013      	ands	r3, r2
 8003692:	b29b      	uxth	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	bf0c      	ite	eq
 8003698:	2301      	moveq	r3, #1
 800369a:	2300      	movne	r3, #0
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	e00c      	b.n	80036bc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	43da      	mvns	r2, r3
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	4013      	ands	r3, r2
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	bf0c      	ite	eq
 80036b4:	2301      	moveq	r3, #1
 80036b6:	2300      	movne	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	461a      	mov	r2, r3
 80036bc:	79fb      	ldrb	r3, [r7, #7]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d093      	beq.n	80035ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036da:	e071      	b.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ea:	d123      	bne.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036fa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f043 0204 	orr.w	r2, r3, #4
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e067      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d041      	beq.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373c:	f7ff f988 	bl	8002a50 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d136      	bne.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d10c      	bne.n	8003776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	e00b      	b.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	43da      	mvns	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4013      	ands	r3, r2
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d016      	beq.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e021      	b.n	8003804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	0c1b      	lsrs	r3, r3, #16
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10c      	bne.n	80037e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	43da      	mvns	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e00b      	b.n	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f47f af6d 	bne.w	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003818:	e034      	b.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f886 	bl	800392c <I2C_IsAcknowledgeFailed>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e034      	b.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d028      	beq.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003832:	f7ff f90d 	bl	8002a50 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	429a      	cmp	r2, r3
 8003840:	d302      	bcc.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11d      	bne.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003852:	2b80      	cmp	r3, #128	@ 0x80
 8003854:	d016      	beq.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e007      	b.n	8003894 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800388e:	2b80      	cmp	r3, #128	@ 0x80
 8003890:	d1c3      	bne.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038a8:	e034      	b.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f83e 	bl	800392c <I2C_IsAcknowledgeFailed>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e034      	b.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d028      	beq.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7ff f8c5 	bl	8002a50 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d11d      	bne.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d016      	beq.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b04      	cmp	r3, #4
 8003920:	d1c3      	bne.n	80038aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003942:	d11b      	bne.n	800397c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800394c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	f043 0204 	orr.w	r2, r3, #4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0cc      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b68      	ldr	r3, [pc, #416]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90c      	bls.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b65      	ldr	r3, [pc, #404]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b63      	ldr	r3, [pc, #396]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0b8      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e0:	4b59      	ldr	r3, [pc, #356]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a58      	ldr	r2, [pc, #352]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f8:	4b53      	ldr	r3, [pc, #332]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	4a52      	ldr	r2, [pc, #328]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a04:	4b50      	ldr	r3, [pc, #320]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	494d      	ldr	r1, [pc, #308]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d044      	beq.n	8003aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2a:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d119      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e07f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d003      	beq.n	8003a4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e06f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e067      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4934      	ldr	r1, [pc, #208]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7fe ffe8 	bl	8002a50 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fe ffe4 	bl	8002a50 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e04f      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b25      	ldr	r3, [pc, #148]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d20c      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b22      	ldr	r3, [pc, #136]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	683a      	ldr	r2, [r7, #0]
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac2:	4b20      	ldr	r3, [pc, #128]	@ (8003b44 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 030f 	and.w	r3, r3, #15
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d001      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e032      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae0:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4916      	ldr	r1, [pc, #88]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003afe:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	490e      	ldr	r1, [pc, #56]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b12:	f000 f855 	bl	8003bc0 <HAL_RCC_GetSysClockFreq>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	490a      	ldr	r1, [pc, #40]	@ (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	fa22 f303 	lsr.w	r3, r2, r3
 8003b2a:	4a09      	ldr	r2, [pc, #36]	@ (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b2e:	4b09      	ldr	r3, [pc, #36]	@ (8003b54 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fe ff48 	bl	80029c8 <HAL_InitTick>

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40023c00 	.word	0x40023c00
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	08006eb0 	.word	0x08006eb0
 8003b50:	20000000 	.word	0x20000000
 8003b54:	20000004 	.word	0x20000004

08003b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	@ (8003b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000000 	.word	0x20000000

08003b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b74:	f7ff fff0 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4b05      	ldr	r3, [pc, #20]	@ (8003b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0a9b      	lsrs	r3, r3, #10
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	4903      	ldr	r1, [pc, #12]	@ (8003b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b86:	5ccb      	ldrb	r3, [r1, r3]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40023800 	.word	0x40023800
 8003b94:	08006ec0 	.word	0x08006ec0

08003b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b9c:	f7ff ffdc 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	0b5b      	lsrs	r3, r3, #13
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	4903      	ldr	r1, [pc, #12]	@ (8003bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bae:	5ccb      	ldrb	r3, [r1, r3]
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	08006ec0 	.word	0x08006ec0

08003bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc4:	b0a6      	sub	sp, #152	@ 0x98
 8003bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be6:	4bc8      	ldr	r3, [pc, #800]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	f200 817e 	bhi.w	8003ef0 <HAL_RCC_GetSysClockFreq+0x330>
 8003bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003ef1 	.word	0x08003ef1
 8003c04:	08003ef1 	.word	0x08003ef1
 8003c08:	08003ef1 	.word	0x08003ef1
 8003c0c:	08003c39 	.word	0x08003c39
 8003c10:	08003ef1 	.word	0x08003ef1
 8003c14:	08003ef1 	.word	0x08003ef1
 8003c18:	08003ef1 	.word	0x08003ef1
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003ef1 	.word	0x08003ef1
 8003c24:	08003ef1 	.word	0x08003ef1
 8003c28:	08003ef1 	.word	0x08003ef1
 8003c2c:	08003dab 	.word	0x08003dab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c30:	4bb6      	ldr	r3, [pc, #728]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c36:	e15f      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c38:	4bb5      	ldr	r3, [pc, #724]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c3e:	e15b      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c40:	4bb1      	ldr	r3, [pc, #708]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4c:	4bae      	ldr	r3, [pc, #696]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d031      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c58:	4bab      	ldr	r3, [pc, #684]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	2200      	movs	r2, #0
 8003c60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c70:	4ba7      	ldr	r3, [pc, #668]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c72:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c76:	462a      	mov	r2, r5
 8003c78:	fb03 f202 	mul.w	r2, r3, r2
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4621      	mov	r1, r4
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	4aa2      	ldr	r2, [pc, #648]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003c88:	4621      	mov	r1, r4
 8003c8a:	fba1 1202 	umull	r1, r2, r1, r2
 8003c8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c90:	460a      	mov	r2, r1
 8003c92:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003c94:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003c96:	4413      	add	r3, r2
 8003c98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ca2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ca4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ca8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003cac:	f7fc fec2 	bl	8000a34 <__aeabi_uldivmod>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003cba:	e064      	b.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbc:	4b92      	ldr	r3, [pc, #584]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	099b      	lsrs	r3, r3, #6
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cc6:	657a      	str	r2, [r7, #84]	@ 0x54
 8003cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003cd8:	4622      	mov	r2, r4
 8003cda:	462b      	mov	r3, r5
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0159      	lsls	r1, r3, #5
 8003ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cea:	0150      	lsls	r0, r2, #5
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	1a51      	subs	r1, r2, r1
 8003cf4:	6139      	str	r1, [r7, #16]
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	eb63 0301 	sbc.w	r3, r3, r1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d0a:	4659      	mov	r1, fp
 8003d0c:	018b      	lsls	r3, r1, #6
 8003d0e:	4651      	mov	r1, sl
 8003d10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d14:	4651      	mov	r1, sl
 8003d16:	018a      	lsls	r2, r1, #6
 8003d18:	4651      	mov	r1, sl
 8003d1a:	ebb2 0801 	subs.w	r8, r2, r1
 8003d1e:	4659      	mov	r1, fp
 8003d20:	eb63 0901 	sbc.w	r9, r3, r1
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	f04f 0300 	mov.w	r3, #0
 8003d2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d38:	4690      	mov	r8, r2
 8003d3a:	4699      	mov	r9, r3
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	eb18 0303 	adds.w	r3, r8, r3
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	462b      	mov	r3, r5
 8003d46:	eb49 0303 	adc.w	r3, r9, r3
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d58:	4629      	mov	r1, r5
 8003d5a:	028b      	lsls	r3, r1, #10
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d62:	4621      	mov	r1, r4
 8003d64:	028a      	lsls	r2, r1, #10
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d6e:	2200      	movs	r2, #0
 8003d70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d78:	f7fc fe5c 	bl	8000a34 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d86:	4b60      	ldr	r3, [pc, #384]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	0c1b      	lsrs	r3, r3, #16
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	3301      	adds	r3, #1
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003d98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003da8:	e0a6      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003daa:	4b57      	ldr	r3, [pc, #348]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003db6:	4b54      	ldr	r3, [pc, #336]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d02a      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc2:	4b51      	ldr	r3, [pc, #324]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	2200      	movs	r2, #0
 8003dca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4b4e      	ldr	r3, [pc, #312]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003dd8:	fb03 f201 	mul.w	r2, r3, r1
 8003ddc:	2300      	movs	r3, #0
 8003dde:	fb00 f303 	mul.w	r3, r0, r3
 8003de2:	4413      	add	r3, r2
 8003de4:	4a4a      	ldr	r2, [pc, #296]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003de6:	fba0 1202 	umull	r1, r2, r0, r2
 8003dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dec:	460a      	mov	r2, r1
 8003dee:	673a      	str	r2, [r7, #112]	@ 0x70
 8003df0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003df2:	4413      	add	r3, r2
 8003df4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dfe:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003e04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e08:	f7fc fe14 	bl	8000a34 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4613      	mov	r3, r2
 8003e12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e16:	e05b      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e18:	4b3b      	ldr	r3, [pc, #236]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	2200      	movs	r2, #0
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	f04f 0000 	mov.w	r0, #0
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	0159      	lsls	r1, r3, #5
 8003e42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e46:	0150      	lsls	r0, r2, #5
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4641      	mov	r1, r8
 8003e4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e52:	4649      	mov	r1, r9
 8003e54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e70:	eb63 050b 	sbc.w	r5, r3, fp
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	00eb      	lsls	r3, r5, #3
 8003e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e82:	00e2      	lsls	r2, r4, #3
 8003e84:	4614      	mov	r4, r2
 8003e86:	461d      	mov	r5, r3
 8003e88:	4643      	mov	r3, r8
 8003e8a:	18e3      	adds	r3, r4, r3
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	464b      	mov	r3, r9
 8003e90:	eb45 0303 	adc.w	r3, r5, r3
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	028b      	lsls	r3, r1, #10
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eac:	4621      	mov	r1, r4
 8003eae:	028a      	lsls	r2, r1, #10
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb8:	2200      	movs	r2, #0
 8003eba:	61bb      	str	r3, [r7, #24]
 8003ebc:	61fa      	str	r2, [r7, #28]
 8003ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ec2:	f7fc fdb7 	bl	8000a34 <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4613      	mov	r3, r2
 8003ecc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	0f1b      	lsrs	r3, r3, #28
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ee2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003eee:	e003      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef0:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003ef6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3798      	adds	r7, #152	@ 0x98
 8003f00:	46bd      	mov	sp, r7
 8003f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	00f42400 	.word	0x00f42400
 8003f10:	017d7840 	.word	0x017d7840

08003f14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e28d      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8083 	beq.w	800403a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f34:	4b94      	ldr	r3, [pc, #592]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d019      	beq.n	8003f74 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f40:	4b91      	ldr	r3, [pc, #580]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d106      	bne.n	8003f5a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f4c:	4b8e      	ldr	r3, [pc, #568]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f58:	d00c      	beq.n	8003f74 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5a:	4b8b      	ldr	r3, [pc, #556]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f62:	2b0c      	cmp	r3, #12
 8003f64:	d112      	bne.n	8003f8c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f66:	4b88      	ldr	r3, [pc, #544]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f72:	d10b      	bne.n	8003f8c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	4b84      	ldr	r3, [pc, #528]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d05b      	beq.n	8004038 <HAL_RCC_OscConfig+0x124>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d157      	bne.n	8004038 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e25a      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f94:	d106      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x90>
 8003f96:	4b7c      	ldr	r3, [pc, #496]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7b      	ldr	r2, [pc, #492]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xcc>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xb4>
 8003fae:	4b76      	ldr	r3, [pc, #472]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b73      	ldr	r3, [pc, #460]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a72      	ldr	r2, [pc, #456]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xcc>
 8003fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a6e      	ldr	r2, [pc, #440]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b6c      	ldr	r3, [pc, #432]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a6b      	ldr	r2, [pc, #428]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fd32 	bl	8002a50 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fe fd2e 	bl	8002a50 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e21f      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b61      	ldr	r3, [pc, #388]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xdc>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fe fd1e 	bl	8002a50 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004018:	f7fe fd1a 	bl	8002a50 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	@ 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e20b      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	4b57      	ldr	r3, [pc, #348]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x104>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d06f      	beq.n	8004126 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004046:	4b50      	ldr	r3, [pc, #320]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b00      	cmp	r3, #0
 8004050:	d017      	beq.n	8004082 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004052:	4b4d      	ldr	r3, [pc, #308]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
        || \
 800405a:	2b08      	cmp	r3, #8
 800405c:	d105      	bne.n	800406a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800405e:	4b4a      	ldr	r3, [pc, #296]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406a:	4b47      	ldr	r3, [pc, #284]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d11c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b44      	ldr	r3, [pc, #272]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d116      	bne.n	80040b0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004082:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_RCC_OscConfig+0x186>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e1d3      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409a:	4b3b      	ldr	r3, [pc, #236]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4937      	ldr	r1, [pc, #220]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	e03a      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b8:	4b34      	ldr	r3, [pc, #208]	@ (800418c <HAL_RCC_OscConfig+0x278>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fe fcc7 	bl	8002a50 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040c6:	f7fe fcc3 	bl	8002a50 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1b4      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e4:	4b28      	ldr	r3, [pc, #160]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4925      	ldr	r1, [pc, #148]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
 80040f8:	e015      	b.n	8004126 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fa:	4b24      	ldr	r3, [pc, #144]	@ (800418c <HAL_RCC_OscConfig+0x278>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe fca6 	bl	8002a50 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004108:	f7fe fca2 	bl	8002a50 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e193      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	4b1b      	ldr	r3, [pc, #108]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d036      	beq.n	80041a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <HAL_RCC_OscConfig+0x27c>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fe fc86 	bl	8002a50 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004148:	f7fe fc82 	bl	8002a50 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e173      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415a:	4b0b      	ldr	r3, [pc, #44]	@ (8004188 <HAL_RCC_OscConfig+0x274>)
 800415c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0x234>
 8004166:	e01b      	b.n	80041a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004168:	4b09      	ldr	r3, [pc, #36]	@ (8004190 <HAL_RCC_OscConfig+0x27c>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fe fc6f 	bl	8002a50 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	e00e      	b.n	8004194 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004176:	f7fe fc6b 	bl	8002a50 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d907      	bls.n	8004194 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e15c      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
 8004188:	40023800 	.word	0x40023800
 800418c:	42470000 	.word	0x42470000
 8004190:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	4b8a      	ldr	r3, [pc, #552]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ea      	bne.n	8004176 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8097 	beq.w	80042dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b2:	4b83      	ldr	r3, [pc, #524]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	4b7f      	ldr	r3, [pc, #508]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	4a7e      	ldr	r2, [pc, #504]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ce:	4b7c      	ldr	r3, [pc, #496]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041de:	4b79      	ldr	r3, [pc, #484]	@ (80043c4 <HAL_RCC_OscConfig+0x4b0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d118      	bne.n	800421c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCC_OscConfig+0x4b0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x4b0>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f6:	f7fe fc2b 	bl	8002a50 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7fe fc27 	bl	8002a50 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e118      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	4b6c      	ldr	r3, [pc, #432]	@ (80043c4 <HAL_RCC_OscConfig+0x4b0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <HAL_RCC_OscConfig+0x31e>
 8004224:	4b66      	ldr	r3, [pc, #408]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004228:	4a65      	ldr	r2, [pc, #404]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004230:	e01c      	b.n	800426c <HAL_RCC_OscConfig+0x358>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x340>
 800423a:	4b61      	ldr	r3, [pc, #388]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800423e:	4a60      	ldr	r2, [pc, #384]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	6713      	str	r3, [r2, #112]	@ 0x70
 8004246:	4b5e      	ldr	r3, [pc, #376]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424a:	4a5d      	ldr	r2, [pc, #372]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	@ 0x70
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0x358>
 8004254:	4b5a      	ldr	r3, [pc, #360]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004258:	4a59      	ldr	r2, [pc, #356]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004260:	4b57      	ldr	r3, [pc, #348]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004264:	4a56      	ldr	r2, [pc, #344]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004266:	f023 0304 	bic.w	r3, r3, #4
 800426a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fbec 	bl	8002a50 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fe fbe8 	bl	8002a50 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0d7      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	4b4b      	ldr	r3, [pc, #300]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ee      	beq.n	800427c <HAL_RCC_OscConfig+0x368>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fe fbd6 	bl	8002a50 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fe fbd2 	bl	8002a50 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0c1      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042be:	4b40      	ldr	r3, [pc, #256]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ee      	bne.n	80042a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d0:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	4a3a      	ldr	r2, [pc, #232]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80ad 	beq.w	8004440 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e6:	4b36      	ldr	r3, [pc, #216]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d060      	beq.n	80043b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d145      	bne.n	8004386 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	4b33      	ldr	r3, [pc, #204]	@ (80043c8 <HAL_RCC_OscConfig+0x4b4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe fba6 	bl	8002a50 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe fba2 	bl	8002a50 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e093      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	4b29      	ldr	r3, [pc, #164]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	019b      	lsls	r3, r3, #6
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433c:	085b      	lsrs	r3, r3, #1
 800433e:	3b01      	subs	r3, #1
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	431a      	orrs	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004350:	071b      	lsls	r3, r3, #28
 8004352:	491b      	ldr	r1, [pc, #108]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004358:	4b1b      	ldr	r3, [pc, #108]	@ (80043c8 <HAL_RCC_OscConfig+0x4b4>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435e:	f7fe fb77 	bl	8002a50 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004366:	f7fe fb73 	bl	8002a50 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e064      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004378:	4b11      	ldr	r3, [pc, #68]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x452>
 8004384:	e05c      	b.n	8004440 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004386:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <HAL_RCC_OscConfig+0x4b4>)
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fe fb60 	bl	8002a50 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004394:	f7fe fb5c 	bl	8002a50 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e04d      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x480>
 80043b2:	e045      	b.n	8004440 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e040      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043cc:	4b1f      	ldr	r3, [pc, #124]	@ (800444c <HAL_RCC_OscConfig+0x538>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d030      	beq.n	800443c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d129      	bne.n	800443c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d122      	bne.n	800443c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043fc:	4013      	ands	r3, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004404:	4293      	cmp	r3, r2
 8004406:	d119      	bne.n	800443c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	3b01      	subs	r3, #1
 8004416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004418:	429a      	cmp	r2, r3
 800441a:	d10f      	bne.n	800443c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004428:	429a      	cmp	r2, r3
 800442a:	d107      	bne.n	800443c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004438:	429a      	cmp	r2, r3
 800443a:	d001      	beq.n	8004440 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800

08004450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07b      	b.n	800455a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d108      	bne.n	800447c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004472:	d009      	beq.n	8004488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
 800447a:	e005      	b.n	8004488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd fc32 	bl	8001d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800450c:	ea42 0103 	orr.w	r1, r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004514:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	0c1b      	lsrs	r3, r3, #16
 8004526:	f003 0104 	and.w	r1, r3, #4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452e:	f003 0210 	and.w	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08a      	sub	sp, #40	@ 0x28
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004570:	2301      	movs	r3, #1
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004574:	f7fe fa6c 	bl	8002a50 <HAL_GetTick>
 8004578:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004580:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800458c:	7ffb      	ldrb	r3, [r7, #31]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d00c      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x4a>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004598:	d106      	bne.n	80045a8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <HAL_SPI_TransmitReceive+0x46>
 80045a2:	7ffb      	ldrb	r3, [r7, #31]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d001      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
 80045aa:	e17f      	b.n	80048ac <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_SPI_TransmitReceive+0x5c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_SPI_TransmitReceive+0x5c>
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e174      	b.n	80048ac <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x6e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e16d      	b.n	80048ac <HAL_SPI_TransmitReceive+0x34a>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d003      	beq.n	80045ec <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2205      	movs	r2, #5
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	887a      	ldrh	r2, [r7, #2]
 80045fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	887a      	ldrh	r2, [r7, #2]
 8004602:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	887a      	ldrh	r2, [r7, #2]
 800460e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462c:	2b40      	cmp	r3, #64	@ 0x40
 800462e:	d007      	beq.n	8004640 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800463e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004648:	d17e      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_SPI_TransmitReceive+0xf6>
 8004652:	8afb      	ldrh	r3, [r7, #22]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d16c      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467c:	e059      	b.n	8004732 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b02      	cmp	r3, #2
 800468a:	d11b      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x162>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d016      	beq.n	80046c4 <HAL_SPI_TransmitReceive+0x162>
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	2b01      	cmp	r3, #1
 800469a:	d113      	bne.n	80046c4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d119      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x1a4>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d014      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e6:	b292      	uxth	r2, r2
 80046e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ee:	1c9a      	adds	r2, r3, #2
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004702:	2301      	movs	r3, #1
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004706:	f7fe f9a3 	bl	8002a50 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004712:	429a      	cmp	r2, r3
 8004714:	d80d      	bhi.n	8004732 <HAL_SPI_TransmitReceive+0x1d0>
 8004716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471c:	d009      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0bc      	b.n	80048ac <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1a0      	bne.n	800467e <HAL_SPI_TransmitReceive+0x11c>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d19b      	bne.n	800467e <HAL_SPI_TransmitReceive+0x11c>
 8004746:	e082      	b.n	800484e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x1f4>
 8004750:	8afb      	ldrh	r3, [r7, #22]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d171      	bne.n	800483a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800477c:	e05d      	b.n	800483a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d11c      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x264>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x264>
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	2b01      	cmp	r3, #1
 800479a:	d114      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d119      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x2a6>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d014      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004804:	2301      	movs	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004808:	f7fe f922 	bl	8002a50 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004814:	429a      	cmp	r2, r3
 8004816:	d803      	bhi.n	8004820 <HAL_SPI_TransmitReceive+0x2be>
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800481e:	d102      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x2c4>
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e038      	b.n	80048ac <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d19c      	bne.n	800477e <HAL_SPI_TransmitReceive+0x21c>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d197      	bne.n	800477e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800484e:	6a3a      	ldr	r2, [r7, #32]
 8004850:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f8b6 	bl	80049c4 <SPI_EndRxTxTransaction>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d008      	beq.n	8004870 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e01d      	b.n	80048ac <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004878:	2300      	movs	r3, #0
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3728      	adds	r7, #40	@ 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048c4:	f7fe f8c4 	bl	8002a50 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048d4:	f7fe f8bc 	bl	8002a50 <HAL_GetTick>
 80048d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048da:	4b39      	ldr	r3, [pc, #228]	@ (80049c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	015b      	lsls	r3, r3, #5
 80048e0:	0d1b      	lsrs	r3, r3, #20
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	fb02 f303 	mul.w	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ea:	e055      	b.n	8004998 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d051      	beq.n	8004998 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048f4:	f7fe f8ac 	bl	8002a50 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	429a      	cmp	r2, r3
 8004902:	d902      	bls.n	800490a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d13d      	bne.n	8004986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004922:	d111      	bne.n	8004948 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800492c:	d004      	beq.n	8004938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004936:	d107      	bne.n	8004948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004950:	d10f      	bne.n	8004972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e018      	b.n	80049b8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d102      	bne.n	8004992 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	61fb      	str	r3, [r7, #28]
 8004990:	e002      	b.n	8004998 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	3b01      	subs	r3, #1
 8004996:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d19a      	bne.n	80048ec <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3720      	adds	r7, #32
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20000000 	.word	0x20000000

080049c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2201      	movs	r2, #1
 80049d8:	2102      	movs	r1, #2
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff ff6a 	bl	80048b4 <SPI_WaitFlagStateUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e032      	b.n	8004a5c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a64 <SPI_EndRxTxTransaction+0xa0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a68 <SPI_EndRxTxTransaction+0xa4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	0d5b      	lsrs	r3, r3, #21
 8004a02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a06:	fb02 f303 	mul.w	r3, r2, r3
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a14:	d112      	bne.n	8004a3c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	@ 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f7ff ff47 	bl	80048b4 <SPI_WaitFlagStateUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d016      	beq.n	8004a5a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	f043 0220 	orr.w	r2, r3, #32
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e00f      	b.n	8004a5c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a52:	2b80      	cmp	r3, #128	@ 0x80
 8004a54:	d0f2      	beq.n	8004a3c <SPI_EndRxTxTransaction+0x78>
 8004a56:	e000      	b.n	8004a5a <SPI_EndRxTxTransaction+0x96>
        break;
 8004a58:	bf00      	nop
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3718      	adds	r7, #24
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000000 	.word	0x20000000
 8004a68:	165e9f81 	.word	0x165e9f81

08004a6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e041      	b.n	8004b02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd fe1c 	bl	80026d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 ff18 	bl	80058e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d001      	beq.n	8004b24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e046      	b.n	8004bb2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a23      	ldr	r2, [pc, #140]	@ (8004bc0 <HAL_TIM_Base_Start+0xb4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b3e:	d01d      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc4 <HAL_TIM_Base_Start+0xb8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc8 <HAL_TIM_Base_Start+0xbc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1c      	ldr	r2, [pc, #112]	@ (8004bcc <HAL_TIM_Base_Start+0xc0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd0 <HAL_TIM_Base_Start+0xc4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <HAL_TIM_Base_Start+0xc8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_TIM_Base_Start+0x70>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <HAL_TIM_Base_Start+0xcc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d111      	bne.n	8004ba0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d010      	beq.n	8004bb0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	e007      	b.n	8004bb0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40010400 	.word	0x40010400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40001800 	.word	0x40001800

08004bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e041      	b.n	8004c72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fd fda0 	bl	8002748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 fe60 	bl	80058e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d109      	bne.n	8004ca0 <HAL_TIM_PWM_Start+0x24>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e022      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x6a>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d109      	bne.n	8004cba <HAL_TIM_PWM_Start+0x3e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e015      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x6a>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d109      	bne.n	8004cd4 <HAL_TIM_PWM_Start+0x58>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e008      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x6a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07c      	b.n	8004de8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0x82>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cfc:	e013      	b.n	8004d26 <HAL_TIM_PWM_Start+0xaa>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x92>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d0c:	e00b      	b.n	8004d26 <HAL_TIM_PWM_Start+0xaa>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_PWM_Start+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	e003      	b.n	8004d26 <HAL_TIM_PWM_Start+0xaa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f9f0 	bl	8006114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2d      	ldr	r2, [pc, #180]	@ (8004df0 <HAL_TIM_PWM_Start+0x174>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <HAL_TIM_PWM_Start+0xcc>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2c      	ldr	r2, [pc, #176]	@ (8004df4 <HAL_TIM_PWM_Start+0x178>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d101      	bne.n	8004d4c <HAL_TIM_PWM_Start+0xd0>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <HAL_TIM_PWM_Start+0xd2>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d007      	beq.n	8004d62 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a22      	ldr	r2, [pc, #136]	@ (8004df0 <HAL_TIM_PWM_Start+0x174>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x136>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d74:	d01d      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x136>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004df8 <HAL_TIM_PWM_Start+0x17c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x136>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1d      	ldr	r2, [pc, #116]	@ (8004dfc <HAL_TIM_PWM_Start+0x180>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x136>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e00 <HAL_TIM_PWM_Start+0x184>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x136>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a16      	ldr	r2, [pc, #88]	@ (8004df4 <HAL_TIM_PWM_Start+0x178>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x136>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a18      	ldr	r2, [pc, #96]	@ (8004e04 <HAL_TIM_PWM_Start+0x188>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x136>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <HAL_TIM_PWM_Start+0x18c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d111      	bne.n	8004dd6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d010      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd4:	e007      	b.n	8004de6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f042 0201 	orr.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40010000 	.word	0x40010000
 8004df4:	40010400 	.word	0x40010400
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800
 8004e00:	40000c00 	.word	0x40000c00
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40001800 	.word	0x40001800

08004e0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f978 	bl	8006114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ee4 <HAL_TIM_PWM_Stop+0xd8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_TIM_PWM_Stop+0x2c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2d      	ldr	r2, [pc, #180]	@ (8004ee8 <HAL_TIM_PWM_Stop+0xdc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_PWM_Stop+0x30>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_TIM_PWM_Stop+0x32>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d017      	beq.n	8004e72 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	6a1a      	ldr	r2, [r3, #32]
 8004e48:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <HAL_TIM_PWM_Stop+0x66>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6a1a      	ldr	r2, [r3, #32]
 8004e58:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_PWM_Stop+0x66>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10f      	bne.n	8004ea2 <HAL_TIM_PWM_Stop+0x96>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d107      	bne.n	8004ea2 <HAL_TIM_PWM_Stop+0x96>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d104      	bne.n	8004eb2 <HAL_TIM_PWM_Stop+0xa6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004eb0:	e013      	b.n	8004eda <HAL_TIM_PWM_Stop+0xce>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_PWM_Stop+0xb6>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ec0:	e00b      	b.n	8004eda <HAL_TIM_PWM_Stop+0xce>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_PWM_Stop+0xc6>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed0:	e003      	b.n	8004eda <HAL_TIM_PWM_Stop+0xce>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40010400 	.word	0x40010400

08004eec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e041      	b.n	8004f82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fd fb8c 	bl	8002630 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 fcd8 	bl	80058e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_IC_Start_IT+0x1e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	e013      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x46>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_IC_Start_IT+0x2e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	e00b      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x46>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_IC_Start_IT+0x3e>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	e003      	b.n	8004fd2 <HAL_TIM_IC_Start_IT+0x46>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d104      	bne.n	8004fe4 <HAL_TIM_IC_Start_IT+0x58>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	e013      	b.n	800500c <HAL_TIM_IC_Start_IT+0x80>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d104      	bne.n	8004ff4 <HAL_TIM_IC_Start_IT+0x68>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e00b      	b.n	800500c <HAL_TIM_IC_Start_IT+0x80>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d104      	bne.n	8005004 <HAL_TIM_IC_Start_IT+0x78>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005000:	b2db      	uxtb	r3, r3
 8005002:	e003      	b.n	800500c <HAL_TIM_IC_Start_IT+0x80>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800500a:	b2db      	uxtb	r3, r3
 800500c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800500e:	7bbb      	ldrb	r3, [r7, #14]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d102      	bne.n	800501a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005014:	7b7b      	ldrb	r3, [r7, #13]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0cc      	b.n	80051b8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d104      	bne.n	800502e <HAL_TIM_IC_Start_IT+0xa2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800502c:	e013      	b.n	8005056 <HAL_TIM_IC_Start_IT+0xca>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b04      	cmp	r3, #4
 8005032:	d104      	bne.n	800503e <HAL_TIM_IC_Start_IT+0xb2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800503c:	e00b      	b.n	8005056 <HAL_TIM_IC_Start_IT+0xca>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d104      	bne.n	800504e <HAL_TIM_IC_Start_IT+0xc2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800504c:	e003      	b.n	8005056 <HAL_TIM_IC_Start_IT+0xca>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d104      	bne.n	8005066 <HAL_TIM_IC_Start_IT+0xda>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005064:	e013      	b.n	800508e <HAL_TIM_IC_Start_IT+0x102>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d104      	bne.n	8005076 <HAL_TIM_IC_Start_IT+0xea>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005074:	e00b      	b.n	800508e <HAL_TIM_IC_Start_IT+0x102>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d104      	bne.n	8005086 <HAL_TIM_IC_Start_IT+0xfa>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005084:	e003      	b.n	800508e <HAL_TIM_IC_Start_IT+0x102>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d841      	bhi.n	8005118 <HAL_TIM_IC_Start_IT+0x18c>
 8005094:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <HAL_TIM_IC_Start_IT+0x110>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050d1 	.word	0x080050d1
 80050a0:	08005119 	.word	0x08005119
 80050a4:	08005119 	.word	0x08005119
 80050a8:	08005119 	.word	0x08005119
 80050ac:	080050e3 	.word	0x080050e3
 80050b0:	08005119 	.word	0x08005119
 80050b4:	08005119 	.word	0x08005119
 80050b8:	08005119 	.word	0x08005119
 80050bc:	080050f5 	.word	0x080050f5
 80050c0:	08005119 	.word	0x08005119
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005119 	.word	0x08005119
 80050cc:	08005107 	.word	0x08005107
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0202 	orr.w	r2, r2, #2
 80050de:	60da      	str	r2, [r3, #12]
      break;
 80050e0:	e01d      	b.n	800511e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0204 	orr.w	r2, r2, #4
 80050f0:	60da      	str	r2, [r3, #12]
      break;
 80050f2:	e014      	b.n	800511e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	60da      	str	r2, [r3, #12]
      break;
 8005104:	e00b      	b.n	800511e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0210 	orr.w	r2, r2, #16
 8005114:	60da      	str	r2, [r3, #12]
      break;
 8005116:	e002      	b.n	800511e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
      break;
 800511c:	bf00      	nop
  }

  if (status == HAL_OK)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d148      	bne.n	80051b6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2201      	movs	r2, #1
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fff1 	bl	8006114 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a22      	ldr	r2, [pc, #136]	@ (80051c0 <HAL_TIM_IC_Start_IT+0x234>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <HAL_TIM_IC_Start_IT+0x1f6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005144:	d01d      	beq.n	8005182 <HAL_TIM_IC_Start_IT+0x1f6>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <HAL_TIM_IC_Start_IT+0x238>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <HAL_TIM_IC_Start_IT+0x1f6>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1c      	ldr	r2, [pc, #112]	@ (80051c8 <HAL_TIM_IC_Start_IT+0x23c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_TIM_IC_Start_IT+0x1f6>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1b      	ldr	r2, [pc, #108]	@ (80051cc <HAL_TIM_IC_Start_IT+0x240>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <HAL_TIM_IC_Start_IT+0x1f6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a19      	ldr	r2, [pc, #100]	@ (80051d0 <HAL_TIM_IC_Start_IT+0x244>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <HAL_TIM_IC_Start_IT+0x1f6>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a18      	ldr	r2, [pc, #96]	@ (80051d4 <HAL_TIM_IC_Start_IT+0x248>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_TIM_IC_Start_IT+0x1f6>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a16      	ldr	r2, [pc, #88]	@ (80051d8 <HAL_TIM_IC_Start_IT+0x24c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d111      	bne.n	80051a6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d010      	beq.n	80051b6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	e007      	b.n	80051b6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40001800 	.word	0x40001800

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d020      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0202 	mvn.w	r2, #2
 8005210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc f8b2 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 800522c:	e005      	b.n	800523a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 fb38 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fb3f 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d020      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f7fc f88c 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fb12 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb19 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0208 	mvn.w	r2, #8
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fc f866 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 faec 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 faf3 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0310 	and.w	r3, r3, #16
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0210 	mvn.w	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2208      	movs	r2, #8
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7fc f840 	bl	8001390 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fac6 	bl	80058a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 facd 	bl	80058b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d007      	beq.n	8005348 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0201 	mvn.w	r2, #1
 8005340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 faa4 	bl	8005890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 ff80 	bl	800626c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa9e 	bl	80058cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0220 	mvn.w	r2, #32
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 ff52 	bl	8006258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_TIM_IC_ConfigChannel+0x1e>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e088      	b.n	80054ec <HAL_TIM_IC_ConfigChannel+0x130>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11b      	bne.n	8005420 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80053f8:	f000 fcc8 	bl	8005d8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 020c 	bic.w	r2, r2, #12
 800540a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6999      	ldr	r1, [r3, #24]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	619a      	str	r2, [r3, #24]
 800541e:	e060      	b.n	80054e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b04      	cmp	r3, #4
 8005424:	d11c      	bne.n	8005460 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005436:	f000 fd4c 	bl	8005ed2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005448:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6999      	ldr	r1, [r3, #24]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	619a      	str	r2, [r3, #24]
 800545e:	e040      	b.n	80054e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d11b      	bne.n	800549e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005476:	f000 fd99 	bl	8005fac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 020c 	bic.w	r2, r2, #12
 8005488:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69d9      	ldr	r1, [r3, #28]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	61da      	str	r2, [r3, #28]
 800549c:	e021      	b.n	80054e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d11c      	bne.n	80054de <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80054b4:	f000 fdb6 	bl	8006024 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80054c6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	69d9      	ldr	r1, [r3, #28]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	61da      	str	r2, [r3, #28]
 80054dc:	e001      	b.n	80054e2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550e:	2302      	movs	r3, #2
 8005510:	e0ae      	b.n	8005670 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b0c      	cmp	r3, #12
 800551e:	f200 809f 	bhi.w	8005660 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005522:	a201      	add	r2, pc, #4	@ (adr r2, 8005528 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	0800555d 	.word	0x0800555d
 800552c:	08005661 	.word	0x08005661
 8005530:	08005661 	.word	0x08005661
 8005534:	08005661 	.word	0x08005661
 8005538:	0800559d 	.word	0x0800559d
 800553c:	08005661 	.word	0x08005661
 8005540:	08005661 	.word	0x08005661
 8005544:	08005661 	.word	0x08005661
 8005548:	080055df 	.word	0x080055df
 800554c:	08005661 	.word	0x08005661
 8005550:	08005661 	.word	0x08005661
 8005554:	08005661 	.word	0x08005661
 8005558:	0800561f 	.word	0x0800561f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fa62 	bl	8005a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0208 	orr.w	r2, r2, #8
 8005576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699a      	ldr	r2, [r3, #24]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0204 	bic.w	r2, r2, #4
 8005586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6999      	ldr	r1, [r3, #24]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	619a      	str	r2, [r3, #24]
      break;
 800559a:	e064      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fab2 	bl	8005b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6999      	ldr	r1, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	021a      	lsls	r2, r3, #8
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	619a      	str	r2, [r3, #24]
      break;
 80055dc:	e043      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fb07 	bl	8005bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0208 	orr.w	r2, r2, #8
 80055f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0204 	bic.w	r2, r2, #4
 8005608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69d9      	ldr	r1, [r3, #28]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	61da      	str	r2, [r3, #28]
      break;
 800561c:	e023      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fb5b 	bl	8005ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005638:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69da      	ldr	r2, [r3, #28]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005648:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69d9      	ldr	r1, [r3, #28]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	021a      	lsls	r2, r3, #8
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	61da      	str	r2, [r3, #28]
      break;
 800565e:	e002      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	75fb      	strb	r3, [r7, #23]
      break;
 8005664:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_TIM_ConfigClockSource+0x1c>
 8005690:	2302      	movs	r3, #2
 8005692:	e0b4      	b.n	80057fe <HAL_TIM_ConfigClockSource+0x186>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80056b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056cc:	d03e      	beq.n	800574c <HAL_TIM_ConfigClockSource+0xd4>
 80056ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056d2:	f200 8087 	bhi.w	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056da:	f000 8086 	beq.w	80057ea <HAL_TIM_ConfigClockSource+0x172>
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e2:	d87f      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b70      	cmp	r3, #112	@ 0x70
 80056e6:	d01a      	beq.n	800571e <HAL_TIM_ConfigClockSource+0xa6>
 80056e8:	2b70      	cmp	r3, #112	@ 0x70
 80056ea:	d87b      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b60      	cmp	r3, #96	@ 0x60
 80056ee:	d050      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0x11a>
 80056f0:	2b60      	cmp	r3, #96	@ 0x60
 80056f2:	d877      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b50      	cmp	r3, #80	@ 0x50
 80056f6:	d03c      	beq.n	8005772 <HAL_TIM_ConfigClockSource+0xfa>
 80056f8:	2b50      	cmp	r3, #80	@ 0x50
 80056fa:	d873      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b40      	cmp	r3, #64	@ 0x40
 80056fe:	d058      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005700:	2b40      	cmp	r3, #64	@ 0x40
 8005702:	d86f      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b30      	cmp	r3, #48	@ 0x30
 8005706:	d064      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005708:	2b30      	cmp	r3, #48	@ 0x30
 800570a:	d86b      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d060      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d867      	bhi.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d05c      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b10      	cmp	r3, #16
 800571a:	d05a      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0x15a>
 800571c:	e062      	b.n	80057e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	f000 fcd1 	bl	80060d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005740:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	609a      	str	r2, [r3, #8]
      break;
 800574a:	e04f      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	f000 fcba 	bl	80060d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800576e:	609a      	str	r2, [r3, #8]
      break;
 8005770:	e03c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577e:	461a      	mov	r2, r3
 8005780:	f000 fb78 	bl	8005e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2150      	movs	r1, #80	@ 0x50
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fc87 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 8005790:	e02c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800579e:	461a      	mov	r2, r3
 80057a0:	f000 fbd4 	bl	8005f4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2160      	movs	r1, #96	@ 0x60
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fc77 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 80057b0:	e01c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057be:	461a      	mov	r2, r3
 80057c0:	f000 fb58 	bl	8005e74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2140      	movs	r1, #64	@ 0x40
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fc67 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 80057d0:	e00c      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f000 fc5e 	bl	800609e <TIM_ITRx_SetConfig>
      break;
 80057e2:	e003      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
      break;
 80057e8:	e000      	b.n	80057ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d831      	bhi.n	8005880 <HAL_TIM_ReadCapturedValue+0x78>
 800581c:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <HAL_TIM_ReadCapturedValue+0x1c>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005859 	.word	0x08005859
 8005828:	08005881 	.word	0x08005881
 800582c:	08005881 	.word	0x08005881
 8005830:	08005881 	.word	0x08005881
 8005834:	08005863 	.word	0x08005863
 8005838:	08005881 	.word	0x08005881
 800583c:	08005881 	.word	0x08005881
 8005840:	08005881 	.word	0x08005881
 8005844:	0800586d 	.word	0x0800586d
 8005848:	08005881 	.word	0x08005881
 800584c:	08005881 	.word	0x08005881
 8005850:	08005881 	.word	0x08005881
 8005854:	08005877 	.word	0x08005877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585e:	60fb      	str	r3, [r7, #12]

      break;
 8005860:	e00f      	b.n	8005882 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005868:	60fb      	str	r3, [r7, #12]

      break;
 800586a:	e00a      	b.n	8005882 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005872:	60fb      	str	r3, [r7, #12]

      break;
 8005874:	e005      	b.n	8005882 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	60fb      	str	r3, [r7, #12]

      break;
 800587e:	e000      	b.n	8005882 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005880:	bf00      	nop
  }

  return tmpreg;
 8005882:	68fb      	ldr	r3, [r7, #12]
}
 8005884:	4618      	mov	r0, r3
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a43      	ldr	r2, [pc, #268]	@ (8005a00 <TIM_Base_SetConfig+0x120>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058fe:	d00f      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a40      	ldr	r2, [pc, #256]	@ (8005a04 <TIM_Base_SetConfig+0x124>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00b      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a3f      	ldr	r2, [pc, #252]	@ (8005a08 <TIM_Base_SetConfig+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a3e      	ldr	r2, [pc, #248]	@ (8005a0c <TIM_Base_SetConfig+0x12c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a3d      	ldr	r2, [pc, #244]	@ (8005a10 <TIM_Base_SetConfig+0x130>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d108      	bne.n	8005932 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a32      	ldr	r2, [pc, #200]	@ (8005a00 <TIM_Base_SetConfig+0x120>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d02b      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005940:	d027      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a2f      	ldr	r2, [pc, #188]	@ (8005a04 <TIM_Base_SetConfig+0x124>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d023      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a08 <TIM_Base_SetConfig+0x128>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d01f      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a2d      	ldr	r2, [pc, #180]	@ (8005a0c <TIM_Base_SetConfig+0x12c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01b      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a10 <TIM_Base_SetConfig+0x130>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d017      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2b      	ldr	r2, [pc, #172]	@ (8005a14 <TIM_Base_SetConfig+0x134>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d013      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a18 <TIM_Base_SetConfig+0x138>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00f      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a29      	ldr	r2, [pc, #164]	@ (8005a1c <TIM_Base_SetConfig+0x13c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00b      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a28      	ldr	r2, [pc, #160]	@ (8005a20 <TIM_Base_SetConfig+0x140>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a27      	ldr	r2, [pc, #156]	@ (8005a24 <TIM_Base_SetConfig+0x144>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a26      	ldr	r2, [pc, #152]	@ (8005a28 <TIM_Base_SetConfig+0x148>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d108      	bne.n	80059a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	689a      	ldr	r2, [r3, #8]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005a00 <TIM_Base_SetConfig+0x120>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d003      	beq.n	80059d2 <TIM_Base_SetConfig+0xf2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a10      	ldr	r2, [pc, #64]	@ (8005a10 <TIM_Base_SetConfig+0x130>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d103      	bne.n	80059da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f043 0204 	orr.w	r2, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	601a      	str	r2, [r3, #0]
}
 80059f2:	bf00      	nop
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40010000 	.word	0x40010000
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40000c00 	.word	0x40000c00
 8005a10:	40010400 	.word	0x40010400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400
 8005a1c:	40014800 	.word	0x40014800
 8005a20:	40001800 	.word	0x40001800
 8005a24:	40001c00 	.word	0x40001c00
 8005a28:	40002000 	.word	0x40002000

08005a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0201 	bic.w	r2, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f023 0302 	bic.w	r3, r3, #2
 8005a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a20      	ldr	r2, [pc, #128]	@ (8005b04 <TIM_OC1_SetConfig+0xd8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_OC1_SetConfig+0x64>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005b08 <TIM_OC1_SetConfig+0xdc>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d10c      	bne.n	8005aaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0308 	bic.w	r3, r3, #8
 8005a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0304 	bic.w	r3, r3, #4
 8005aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a15      	ldr	r2, [pc, #84]	@ (8005b04 <TIM_OC1_SetConfig+0xd8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_OC1_SetConfig+0x8e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a14      	ldr	r2, [pc, #80]	@ (8005b08 <TIM_OC1_SetConfig+0xdc>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d111      	bne.n	8005ade <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	621a      	str	r2, [r3, #32]
}
 8005af8:	bf00      	nop
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40010400 	.word	0x40010400

08005b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f023 0210 	bic.w	r2, r3, #16
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f023 0320 	bic.w	r3, r3, #32
 8005b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a22      	ldr	r2, [pc, #136]	@ (8005bf0 <TIM_OC2_SetConfig+0xe4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <TIM_OC2_SetConfig+0x68>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	@ (8005bf4 <TIM_OC2_SetConfig+0xe8>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d10d      	bne.n	8005b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a17      	ldr	r2, [pc, #92]	@ (8005bf0 <TIM_OC2_SetConfig+0xe4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <TIM_OC2_SetConfig+0x94>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a16      	ldr	r2, [pc, #88]	@ (8005bf4 <TIM_OC2_SetConfig+0xe8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d113      	bne.n	8005bc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000
 8005bf4:	40010400 	.word	0x40010400

08005bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a21      	ldr	r2, [pc, #132]	@ (8005cd8 <TIM_OC3_SetConfig+0xe0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d003      	beq.n	8005c5e <TIM_OC3_SetConfig+0x66>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a20      	ldr	r2, [pc, #128]	@ (8005cdc <TIM_OC3_SetConfig+0xe4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d10d      	bne.n	8005c7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a16      	ldr	r2, [pc, #88]	@ (8005cd8 <TIM_OC3_SetConfig+0xe0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d003      	beq.n	8005c8a <TIM_OC3_SetConfig+0x92>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a15      	ldr	r2, [pc, #84]	@ (8005cdc <TIM_OC3_SetConfig+0xe4>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d113      	bne.n	8005cb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	621a      	str	r2, [r3, #32]
}
 8005ccc:	bf00      	nop
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	031b      	lsls	r3, r3, #12
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a12      	ldr	r2, [pc, #72]	@ (8005d84 <TIM_OC4_SetConfig+0xa4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_OC4_SetConfig+0x68>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a11      	ldr	r2, [pc, #68]	@ (8005d88 <TIM_OC4_SetConfig+0xa8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d109      	bne.n	8005d5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	019b      	lsls	r3, r3, #6
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40010000 	.word	0x40010000
 8005d88:	40010400 	.word	0x40010400

08005d8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	f023 0201 	bic.w	r2, r3, #1
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4a28      	ldr	r2, [pc, #160]	@ (8005e58 <TIM_TI1_SetConfig+0xcc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01b      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc0:	d017      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a25      	ldr	r2, [pc, #148]	@ (8005e5c <TIM_TI1_SetConfig+0xd0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a24      	ldr	r2, [pc, #144]	@ (8005e60 <TIM_TI1_SetConfig+0xd4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00f      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	@ (8005e64 <TIM_TI1_SetConfig+0xd8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	@ (8005e68 <TIM_TI1_SetConfig+0xdc>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a21      	ldr	r2, [pc, #132]	@ (8005e6c <TIM_TI1_SetConfig+0xe0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_TI1_SetConfig+0x66>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4a20      	ldr	r2, [pc, #128]	@ (8005e70 <TIM_TI1_SetConfig+0xe4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <TIM_TI1_SetConfig+0x6a>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <TIM_TI1_SetConfig+0x6c>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e003      	b.n	8005e16 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f023 030a 	bic.w	r3, r3, #10
 8005e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 030a 	and.w	r3, r3, #10
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40000800 	.word	0x40000800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40010400 	.word	0x40010400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40001800 	.word	0x40001800

08005e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f023 0201 	bic.w	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 030a 	bic.w	r3, r3, #10
 8005eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	621a      	str	r2, [r3, #32]
}
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b087      	sub	sp, #28
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f023 0210 	bic.w	r2, r3, #16
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f24:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	621a      	str	r2, [r3, #32]
}
 8005f40:	bf00      	nop
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	031b      	lsls	r3, r3, #12
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	621a      	str	r2, [r3, #32]
}
 8005fa0:	bf00      	nop
 8005fa2:	371c      	adds	r7, #28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f023 0303 	bic.w	r3, r3, #3
 8005fd8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fe8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	021b      	lsls	r3, r3, #8
 8006002:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	bf00      	nop
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006050:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	4313      	orrs	r3, r2
 800605a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006062:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	031b      	lsls	r3, r3, #12
 8006068:	b29b      	uxth	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006076:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	031b      	lsls	r3, r3, #12
 800607c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f043 0307 	orr.w	r3, r3, #7
 80060c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	609a      	str	r2, [r3, #8]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	021a      	lsls	r2, r3, #8
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	609a      	str	r2, [r3, #8]
}
 8006108:	bf00      	nop
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 031f 	and.w	r3, r3, #31
 8006126:	2201      	movs	r2, #1
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a1a      	ldr	r2, [r3, #32]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	43db      	mvns	r3, r3
 8006136:	401a      	ands	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006174:	2302      	movs	r3, #2
 8006176:	e05a      	b.n	800622e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a21      	ldr	r2, [pc, #132]	@ (800623c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d022      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c4:	d01d      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d018      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006244 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1a      	ldr	r2, [pc, #104]	@ (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00e      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a18      	ldr	r2, [pc, #96]	@ (800624c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d009      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d004      	beq.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a15      	ldr	r2, [pc, #84]	@ (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d10c      	bne.n	800621c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	4313      	orrs	r3, r2
 8006212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40010000 	.word	0x40010000
 8006240:	40000400 	.word	0x40000400
 8006244:	40000800 	.word	0x40000800
 8006248:	40000c00 	.word	0x40000c00
 800624c:	40010400 	.word	0x40010400
 8006250:	40014000 	.word	0x40014000
 8006254:	40001800 	.word	0x40001800

08006258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e042      	b.n	8006318 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fc fafa 	bl	80028a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2224      	movs	r2, #36	@ 0x24
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f82b 	bl	8006320 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80062e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80062f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006324:	b0c0      	sub	sp, #256	@ 0x100
 8006326:	af00      	add	r7, sp, #0
 8006328:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633c:	68d9      	ldr	r1, [r3, #12]
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	ea40 0301 	orr.w	r3, r0, r1
 8006348:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800634a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634e:	689a      	ldr	r2, [r3, #8]
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	431a      	orrs	r2, r3
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	431a      	orrs	r2, r3
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	4313      	orrs	r3, r2
 8006368:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006378:	f021 010c 	bic.w	r1, r1, #12
 800637c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006386:	430b      	orrs	r3, r1
 8006388:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639a:	6999      	ldr	r1, [r3, #24]
 800639c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	ea40 0301 	orr.w	r3, r0, r1
 80063a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b8f      	ldr	r3, [pc, #572]	@ (80065ec <UART_SetConfig+0x2cc>)
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d005      	beq.n	80063c0 <UART_SetConfig+0xa0>
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b8d      	ldr	r3, [pc, #564]	@ (80065f0 <UART_SetConfig+0x2d0>)
 80063bc:	429a      	cmp	r2, r3
 80063be:	d104      	bne.n	80063ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063c0:	f7fd fbea 	bl	8003b98 <HAL_RCC_GetPCLK2Freq>
 80063c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063c8:	e003      	b.n	80063d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ca:	f7fd fbd1 	bl	8003b70 <HAL_RCC_GetPCLK1Freq>
 80063ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063dc:	f040 810c 	bne.w	80065f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e4:	2200      	movs	r2, #0
 80063e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063f2:	4622      	mov	r2, r4
 80063f4:	462b      	mov	r3, r5
 80063f6:	1891      	adds	r1, r2, r2
 80063f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063fa:	415b      	adcs	r3, r3
 80063fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006402:	4621      	mov	r1, r4
 8006404:	eb12 0801 	adds.w	r8, r2, r1
 8006408:	4629      	mov	r1, r5
 800640a:	eb43 0901 	adc.w	r9, r3, r1
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800641a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800641e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006422:	4690      	mov	r8, r2
 8006424:	4699      	mov	r9, r3
 8006426:	4623      	mov	r3, r4
 8006428:	eb18 0303 	adds.w	r3, r8, r3
 800642c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006430:	462b      	mov	r3, r5
 8006432:	eb49 0303 	adc.w	r3, r9, r3
 8006436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006446:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800644a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800644e:	460b      	mov	r3, r1
 8006450:	18db      	adds	r3, r3, r3
 8006452:	653b      	str	r3, [r7, #80]	@ 0x50
 8006454:	4613      	mov	r3, r2
 8006456:	eb42 0303 	adc.w	r3, r2, r3
 800645a:	657b      	str	r3, [r7, #84]	@ 0x54
 800645c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006460:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006464:	f7fa fae6 	bl	8000a34 <__aeabi_uldivmod>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4b61      	ldr	r3, [pc, #388]	@ (80065f4 <UART_SetConfig+0x2d4>)
 800646e:	fba3 2302 	umull	r2, r3, r3, r2
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	011c      	lsls	r4, r3, #4
 8006476:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800647a:	2200      	movs	r2, #0
 800647c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006480:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006484:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	1891      	adds	r1, r2, r2
 800648e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006490:	415b      	adcs	r3, r3
 8006492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006494:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006498:	4641      	mov	r1, r8
 800649a:	eb12 0a01 	adds.w	sl, r2, r1
 800649e:	4649      	mov	r1, r9
 80064a0:	eb43 0b01 	adc.w	fp, r3, r1
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064b8:	4692      	mov	sl, r2
 80064ba:	469b      	mov	fp, r3
 80064bc:	4643      	mov	r3, r8
 80064be:	eb1a 0303 	adds.w	r3, sl, r3
 80064c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064c6:	464b      	mov	r3, r9
 80064c8:	eb4b 0303 	adc.w	r3, fp, r3
 80064cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064e4:	460b      	mov	r3, r1
 80064e6:	18db      	adds	r3, r3, r3
 80064e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ea:	4613      	mov	r3, r2
 80064ec:	eb42 0303 	adc.w	r3, r2, r3
 80064f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064fa:	f7fa fa9b 	bl	8000a34 <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4611      	mov	r1, r2
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <UART_SetConfig+0x2d4>)
 8006506:	fba3 2301 	umull	r2, r3, r3, r1
 800650a:	095b      	lsrs	r3, r3, #5
 800650c:	2264      	movs	r2, #100	@ 0x64
 800650e:	fb02 f303 	mul.w	r3, r2, r3
 8006512:	1acb      	subs	r3, r1, r3
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800651a:	4b36      	ldr	r3, [pc, #216]	@ (80065f4 <UART_SetConfig+0x2d4>)
 800651c:	fba3 2302 	umull	r2, r3, r3, r2
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006528:	441c      	add	r4, r3
 800652a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800652e:	2200      	movs	r2, #0
 8006530:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006534:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006538:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800653c:	4642      	mov	r2, r8
 800653e:	464b      	mov	r3, r9
 8006540:	1891      	adds	r1, r2, r2
 8006542:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006544:	415b      	adcs	r3, r3
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800654c:	4641      	mov	r1, r8
 800654e:	1851      	adds	r1, r2, r1
 8006550:	6339      	str	r1, [r7, #48]	@ 0x30
 8006552:	4649      	mov	r1, r9
 8006554:	414b      	adcs	r3, r1
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006564:	4659      	mov	r1, fp
 8006566:	00cb      	lsls	r3, r1, #3
 8006568:	4651      	mov	r1, sl
 800656a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800656e:	4651      	mov	r1, sl
 8006570:	00ca      	lsls	r2, r1, #3
 8006572:	4610      	mov	r0, r2
 8006574:	4619      	mov	r1, r3
 8006576:	4603      	mov	r3, r0
 8006578:	4642      	mov	r2, r8
 800657a:	189b      	adds	r3, r3, r2
 800657c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006580:	464b      	mov	r3, r9
 8006582:	460a      	mov	r2, r1
 8006584:	eb42 0303 	adc.w	r3, r2, r3
 8006588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006598:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800659c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80065a0:	460b      	mov	r3, r1
 80065a2:	18db      	adds	r3, r3, r3
 80065a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065a6:	4613      	mov	r3, r2
 80065a8:	eb42 0303 	adc.w	r3, r2, r3
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065b6:	f7fa fa3d 	bl	8000a34 <__aeabi_uldivmod>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <UART_SetConfig+0x2d4>)
 80065c0:	fba3 1302 	umull	r1, r3, r3, r2
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	2164      	movs	r1, #100	@ 0x64
 80065c8:	fb01 f303 	mul.w	r3, r1, r3
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	3332      	adds	r3, #50	@ 0x32
 80065d2:	4a08      	ldr	r2, [pc, #32]	@ (80065f4 <UART_SetConfig+0x2d4>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	f003 0207 	and.w	r2, r3, #7
 80065de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4422      	add	r2, r4
 80065e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065e8:	e106      	b.n	80067f8 <UART_SetConfig+0x4d8>
 80065ea:	bf00      	nop
 80065ec:	40011000 	.word	0x40011000
 80065f0:	40011400 	.word	0x40011400
 80065f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006602:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006606:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800660a:	4642      	mov	r2, r8
 800660c:	464b      	mov	r3, r9
 800660e:	1891      	adds	r1, r2, r2
 8006610:	6239      	str	r1, [r7, #32]
 8006612:	415b      	adcs	r3, r3
 8006614:	627b      	str	r3, [r7, #36]	@ 0x24
 8006616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800661a:	4641      	mov	r1, r8
 800661c:	1854      	adds	r4, r2, r1
 800661e:	4649      	mov	r1, r9
 8006620:	eb43 0501 	adc.w	r5, r3, r1
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	00eb      	lsls	r3, r5, #3
 800662e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006632:	00e2      	lsls	r2, r4, #3
 8006634:	4614      	mov	r4, r2
 8006636:	461d      	mov	r5, r3
 8006638:	4643      	mov	r3, r8
 800663a:	18e3      	adds	r3, r4, r3
 800663c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006640:	464b      	mov	r3, r9
 8006642:	eb45 0303 	adc.w	r3, r5, r3
 8006646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006656:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800665a:	f04f 0200 	mov.w	r2, #0
 800665e:	f04f 0300 	mov.w	r3, #0
 8006662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006666:	4629      	mov	r1, r5
 8006668:	008b      	lsls	r3, r1, #2
 800666a:	4621      	mov	r1, r4
 800666c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006670:	4621      	mov	r1, r4
 8006672:	008a      	lsls	r2, r1, #2
 8006674:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006678:	f7fa f9dc 	bl	8000a34 <__aeabi_uldivmod>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4b60      	ldr	r3, [pc, #384]	@ (8006804 <UART_SetConfig+0x4e4>)
 8006682:	fba3 2302 	umull	r2, r3, r3, r2
 8006686:	095b      	lsrs	r3, r3, #5
 8006688:	011c      	lsls	r4, r3, #4
 800668a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668e:	2200      	movs	r2, #0
 8006690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006694:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006698:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	1891      	adds	r1, r2, r2
 80066a2:	61b9      	str	r1, [r7, #24]
 80066a4:	415b      	adcs	r3, r3
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066ac:	4641      	mov	r1, r8
 80066ae:	1851      	adds	r1, r2, r1
 80066b0:	6139      	str	r1, [r7, #16]
 80066b2:	4649      	mov	r1, r9
 80066b4:	414b      	adcs	r3, r1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066c4:	4659      	mov	r1, fp
 80066c6:	00cb      	lsls	r3, r1, #3
 80066c8:	4651      	mov	r1, sl
 80066ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ce:	4651      	mov	r1, sl
 80066d0:	00ca      	lsls	r2, r1, #3
 80066d2:	4610      	mov	r0, r2
 80066d4:	4619      	mov	r1, r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	4642      	mov	r2, r8
 80066da:	189b      	adds	r3, r3, r2
 80066dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066e0:	464b      	mov	r3, r9
 80066e2:	460a      	mov	r2, r1
 80066e4:	eb42 0303 	adc.w	r3, r2, r3
 80066e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006704:	4649      	mov	r1, r9
 8006706:	008b      	lsls	r3, r1, #2
 8006708:	4641      	mov	r1, r8
 800670a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800670e:	4641      	mov	r1, r8
 8006710:	008a      	lsls	r2, r1, #2
 8006712:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006716:	f7fa f98d 	bl	8000a34 <__aeabi_uldivmod>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4611      	mov	r1, r2
 8006720:	4b38      	ldr	r3, [pc, #224]	@ (8006804 <UART_SetConfig+0x4e4>)
 8006722:	fba3 2301 	umull	r2, r3, r3, r1
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	2264      	movs	r2, #100	@ 0x64
 800672a:	fb02 f303 	mul.w	r3, r2, r3
 800672e:	1acb      	subs	r3, r1, r3
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	3332      	adds	r3, #50	@ 0x32
 8006734:	4a33      	ldr	r2, [pc, #204]	@ (8006804 <UART_SetConfig+0x4e4>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006740:	441c      	add	r4, r3
 8006742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006746:	2200      	movs	r2, #0
 8006748:	673b      	str	r3, [r7, #112]	@ 0x70
 800674a:	677a      	str	r2, [r7, #116]	@ 0x74
 800674c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006750:	4642      	mov	r2, r8
 8006752:	464b      	mov	r3, r9
 8006754:	1891      	adds	r1, r2, r2
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	415b      	adcs	r3, r3
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006760:	4641      	mov	r1, r8
 8006762:	1851      	adds	r1, r2, r1
 8006764:	6039      	str	r1, [r7, #0]
 8006766:	4649      	mov	r1, r9
 8006768:	414b      	adcs	r3, r1
 800676a:	607b      	str	r3, [r7, #4]
 800676c:	f04f 0200 	mov.w	r2, #0
 8006770:	f04f 0300 	mov.w	r3, #0
 8006774:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006778:	4659      	mov	r1, fp
 800677a:	00cb      	lsls	r3, r1, #3
 800677c:	4651      	mov	r1, sl
 800677e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006782:	4651      	mov	r1, sl
 8006784:	00ca      	lsls	r2, r1, #3
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	4603      	mov	r3, r0
 800678c:	4642      	mov	r2, r8
 800678e:	189b      	adds	r3, r3, r2
 8006790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006792:	464b      	mov	r3, r9
 8006794:	460a      	mov	r2, r1
 8006796:	eb42 0303 	adc.w	r3, r2, r3
 800679a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800679c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80067a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067b4:	4649      	mov	r1, r9
 80067b6:	008b      	lsls	r3, r1, #2
 80067b8:	4641      	mov	r1, r8
 80067ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067be:	4641      	mov	r1, r8
 80067c0:	008a      	lsls	r2, r1, #2
 80067c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067c6:	f7fa f935 	bl	8000a34 <__aeabi_uldivmod>
 80067ca:	4602      	mov	r2, r0
 80067cc:	460b      	mov	r3, r1
 80067ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006804 <UART_SetConfig+0x4e4>)
 80067d0:	fba3 1302 	umull	r1, r3, r3, r2
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	2164      	movs	r1, #100	@ 0x64
 80067d8:	fb01 f303 	mul.w	r3, r1, r3
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	3332      	adds	r3, #50	@ 0x32
 80067e2:	4a08      	ldr	r2, [pc, #32]	@ (8006804 <UART_SetConfig+0x4e4>)
 80067e4:	fba2 2303 	umull	r2, r3, r2, r3
 80067e8:	095b      	lsrs	r3, r3, #5
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4422      	add	r2, r4
 80067f6:	609a      	str	r2, [r3, #8]
}
 80067f8:	bf00      	nop
 80067fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067fe:	46bd      	mov	sp, r7
 8006800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006804:	51eb851f 	.word	0x51eb851f

08006808 <memset>:
 8006808:	4402      	add	r2, r0
 800680a:	4603      	mov	r3, r0
 800680c:	4293      	cmp	r3, r2
 800680e:	d100      	bne.n	8006812 <memset+0xa>
 8006810:	4770      	bx	lr
 8006812:	f803 1b01 	strb.w	r1, [r3], #1
 8006816:	e7f9      	b.n	800680c <memset+0x4>

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	4d0d      	ldr	r5, [pc, #52]	@ (8006850 <__libc_init_array+0x38>)
 800681c:	4c0d      	ldr	r4, [pc, #52]	@ (8006854 <__libc_init_array+0x3c>)
 800681e:	1b64      	subs	r4, r4, r5
 8006820:	10a4      	asrs	r4, r4, #2
 8006822:	2600      	movs	r6, #0
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	4d0b      	ldr	r5, [pc, #44]	@ (8006858 <__libc_init_array+0x40>)
 800682a:	4c0c      	ldr	r4, [pc, #48]	@ (800685c <__libc_init_array+0x44>)
 800682c:	f000 f818 	bl	8006860 <_init>
 8006830:	1b64      	subs	r4, r4, r5
 8006832:	10a4      	asrs	r4, r4, #2
 8006834:	2600      	movs	r6, #0
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	f855 3b04 	ldr.w	r3, [r5], #4
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	08006ed0 	.word	0x08006ed0
 8006854:	08006ed0 	.word	0x08006ed0
 8006858:	08006ed0 	.word	0x08006ed0
 800685c:	08006ed4 	.word	0x08006ed4

08006860 <_init>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	bf00      	nop
 8006864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006866:	bc08      	pop	{r3}
 8006868:	469e      	mov	lr, r3
 800686a:	4770      	bx	lr

0800686c <_fini>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr
