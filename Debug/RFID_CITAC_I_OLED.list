
RFID_CITAC_I_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08003e4c  08003e4c  00004e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c8  080044c8  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044c8  080044c8  000054c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044d0  080044d0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044d4  080044d4  000054d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080044d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000014  080044ec  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  080044ec  00006548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f09d  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f1  00000000  00000000  000150e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000177d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a49  00000000  00000000  00018528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228fb  00000000  00000000  00018f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128c4  00000000  00000000  0003b86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd729  00000000  00000000  0004e130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011b859  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000364c  00000000  00000000  0011b89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0011eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003e34 	.word	0x08003e34

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	08003e34 	.word	0x08003e34

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b988 	b.w	800053c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	468e      	mov	lr, r1
 800024c:	4604      	mov	r4, r0
 800024e:	4688      	mov	r8, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d962      	bls.n	8000320 <__udivmoddi4+0xdc>
 800025a:	fab2 f682 	clz	r6, r2
 800025e:	b14e      	cbz	r6, 8000274 <__udivmoddi4+0x30>
 8000260:	f1c6 0320 	rsb	r3, r6, #32
 8000264:	fa01 f806 	lsl.w	r8, r1, r6
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	40b7      	lsls	r7, r6
 800026e:	ea43 0808 	orr.w	r8, r3, r8
 8000272:	40b4      	lsls	r4, r6
 8000274:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000278:	fa1f fc87 	uxth.w	ip, r7
 800027c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000280:	0c23      	lsrs	r3, r4, #16
 8000282:	fb0e 8811 	mls	r8, lr, r1, r8
 8000286:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028a:	fb01 f20c 	mul.w	r2, r1, ip
 800028e:	429a      	cmp	r2, r3
 8000290:	d909      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000292:	18fb      	adds	r3, r7, r3
 8000294:	f101 30ff 	add.w	r0, r1, #4294967295
 8000298:	f080 80ea 	bcs.w	8000470 <__udivmoddi4+0x22c>
 800029c:	429a      	cmp	r2, r3
 800029e:	f240 80e7 	bls.w	8000470 <__udivmoddi4+0x22c>
 80002a2:	3902      	subs	r1, #2
 80002a4:	443b      	add	r3, r7
 80002a6:	1a9a      	subs	r2, r3, r2
 80002a8:	b2a3      	uxth	r3, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ba:	459c      	cmp	ip, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x8e>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c4:	f080 80d6 	bcs.w	8000474 <__udivmoddi4+0x230>
 80002c8:	459c      	cmp	ip, r3
 80002ca:	f240 80d3 	bls.w	8000474 <__udivmoddi4+0x230>
 80002ce:	443b      	add	r3, r7
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d6:	eba3 030c 	sub.w	r3, r3, ip
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40f3      	lsrs	r3, r6
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xb6>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb0>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa2>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x14c>
 8000302:	4573      	cmp	r3, lr
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xc8>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 8105 	bhi.w	8000516 <__udivmoddi4+0x2d2>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000312:	2001      	movs	r0, #1
 8000314:	4690      	mov	r8, r2
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e5      	beq.n	80002e6 <__udivmoddi4+0xa2>
 800031a:	e9c5 4800 	strd	r4, r8, [r5]
 800031e:	e7e2      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	2a00      	cmp	r2, #0
 8000322:	f000 8090 	beq.w	8000446 <__udivmoddi4+0x202>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	2e00      	cmp	r6, #0
 800032c:	f040 80a4 	bne.w	8000478 <__udivmoddi4+0x234>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	0c03      	lsrs	r3, r0, #16
 8000334:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000338:	b280      	uxth	r0, r0
 800033a:	b2bc      	uxth	r4, r7
 800033c:	2101      	movs	r1, #1
 800033e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000342:	fb0e 221c 	mls	r2, lr, ip, r2
 8000346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034a:	fb04 f20c 	mul.w	r2, r4, ip
 800034e:	429a      	cmp	r2, r3
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x11e>
 8000352:	18fb      	adds	r3, r7, r3
 8000354:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x11c>
 800035a:	429a      	cmp	r2, r3
 800035c:	f200 80e0 	bhi.w	8000520 <__udivmoddi4+0x2dc>
 8000360:	46c4      	mov	ip, r8
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	fbb3 f2fe 	udiv	r2, r3, lr
 8000368:	fb0e 3312 	mls	r3, lr, r2, r3
 800036c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000370:	fb02 f404 	mul.w	r4, r2, r4
 8000374:	429c      	cmp	r4, r3
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0x144>
 8000378:	18fb      	adds	r3, r7, r3
 800037a:	f102 30ff 	add.w	r0, r2, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x142>
 8000380:	429c      	cmp	r4, r3
 8000382:	f200 80ca 	bhi.w	800051a <__udivmoddi4+0x2d6>
 8000386:	4602      	mov	r2, r0
 8000388:	1b1b      	subs	r3, r3, r4
 800038a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x98>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa0e f401 	lsl.w	r4, lr, r1
 80003a0:	fa20 f306 	lsr.w	r3, r0, r6
 80003a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fa00 f801 	lsl.w	r8, r0, r1
 80003b2:	fa1f fc87 	uxth.w	ip, r7
 80003b6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x1a0>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d6:	f080 809c 	bcs.w	8000512 <__udivmoddi4+0x2ce>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f240 8099 	bls.w	8000512 <__udivmoddi4+0x2ce>
 80003e0:	3802      	subs	r0, #2
 80003e2:	443c      	add	r4, r7
 80003e4:	eba4 040e 	sub.w	r4, r4, lr
 80003e8:	fa1f fe83 	uxth.w	lr, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1ce>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f103 3eff 	add.w	lr, r3, #4294967295
 8000406:	f080 8082 	bcs.w	800050e <__udivmoddi4+0x2ca>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d97f      	bls.n	800050e <__udivmoddi4+0x2ca>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000416:	eba4 040c 	sub.w	r4, r4, ip
 800041a:	fba0 ec02 	umull	lr, ip, r0, r2
 800041e:	4564      	cmp	r4, ip
 8000420:	4673      	mov	r3, lr
 8000422:	46e1      	mov	r9, ip
 8000424:	d362      	bcc.n	80004ec <__udivmoddi4+0x2a8>
 8000426:	d05f      	beq.n	80004e8 <__udivmoddi4+0x2a4>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x1fe>
 800042a:	ebb8 0203 	subs.w	r2, r8, r3
 800042e:	eb64 0409 	sbc.w	r4, r4, r9
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	fa22 f301 	lsr.w	r3, r2, r1
 800043a:	431e      	orrs	r6, r3
 800043c:	40cc      	lsrs	r4, r1
 800043e:	e9c5 6400 	strd	r6, r4, [r5]
 8000442:	2100      	movs	r1, #0
 8000444:	e74f      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000446:	fbb1 fcf2 	udiv	ip, r1, r2
 800044a:	0c01      	lsrs	r1, r0, #16
 800044c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000450:	b280      	uxth	r0, r0
 8000452:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000456:	463b      	mov	r3, r7
 8000458:	4638      	mov	r0, r7
 800045a:	463c      	mov	r4, r7
 800045c:	46b8      	mov	r8, r7
 800045e:	46be      	mov	lr, r7
 8000460:	2620      	movs	r6, #32
 8000462:	fbb1 f1f7 	udiv	r1, r1, r7
 8000466:	eba2 0208 	sub.w	r2, r2, r8
 800046a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046e:	e766      	b.n	800033e <__udivmoddi4+0xfa>
 8000470:	4601      	mov	r1, r0
 8000472:	e718      	b.n	80002a6 <__udivmoddi4+0x62>
 8000474:	4610      	mov	r0, r2
 8000476:	e72c      	b.n	80002d2 <__udivmoddi4+0x8e>
 8000478:	f1c6 0220 	rsb	r2, r6, #32
 800047c:	fa2e f302 	lsr.w	r3, lr, r2
 8000480:	40b7      	lsls	r7, r6
 8000482:	40b1      	lsls	r1, r6
 8000484:	fa20 f202 	lsr.w	r2, r0, r2
 8000488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800048c:	430a      	orrs	r2, r1
 800048e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000492:	b2bc      	uxth	r4, r7
 8000494:	fb0e 3318 	mls	r3, lr, r8, r3
 8000498:	0c11      	lsrs	r1, r2, #16
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb08 f904 	mul.w	r9, r8, r4
 80004a2:	40b0      	lsls	r0, r6
 80004a4:	4589      	cmp	r9, r1
 80004a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004aa:	b280      	uxth	r0, r0
 80004ac:	d93e      	bls.n	800052c <__udivmoddi4+0x2e8>
 80004ae:	1879      	adds	r1, r7, r1
 80004b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b4:	d201      	bcs.n	80004ba <__udivmoddi4+0x276>
 80004b6:	4589      	cmp	r9, r1
 80004b8:	d81f      	bhi.n	80004fa <__udivmoddi4+0x2b6>
 80004ba:	eba1 0109 	sub.w	r1, r1, r9
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fb09 f804 	mul.w	r8, r9, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	b292      	uxth	r2, r2
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d229      	bcs.n	8000528 <__udivmoddi4+0x2e4>
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004da:	d2c4      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004dc:	4542      	cmp	r2, r8
 80004de:	d2c2      	bcs.n	8000466 <__udivmoddi4+0x222>
 80004e0:	f1a9 0102 	sub.w	r1, r9, #2
 80004e4:	443a      	add	r2, r7
 80004e6:	e7be      	b.n	8000466 <__udivmoddi4+0x222>
 80004e8:	45f0      	cmp	r8, lr
 80004ea:	d29d      	bcs.n	8000428 <__udivmoddi4+0x1e4>
 80004ec:	ebbe 0302 	subs.w	r3, lr, r2
 80004f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f4:	3801      	subs	r0, #1
 80004f6:	46e1      	mov	r9, ip
 80004f8:	e796      	b.n	8000428 <__udivmoddi4+0x1e4>
 80004fa:	eba7 0909 	sub.w	r9, r7, r9
 80004fe:	4449      	add	r1, r9
 8000500:	f1a8 0c02 	sub.w	ip, r8, #2
 8000504:	fbb1 f9fe 	udiv	r9, r1, lr
 8000508:	fb09 f804 	mul.w	r8, r9, r4
 800050c:	e7db      	b.n	80004c6 <__udivmoddi4+0x282>
 800050e:	4673      	mov	r3, lr
 8000510:	e77f      	b.n	8000412 <__udivmoddi4+0x1ce>
 8000512:	4650      	mov	r0, sl
 8000514:	e766      	b.n	80003e4 <__udivmoddi4+0x1a0>
 8000516:	4608      	mov	r0, r1
 8000518:	e6fd      	b.n	8000316 <__udivmoddi4+0xd2>
 800051a:	443b      	add	r3, r7
 800051c:	3a02      	subs	r2, #2
 800051e:	e733      	b.n	8000388 <__udivmoddi4+0x144>
 8000520:	f1ac 0c02 	sub.w	ip, ip, #2
 8000524:	443b      	add	r3, r7
 8000526:	e71c      	b.n	8000362 <__udivmoddi4+0x11e>
 8000528:	4649      	mov	r1, r9
 800052a:	e79c      	b.n	8000466 <__udivmoddi4+0x222>
 800052c:	eba1 0109 	sub.w	r1, r1, r9
 8000530:	46c4      	mov	ip, r8
 8000532:	fbb1 f9fe 	udiv	r9, r1, lr
 8000536:	fb09 f804 	mul.w	r8, r9, r4
 800053a:	e7c4      	b.n	80004c6 <__udivmoddi4+0x282>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af02      	add	r7, sp, #8
 8000546:	4603      	mov	r3, r0
 8000548:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800054a:	f107 020f 	add.w	r2, r7, #15
 800054e:	1df9      	adds	r1, r7, #7
 8000550:	2364      	movs	r3, #100	@ 0x64
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2301      	movs	r3, #1
 8000556:	4804      	ldr	r0, [pc, #16]	@ (8000568 <RC522_SPI_Transfer+0x28>)
 8000558:	f002 fdaf 	bl	80030ba <HAL_SPI_TransmitReceive>

	return rx_data;
 800055c:	7bfb      	ldrb	r3, [r7, #15]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	2000009c 	.word	0x2000009c

0800056c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000582:	480d      	ldr	r0, [pc, #52]	@ (80005b8 <Write_MFRC522+0x4c>)
 8000584:	f001 fae6 	bl	8001b54 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000592:	b2db      	uxtb	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ffd3 	bl	8000540 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ffcf 	bl	8000540 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <Write_MFRC522+0x4c>)
 80005aa:	f001 fad3 	bl	8001b54 <HAL_GPIO_WritePin>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40020400 	.word	0x40020400

080005bc <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <Read_MFRC522+0x54>)
 80005ce:	f001 fac1 	bl	8001b54 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	005b      	lsls	r3, r3, #1
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffa9 	bl	8000540 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff ffa6 	bl	8000540 <RC522_SPI_Transfer>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005fe:	4804      	ldr	r0, [pc, #16]	@ (8000610 <Read_MFRC522+0x54>)
 8000600:	f001 faa8 	bl	8001b54 <HAL_GPIO_WritePin>
	
	return val;	
 8000604:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020400 	.word	0x40020400

08000614 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffc8 	bl	80005bc <Read_MFRC522>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000630:	7bfa      	ldrb	r2, [r7, #15]
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	4313      	orrs	r3, r2
 8000636:	b2da      	uxtb	r2, r3
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff95 	bl	800056c <Write_MFRC522>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	460a      	mov	r2, r1
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	4613      	mov	r3, r2
 8000658:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ffad 	bl	80005bc <Read_MFRC522>
 8000662:	4603      	mov	r3, r0
 8000664:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000666:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800066a:	43db      	mvns	r3, r3
 800066c:	b25a      	sxtb	r2, r3
 800066e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000672:	4013      	ands	r3, r2
 8000674:	b25b      	sxtb	r3, r3
 8000676:	b2da      	uxtb	r2, r3
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff75 	bl	800056c <Write_MFRC522>
} 
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 800068e:	2014      	movs	r0, #20
 8000690:	f7ff ff94 	bl	80005bc <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000694:	2103      	movs	r1, #3
 8000696:	2014      	movs	r0, #20
 8000698:	f7ff ffbc 	bl	8000614 <SetBitMask>
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80006a4:	210f      	movs	r1, #15
 80006a6:	2001      	movs	r0, #1
 80006a8:	f7ff ff60 	bl	800056c <Write_MFRC522>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ba:	4813      	ldr	r0, [pc, #76]	@ (8000708 <MFRC522_Init+0x58>)
 80006bc:	f001 fa4a 	bl	8001b54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	@ 0x80
 80006c4:	4811      	ldr	r0, [pc, #68]	@ (800070c <MFRC522_Init+0x5c>)
 80006c6:	f001 fa45 	bl	8001b54 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80006ca:	f7ff ffe9 	bl	80006a0 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80006ce:	218d      	movs	r1, #141	@ 0x8d
 80006d0:	202a      	movs	r0, #42	@ 0x2a
 80006d2:	f7ff ff4b 	bl	800056c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80006d6:	213e      	movs	r1, #62	@ 0x3e
 80006d8:	202b      	movs	r0, #43	@ 0x2b
 80006da:	f7ff ff47 	bl	800056c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 80006de:	211e      	movs	r1, #30
 80006e0:	202d      	movs	r0, #45	@ 0x2d
 80006e2:	f7ff ff43 	bl	800056c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	202c      	movs	r0, #44	@ 0x2c
 80006ea:	f7ff ff3f 	bl	800056c <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	2015      	movs	r0, #21
 80006f2:	f7ff ff3b 	bl	800056c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 80006f6:	213d      	movs	r1, #61	@ 0x3d
 80006f8:	2011      	movs	r0, #17
 80006fa:	f7ff ff37 	bl	800056c <Write_MFRC522>

	AntennaOn();
 80006fe:	f7ff ffc4 	bl	800068a <AntennaOn>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40020400 	.word	0x40020400
 800070c:	40020800 	.word	0x40020800

08000710 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b089      	sub	sp, #36	@ 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4603      	mov	r3, r0
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	4613      	mov	r3, r2
 8000720:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000722:	2302      	movs	r3, #2
 8000724:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 800072a:	2300      	movs	r3, #0
 800072c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b0c      	cmp	r3, #12
 8000732:	d006      	beq.n	8000742 <MFRC522_ToCard+0x32>
 8000734:	2b0e      	cmp	r3, #14
 8000736:	d109      	bne.n	800074c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000738:	2312      	movs	r3, #18
 800073a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 800073c:	2310      	movs	r3, #16
 800073e:	777b      	strb	r3, [r7, #29]
			break;
 8000740:	e005      	b.n	800074e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000742:	2377      	movs	r3, #119	@ 0x77
 8000744:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000746:	2330      	movs	r3, #48	@ 0x30
 8000748:	777b      	strb	r3, [r7, #29]
			break;
 800074a:	e000      	b.n	800074e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 800074c:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 800074e:	7fbb      	ldrb	r3, [r7, #30]
 8000750:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff ff07 	bl	800056c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 800075e:	2180      	movs	r1, #128	@ 0x80
 8000760:	2004      	movs	r0, #4
 8000762:	f7ff ff72 	bl	800064a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	200a      	movs	r0, #10
 800076a:	f7ff ff53 	bl	8000614 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 800076e:	2100      	movs	r1, #0
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fefb 	bl	800056c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
 800077a:	e00a      	b.n	8000792 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 800077c:	68ba      	ldr	r2, [r7, #8]
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	2009      	movs	r0, #9
 8000788:	f7ff fef0 	bl	800056c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	3301      	adds	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	429a      	cmp	r2, r3
 8000798:	d3f0      	bcc.n	800077c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4619      	mov	r1, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fee4 	bl	800056c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	2b0c      	cmp	r3, #12
 80007a8:	d103      	bne.n	80007b2 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 80007aa:	2180      	movs	r1, #128	@ 0x80
 80007ac:	200d      	movs	r0, #13
 80007ae:	f7ff ff31 	bl	8000614 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80007b2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80007b6:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff feff 	bl	80005bc <Read_MFRC522>
 80007be:	4603      	mov	r3, r0
 80007c0:	773b      	strb	r3, [r7, #28]
        i--;
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00a      	beq.n	80007e4 <MFRC522_ToCard+0xd4>
 80007ce:	7f3b      	ldrb	r3, [r7, #28]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d105      	bne.n	80007e4 <MFRC522_ToCard+0xd4>
 80007d8:	7f3a      	ldrb	r2, [r7, #28]
 80007da:	7f7b      	ldrb	r3, [r7, #29]
 80007dc:	4013      	ands	r3, r2
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0e9      	beq.n	80007b8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	200d      	movs	r0, #13
 80007e8:	f7ff ff2f 	bl	800064a <ClearBitMask>
	
    if (i != 0)
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d052      	beq.n	8000898 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80007f2:	2006      	movs	r0, #6
 80007f4:	f7ff fee2 	bl	80005bc <Read_MFRC522>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f003 031b 	and.w	r3, r3, #27
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d148      	bne.n	8000894 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000802:	2300      	movs	r3, #0
 8000804:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000806:	7f3a      	ldrb	r2, [r7, #28]
 8000808:	7fbb      	ldrb	r3, [r7, #30]
 800080a:	4013      	ands	r3, r2
 800080c:	b2db      	uxtb	r3, r3
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8000816:	2301      	movs	r3, #1
 8000818:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	2b0c      	cmp	r3, #12
 800081e:	d13b      	bne.n	8000898 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000820:	200a      	movs	r0, #10
 8000822:	f7ff fecb 	bl	80005bc <Read_MFRC522>
 8000826:	4603      	mov	r3, r0
 8000828:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800082a:	200c      	movs	r0, #12
 800082c:	f7ff fec6 	bl	80005bc <Read_MFRC522>
 8000830:	4603      	mov	r3, r0
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d008      	beq.n	8000850 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800083e:	7f3b      	ldrb	r3, [r7, #28]
 8000840:	3b01      	subs	r3, #1
 8000842:	00da      	lsls	r2, r3, #3
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	4413      	add	r3, r2
 8000848:	461a      	mov	r2, r3
 800084a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	e004      	b.n	800085a <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8000850:	7f3b      	ldrb	r3, [r7, #28]
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	461a      	mov	r2, r3
 8000856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000858:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800085a:	7f3b      	ldrb	r3, [r7, #28]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8000860:	2301      	movs	r3, #1
 8000862:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8000864:	7f3b      	ldrb	r3, [r7, #28]
 8000866:	2b10      	cmp	r3, #16
 8000868:	d901      	bls.n	800086e <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 800086a:	2310      	movs	r3, #16
 800086c:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
 8000872:	e00a      	b.n	800088a <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	18d4      	adds	r4, r2, r3
 800087a:	2009      	movs	r0, #9
 800087c:	f7ff fe9e 	bl	80005bc <Read_MFRC522>
 8000880:	4603      	mov	r3, r0
 8000882:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	3301      	adds	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	7f3b      	ldrb	r3, [r7, #28]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3f0      	bcc.n	8000874 <MFRC522_ToCard+0x164>
 8000892:	e001      	b.n	8000898 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8000894:	2302      	movs	r3, #2
 8000896:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8000898:	7ffb      	ldrb	r3, [r7, #31]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3724      	adds	r7, #36	@ 0x24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd90      	pop	{r4, r7, pc}

080008a2 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af02      	add	r7, sp, #8
 80008a8:	4603      	mov	r3, r0
 80008aa:	6039      	str	r1, [r7, #0]
 80008ac:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 80008ae:	2107      	movs	r1, #7
 80008b0:	200d      	movs	r0, #13
 80008b2:	f7ff fe5b 	bl	800056c <Write_MFRC522>
	
	TagType[0] = reqMode;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	2201      	movs	r2, #1
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	200c      	movs	r0, #12
 80008ca:	f7ff ff21 	bl	8000710 <MFRC522_ToCard>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d102      	bne.n	80008de <MFRC522_Request+0x3c>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	2b10      	cmp	r3, #16
 80008dc:	d001      	beq.n	80008e2 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 80008de:	2302      	movs	r3, #2
 80008e0:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80008f8:	2100      	movs	r1, #0
 80008fa:	200d      	movs	r0, #13
 80008fc:	f7ff fe36 	bl	800056c <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2293      	movs	r2, #147	@ 0x93
 8000904:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	2220      	movs	r2, #32
 800090c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2202      	movs	r2, #2
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	200c      	movs	r0, #12
 800091c:	f7ff fef8 	bl	8000710 <MFRC522_ToCard>
 8000920:	4603      	mov	r3, r0
 8000922:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d118      	bne.n	800095c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 800092a:	2300      	movs	r3, #0
 800092c:	73bb      	strb	r3, [r7, #14]
 800092e:	e009      	b.n	8000944 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8000930:	7bbb      	ldrb	r3, [r7, #14]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	7b7b      	ldrb	r3, [r7, #13]
 800093a:	4053      	eors	r3, r2
 800093c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800093e:	7bbb      	ldrb	r3, [r7, #14]
 8000940:	3301      	adds	r3, #1
 8000942:	73bb      	strb	r3, [r7, #14]
 8000944:	7bbb      	ldrb	r3, [r7, #14]
 8000946:	2b03      	cmp	r3, #3
 8000948:	d9f2      	bls.n	8000930 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	7b7a      	ldrb	r2, [r7, #13]
 8000954:	429a      	cmp	r2, r3
 8000956:	d001      	beq.n	800095c <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8000958:	2302      	movs	r3, #2
 800095a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
} 
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a30      	ldr	r2, [pc, #192]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a29      	ldr	r2, [pc, #164]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b27      	ldr	r3, [pc, #156]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a22      	ldr	r2, [pc, #136]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_GPIO_Init+0xe0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2180      	movs	r1, #128	@ 0x80
 80009f2:	4816      	ldr	r0, [pc, #88]	@ (8000a4c <MX_GPIO_Init+0xe4>)
 80009f4:	f001 f8ae 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80009fe:	4814      	ldr	r0, [pc, #80]	@ (8000a50 <MX_GPIO_Init+0xe8>)
 8000a00:	f001 f8a8 	bl	8001b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a04:	2380      	movs	r3, #128	@ 0x80
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <MX_GPIO_Init+0xe4>)
 8000a1c:	f000 ff06 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8000a20:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_GPIO_Init+0xe8>)
 8000a3a:	f000 fef7 	bl	800182c <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	@ 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020800 	.word	0x40020800
 8000a50:	40020400 	.word	0x40020400

08000a54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a5a:	4a13      	ldr	r2, [pc, #76]	@ (8000aa8 <MX_I2C1_Init+0x54>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a60:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <MX_I2C1_Init+0x58>)
 8000a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <MX_I2C1_Init+0x50>)
 8000a92:	f001 f879 	bl	8001b88 <HAL_I2C_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a9c:	f000 f966 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000030 	.word	0x20000030
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	00061a80 	.word	0x00061a80

08000ab0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	@ (8000b34 <HAL_I2C_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12c      	bne.n	8000b2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_I2C_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a17      	ldr	r2, [pc, #92]	@ (8000b38 <HAL_I2C_MspInit+0x88>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000aee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af4:	2312      	movs	r3, #18
 8000af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b00:	2304      	movs	r3, #4
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480c      	ldr	r0, [pc, #48]	@ (8000b3c <HAL_I2C_MspInit+0x8c>)
 8000b0c:	f000 fe8e 	bl	800182c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <HAL_I2C_MspInit+0x88>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	4a07      	ldr	r2, [pc, #28]	@ (8000b38 <HAL_I2C_MspInit+0x88>)
 8000b1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40005400 	.word	0x40005400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020400 	.word	0x40020400

08000b40 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b46:	f000 fcf5 	bl	8001534 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b4a:	f000 f8a1 	bl	8000c90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b4e:	f7ff ff0b 	bl	8000968 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000b52:	f000 f911 	bl	8000d78 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000b56:	f000 fc51 	bl	80013fc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000b5a:	f7ff ff7b 	bl	8000a54 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	MFRC522_Init();
 8000b5e:	f7ff fda7 	bl	80006b0 <MFRC522_Init>
	ssd1306_Init();
 8000b62:	f000 f9e1 	bl	8000f28 <ssd1306_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_UART_Transmit(&huart2, (uint8_t*) msg2, strlen(msg1), HAL_MAX_DELAY);
 8000b66:	4b40      	ldr	r3, [pc, #256]	@ (8000c68 <main+0x128>)
 8000b68:	681c      	ldr	r4, [r3, #0]
 8000b6a:	4b40      	ldr	r3, [pc, #256]	@ (8000c6c <main+0x12c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fb48 	bl	8000204 <strlen>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7c:	4621      	mov	r1, r4
 8000b7e:	483c      	ldr	r0, [pc, #240]	@ (8000c70 <main+0x130>)
 8000b80:	f002 fd70 	bl	8003664 <HAL_UART_Transmit>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		status = MFRC522_Request(PICC_REQIDL, str);
 8000b84:	493b      	ldr	r1, [pc, #236]	@ (8000c74 <main+0x134>)
 8000b86:	2026      	movs	r0, #38	@ 0x26
 8000b88:	f7ff fe8b 	bl	80008a2 <MFRC522_Request>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4b39      	ldr	r3, [pc, #228]	@ (8000c78 <main+0x138>)
 8000b92:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(str);
 8000b94:	4837      	ldr	r0, [pc, #220]	@ (8000c74 <main+0x134>)
 8000b96:	f7ff fea9 	bl	80008ec <MFRC522_Anticoll>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b36      	ldr	r3, [pc, #216]	@ (8000c78 <main+0x138>)
 8000ba0:	701a      	strb	r2, [r3, #0]
		memcpy(sNum, str, 4);
 8000ba2:	4b34      	ldr	r3, [pc, #208]	@ (8000c74 <main+0x134>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a35      	ldr	r2, [pc, #212]	@ (8000c7c <main+0x13c>)
 8000ba8:	6013      	str	r3, [r2, #0]
		HAL_Delay(200);
 8000baa:	20c8      	movs	r0, #200	@ 0xc8
 8000bac:	f000 fd34 	bl	8001618 <HAL_Delay>
		if ((str[0] == 0x75) && (str[1] == 0xED) && (str[2] == 0xE7)
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <main+0x134>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b75      	cmp	r3, #117	@ 0x75
 8000bb6:	d120      	bne.n	8000bfa <main+0xba>
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c74 <main+0x134>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	2bed      	cmp	r3, #237	@ 0xed
 8000bbe:	d11c      	bne.n	8000bfa <main+0xba>
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c74 <main+0x134>)
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	2be7      	cmp	r3, #231	@ 0xe7
 8000bc6:	d118      	bne.n	8000bfa <main+0xba>
				&& (str[3] == 0x2B)) {
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <main+0x134>)
 8000bca:	78db      	ldrb	r3, [r3, #3]
 8000bcc:	2b2b      	cmp	r3, #43	@ 0x2b
 8000bce:	d114      	bne.n	8000bfa <main+0xba>
			ssd1306_Fill(Black);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 fa13 	bl	8000ffc <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 fb5b 	bl	8001294 <ssd1306_SetCursor>
			ssd1306_WriteString("Kartica ocitana!", Font_6x8, White);
 8000bde:	4b28      	ldr	r3, [pc, #160]	@ (8000c80 <main+0x140>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	9200      	str	r2, [sp, #0]
 8000be4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000be6:	4827      	ldr	r0, [pc, #156]	@ (8000c84 <main+0x144>)
 8000be8:	f000 fb2e 	bl	8001248 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000bec:	f000 fa1e 	bl	800102c <ssd1306_UpdateScreen>
			HAL_Delay(5000);
 8000bf0:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000bf4:	f000 fd10 	bl	8001618 <HAL_Delay>
 8000bf8:	e034      	b.n	8000c64 <main+0x124>
		} else if ((str[0] != 0x75) && (str[1] != 0xED) && (str[2] != 0xE7)
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000c74 <main+0x134>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b75      	cmp	r3, #117	@ 0x75
 8000c00:	d020      	beq.n	8000c44 <main+0x104>
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <main+0x134>)
 8000c04:	785b      	ldrb	r3, [r3, #1]
 8000c06:	2bed      	cmp	r3, #237	@ 0xed
 8000c08:	d01c      	beq.n	8000c44 <main+0x104>
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <main+0x134>)
 8000c0c:	789b      	ldrb	r3, [r3, #2]
 8000c0e:	2be7      	cmp	r3, #231	@ 0xe7
 8000c10:	d018      	beq.n	8000c44 <main+0x104>
				&& (str[3] != 0x2B)) {
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <main+0x134>)
 8000c14:	78db      	ldrb	r3, [r3, #3]
 8000c16:	2b2b      	cmp	r3, #43	@ 0x2b
 8000c18:	d014      	beq.n	8000c44 <main+0x104>
			ssd1306_Fill(Black);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 f9ee 	bl	8000ffc <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000c20:	2100      	movs	r1, #0
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 fb36 	bl	8001294 <ssd1306_SetCursor>
			ssd1306_WriteString("Pogresna kartica!.", Font_6x8, White);
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <main+0x140>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	9200      	str	r2, [sp, #0]
 8000c2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c30:	4815      	ldr	r0, [pc, #84]	@ (8000c88 <main+0x148>)
 8000c32:	f000 fb09 	bl	8001248 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000c36:	f000 f9f9 	bl	800102c <ssd1306_UpdateScreen>
			HAL_Delay(5000);
 8000c3a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c3e:	f000 fceb 	bl	8001618 <HAL_Delay>
 8000c42:	e00f      	b.n	8000c64 <main+0x124>
		}

		else {
			ssd1306_Fill(Black);
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f9d9 	bl	8000ffc <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 fb21 	bl	8001294 <ssd1306_SetCursor>
			ssd1306_WriteString("Prislonite karticu.", Font_6x8, White);
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <main+0x140>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c5a:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <main+0x14c>)
 8000c5c:	f000 faf4 	bl	8001248 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8000c60:	f000 f9e4 	bl	800102c <ssd1306_UpdateScreen>
		status = MFRC522_Request(PICC_REQIDL, str);
 8000c64:	e78e      	b.n	8000b84 <main+0x44>
 8000c66:	bf00      	nop
 8000c68:	20000004 	.word	0x20000004
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	200004fc 	.word	0x200004fc
 8000c74:	20000088 	.word	0x20000088
 8000c78:	20000084 	.word	0x20000084
 8000c7c:	20000098 	.word	0x20000098
 8000c80:	080044a4 	.word	0x080044a4
 8000c84:	08003e78 	.word	0x08003e78
 8000c88:	08003e8c 	.word	0x08003e8c
 8000c8c:	08003ea0 	.word	0x08003ea0

08000c90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b094      	sub	sp, #80	@ 0x50
 8000c94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2234      	movs	r2, #52	@ 0x34
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 f89c 	bl	8003ddc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d64 <SystemClock_Config+0xd4>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	4a29      	ldr	r2, [pc, #164]	@ (8000d64 <SystemClock_Config+0xd4>)
 8000cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc4:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <SystemClock_Config+0xd4>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	4b24      	ldr	r3, [pc, #144]	@ (8000d68 <SystemClock_Config+0xd8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cdc:	4a22      	ldr	r2, [pc, #136]	@ (8000d68 <SystemClock_Config+0xd8>)
 8000cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <SystemClock_Config+0xd8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000d04:	2308      	movs	r3, #8
 8000d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 64;
 8000d08:	2340      	movs	r3, #64	@ 0x40
 8000d0a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fea5 	bl	8002a6c <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x9c>
		Error_Handler();
 8000d28:	f000 f820 	bl	8000d6c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2302      	movs	r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000d34:	2390      	movs	r3, #144	@ 0x90
 8000d36:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d38:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d3c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d42:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fbca 	bl	80024e4 <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xca>
		Error_Handler();
 8000d56:	f000 f809 	bl	8000d6c <Error_Handler>
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	3750      	adds	r7, #80	@ 0x50
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000

08000d6c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d7e:	4a18      	ldr	r2, [pc, #96]	@ (8000de0 <MX_SPI1_Init+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d82:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000da4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dac:	2218      	movs	r2, #24
 8000dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db6:	4b09      	ldr	r3, [pc, #36]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dc4:	220a      	movs	r2, #10
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <MX_SPI1_Init+0x64>)
 8000dca:	f002 f8ed 	bl	8002fa8 <HAL_SPI_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dd4:	f7ff ffca 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000009c 	.word	0x2000009c
 8000de0:	40013000 	.word	0x40013000

08000de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a28      	ldr	r2, [pc, #160]	@ (8000ea4 <HAL_SPI_MspInit+0xc0>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d149      	bne.n	8000e9a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	4a26      	ldr	r2, [pc, #152]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e16:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a18      	ldr	r2, [pc, #96]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <HAL_SPI_MspInit+0xc4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	23c0      	movs	r3, #192	@ 0xc0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	480d      	ldr	r0, [pc, #52]	@ (8000eac <HAL_SPI_MspInit+0xc8>)
 8000e76:	f000 fcd9 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4806      	ldr	r0, [pc, #24]	@ (8000eb0 <HAL_SPI_MspInit+0xcc>)
 8000e96:	f000 fcc9 	bl	800182c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40013000 	.word	0x40013000
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020400 	.word	0x40020400

08000eb4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af04      	add	r7, sp, #16
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2178      	movs	r1, #120	@ 0x78
 8000ee2:	4803      	ldr	r0, [pc, #12]	@ (8000ef0 <ssd1306_WriteCommand+0x2c>)
 8000ee4:	f000 ff94 	bl	8001e10 <HAL_I2C_Mem_Write>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000030 	.word	0x20000030

08000ef4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af04      	add	r7, sp, #16
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	f04f 32ff 	mov.w	r2, #4294967295
 8000f06:	9202      	str	r2, [sp, #8]
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	2240      	movs	r2, #64	@ 0x40
 8000f12:	2178      	movs	r1, #120	@ 0x78
 8000f14:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <ssd1306_WriteData+0x30>)
 8000f16:	f000 ff7b 	bl	8001e10 <HAL_I2C_Mem_Write>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000030 	.word	0x20000030

08000f28 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f2c:	f7ff ffc2 	bl	8000eb4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f30:	2064      	movs	r0, #100	@ 0x64
 8000f32:	f000 fb71 	bl	8001618 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f9d8 	bl	80012ec <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f3c:	2020      	movs	r0, #32
 8000f3e:	f7ff ffc1 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ffbe 	bl	8000ec4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000f48:	20b0      	movs	r0, #176	@ 0xb0
 8000f4a:	f7ff ffbb 	bl	8000ec4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000f4e:	20c8      	movs	r0, #200	@ 0xc8
 8000f50:	f7ff ffb8 	bl	8000ec4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ffb5 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f5a:	2010      	movs	r0, #16
 8000f5c:	f7ff ffb2 	bl	8000ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f60:	2040      	movs	r0, #64	@ 0x40
 8000f62:	f7ff ffaf 	bl	8000ec4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f66:	20ff      	movs	r0, #255	@ 0xff
 8000f68:	f000 f9ac 	bl	80012c4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f6c:	20a1      	movs	r0, #161	@ 0xa1
 8000f6e:	f7ff ffa9 	bl	8000ec4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f72:	20a6      	movs	r0, #166	@ 0xa6
 8000f74:	f7ff ffa6 	bl	8000ec4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f78:	20a8      	movs	r0, #168	@ 0xa8
 8000f7a:	f7ff ffa3 	bl	8000ec4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000f7e:	203f      	movs	r0, #63	@ 0x3f
 8000f80:	f7ff ffa0 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000f84:	20a4      	movs	r0, #164	@ 0xa4
 8000f86:	f7ff ff9d 	bl	8000ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000f8a:	20d3      	movs	r0, #211	@ 0xd3
 8000f8c:	f7ff ff9a 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000f90:	2000      	movs	r0, #0
 8000f92:	f7ff ff97 	bl	8000ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000f96:	20d5      	movs	r0, #213	@ 0xd5
 8000f98:	f7ff ff94 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000f9c:	20f0      	movs	r0, #240	@ 0xf0
 8000f9e:	f7ff ff91 	bl	8000ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fa2:	20d9      	movs	r0, #217	@ 0xd9
 8000fa4:	f7ff ff8e 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000fa8:	2022      	movs	r0, #34	@ 0x22
 8000faa:	f7ff ff8b 	bl	8000ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000fae:	20da      	movs	r0, #218	@ 0xda
 8000fb0:	f7ff ff88 	bl	8000ec4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000fb4:	2012      	movs	r0, #18
 8000fb6:	f7ff ff85 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000fba:	20db      	movs	r0, #219	@ 0xdb
 8000fbc:	f7ff ff82 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000fc0:	2020      	movs	r0, #32
 8000fc2:	f7ff ff7f 	bl	8000ec4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000fc6:	208d      	movs	r0, #141	@ 0x8d
 8000fc8:	f7ff ff7c 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000fcc:	2014      	movs	r0, #20
 8000fce:	f7ff ff79 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f000 f98a 	bl	80012ec <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 f80f 	bl	8000ffc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000fde:	f000 f825 	bl	800102c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <ssd1306_Init+0xd0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <ssd1306_Init+0xd0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000fee:	4b02      	ldr	r3, [pc, #8]	@ (8000ff8 <ssd1306_Init+0xd0>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	711a      	strb	r2, [r3, #4]
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200004f4 	.word	0x200004f4

08000ffc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d101      	bne.n	8001010 <ssd1306_Fill+0x14>
 800100c:	2300      	movs	r3, #0
 800100e:	e000      	b.n	8001012 <ssd1306_Fill+0x16>
 8001010:	23ff      	movs	r3, #255	@ 0xff
 8001012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001016:	4619      	mov	r1, r3
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <ssd1306_Fill+0x2c>)
 800101a:	f002 fedf 	bl	8003ddc <memset>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000f4 	.word	0x200000f4

0800102c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	e016      	b.n	8001066 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	3b50      	subs	r3, #80	@ 0x50
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff40 	bl	8000ec4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff ff3d 	bl	8000ec4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800104a:	2010      	movs	r0, #16
 800104c:	f7ff ff3a 	bl	8000ec4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	01db      	lsls	r3, r3, #7
 8001054:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <ssd1306_UpdateScreen+0x4c>)
 8001056:	4413      	add	r3, r2
 8001058:	2180      	movs	r1, #128	@ 0x80
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff4a 	bl	8000ef4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	3301      	adds	r3, #1
 8001064:	71fb      	strb	r3, [r7, #7]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b07      	cmp	r3, #7
 800106a:	d9e5      	bls.n	8001038 <ssd1306_UpdateScreen+0xc>
    }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000f4 	.word	0x200000f4

0800107c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	460b      	mov	r3, r1
 8001088:	71bb      	strb	r3, [r7, #6]
 800108a:	4613      	mov	r3, r2
 800108c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db3d      	blt.n	8001112 <ssd1306_DrawPixel+0x96>
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2b3f      	cmp	r3, #63	@ 0x3f
 800109a:	d83a      	bhi.n	8001112 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800109c:	797b      	ldrb	r3, [r7, #5]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d11a      	bne.n	80010d8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	b2d8      	uxtb	r0, r3
 80010aa:	4603      	mov	r3, r0
 80010ac:	01db      	lsls	r3, r3, #7
 80010ae:	4413      	add	r3, r2
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <ssd1306_DrawPixel+0xa4>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	b25a      	sxtb	r2, r3
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	b25b      	sxtb	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b259      	sxtb	r1, r3
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	4603      	mov	r3, r0
 80010cc:	01db      	lsls	r3, r3, #7
 80010ce:	4413      	add	r3, r2
 80010d0:	b2c9      	uxtb	r1, r1
 80010d2:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <ssd1306_DrawPixel+0xa4>)
 80010d4:	54d1      	strb	r1, [r2, r3]
 80010d6:	e01d      	b.n	8001114 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	b2d8      	uxtb	r0, r3
 80010e0:	4603      	mov	r3, r0
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	4413      	add	r3, r2
 80010e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <ssd1306_DrawPixel+0xa4>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	79bb      	ldrb	r3, [r7, #6]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	4013      	ands	r3, r2
 8001100:	b259      	sxtb	r1, r3
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	4603      	mov	r3, r0
 8001106:	01db      	lsls	r3, r3, #7
 8001108:	4413      	add	r3, r2
 800110a:	b2c9      	uxtb	r1, r1
 800110c:	4a04      	ldr	r2, [pc, #16]	@ (8001120 <ssd1306_DrawPixel+0xa4>)
 800110e:	54d1      	strb	r1, [r2, r3]
 8001110:	e000      	b.n	8001114 <ssd1306_DrawPixel+0x98>
        return;
 8001112:	bf00      	nop
    }
}
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200000f4 	.word	0x200000f4

08001124 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	4604      	mov	r4, r0
 800112c:	4638      	mov	r0, r7
 800112e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001132:	4623      	mov	r3, r4
 8001134:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b1f      	cmp	r3, #31
 800113a:	d902      	bls.n	8001142 <ssd1306_WriteChar+0x1e>
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001140:	d901      	bls.n	8001146 <ssd1306_WriteChar+0x22>
        return 0;
 8001142:	2300      	movs	r3, #0
 8001144:	e079      	b.n	800123a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <ssd1306_WriteChar+0x34>
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	3b20      	subs	r3, #32
 8001152:	4413      	add	r3, r2
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	e000      	b.n	800115a <ssd1306_WriteChar+0x36>
 8001158:	783b      	ldrb	r3, [r7, #0]
 800115a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800115c:	4b39      	ldr	r3, [pc, #228]	@ (8001244 <ssd1306_WriteChar+0x120>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	4413      	add	r3, r2
 8001166:	2b80      	cmp	r3, #128	@ 0x80
 8001168:	dc06      	bgt.n	8001178 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800116a:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <ssd1306_WriteChar+0x120>)
 800116c:	885b      	ldrh	r3, [r3, #2]
 800116e:	461a      	mov	r2, r3
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001174:	2b40      	cmp	r3, #64	@ 0x40
 8001176:	dd01      	ble.n	800117c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001178:	2300      	movs	r3, #0
 800117a:	e05e      	b.n	800123a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	e04d      	b.n	800121e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	3b20      	subs	r3, #32
 8001188:	7879      	ldrb	r1, [r7, #1]
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	4619      	mov	r1, r3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	440b      	add	r3, r1
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	e036      	b.n	8001210 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d013      	beq.n	80011da <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <ssd1306_WriteChar+0x120>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4413      	add	r3, r2
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <ssd1306_WriteChar+0x120>)
 80011c2:	885b      	ldrh	r3, [r3, #2]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff ff52 	bl	800107c <ssd1306_DrawPixel>
 80011d8:	e017      	b.n	800120a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <ssd1306_WriteChar+0x120>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	b2d8      	uxtb	r0, r3
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <ssd1306_WriteChar+0x120>)
 80011ea:	885b      	ldrh	r3, [r3, #2]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4413      	add	r3, r2
 80011f4:	b2d9      	uxtb	r1, r3
 80011f6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf0c      	ite	eq
 80011fe:	2301      	moveq	r3, #1
 8001200:	2300      	movne	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	f7ff ff39 	bl	800107c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	3301      	adds	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3c4      	bcc.n	80011a2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	3301      	adds	r3, #1
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	787b      	ldrb	r3, [r7, #1]
 8001220:	461a      	mov	r2, r3
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	4293      	cmp	r3, r2
 8001226:	d3ac      	bcc.n	8001182 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <ssd1306_WriteChar+0x120>)
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4413      	add	r3, r2
 8001232:	b29a      	uxth	r2, r3
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <ssd1306_WriteChar+0x120>)
 8001236:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	200004f4 	.word	0x200004f4

08001248 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	4638      	mov	r0, r7
 8001252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001256:	e013      	b.n	8001280 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	7818      	ldrb	r0, [r3, #0]
 800125c:	7e3b      	ldrb	r3, [r7, #24]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	463b      	mov	r3, r7
 8001262:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001264:	f7ff ff5e 	bl	8001124 <ssd1306_WriteChar>
 8001268:	4603      	mov	r3, r0
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d002      	beq.n	800127a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	e008      	b.n	800128c <ssd1306_WriteString+0x44>
        }
        str++;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e7      	bne.n	8001258 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	781b      	ldrb	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	460a      	mov	r2, r1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	4613      	mov	r3, r2
 80012a2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <ssd1306_SetCursor+0x2c>)
 80012aa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80012ac:	79bb      	ldrb	r3, [r7, #6]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <ssd1306_SetCursor+0x2c>)
 80012b2:	805a      	strh	r2, [r3, #2]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	200004f4 	.word	0x200004f4

080012c4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80012ce:	2381      	movs	r3, #129	@ 0x81
 80012d0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fdf5 	bl	8000ec4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fdf1 	bl	8000ec4 <ssd1306_WriteCommand>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80012fc:	23af      	movs	r3, #175	@ 0xaf
 80012fe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <ssd1306_SetDisplayOn+0x38>)
 8001302:	2201      	movs	r2, #1
 8001304:	715a      	strb	r2, [r3, #5]
 8001306:	e004      	b.n	8001312 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001308:	23ae      	movs	r3, #174	@ 0xae
 800130a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <ssd1306_SetDisplayOn+0x38>)
 800130e:	2200      	movs	r2, #0
 8001310:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fdd5 	bl	8000ec4 <ssd1306_WriteCommand>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	200004f4 	.word	0x200004f4

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <HAL_MspInit+0x4c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_MspInit+0x4c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <NMI_Handler+0x4>

08001380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <BusFault_Handler+0x4>

08001398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <UsageFault_Handler+0x4>

080013a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ce:	f000 f903 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <SystemInit+0x20>)
 80013de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <SystemInit+0x20>)
 80013e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001400:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001402:	4a12      	ldr	r2, [pc, #72]	@ (800144c <MX_USART2_UART_Init+0x50>)
 8001404:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001408:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800140c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001422:	220c      	movs	r2, #12
 8001424:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 800142e:	2200      	movs	r2, #0
 8001430:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_USART2_UART_Init+0x4c>)
 8001434:	f002 f8c6 	bl	80035c4 <HAL_UART_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800143e:	f7ff fc95 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200004fc 	.word	0x200004fc
 800144c:	40004400 	.word	0x40004400

08001450 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	@ 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <HAL_UART_MspInit+0x84>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d12b      	bne.n	80014ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 800147c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001480:	6413      	str	r3, [r2, #64]	@ 0x40
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <HAL_UART_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014aa:	230c      	movs	r3, #12
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ba:	2307      	movs	r3, #7
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4805      	ldr	r0, [pc, #20]	@ (80014dc <HAL_UART_MspInit+0x8c>)
 80014c6:	f000 f9b1 	bl	800182c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	@ 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020000 	.word	0x40020000

080014e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001518 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014e4:	f7ff ff78 	bl	80013d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	@ (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	@ (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	@ (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800150e:	f002 fc6d 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001512:	f7ff fb15 	bl	8000b40 <main>
  bx  lr    
 8001516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001524:	080044d8 	.word	0x080044d8
  ldr r2, =_sbss
 8001528:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800152c:	20000548 	.word	0x20000548

08001530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001538:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0d      	ldr	r2, [pc, #52]	@ (8001574 <HAL_Init+0x40>)
 800153e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_Init+0x40>)
 800154a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800154e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <HAL_Init+0x40>)
 8001556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155c:	2003      	movs	r0, #3
 800155e:	f000 f931 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001562:	200f      	movs	r0, #15
 8001564:	f000 f808 	bl	8001578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001568:	f7ff fede 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023c00 	.word	0x40023c00

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x54>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <HAL_InitTick+0x58>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f93b 	bl	8001812 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f000 f911 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <HAL_InitTick+0x5c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000010 	.word	0x20000010
 80015d4:	2000000c 	.word	0x2000000c

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000010 	.word	0x20000010
 80015fc:	20000544 	.word	0x20000544

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000544 	.word	0x20000544

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff ffee 	bl	8001600 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffde 	bl	8001600 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000010 	.word	0x20000010

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800168c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001692:	4a04      	ldr	r2, [pc, #16]	@ (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	60d3      	str	r3, [r2, #12]
}
 8001698:	bf00      	nop
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	@ (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	@ (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff47 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff5c 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffb0 	bl	8001780 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	@ 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	e165      	b.n	8001b14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001848:	2201      	movs	r2, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	429a      	cmp	r2, r3
 8001862:	f040 8154 	bne.w	8001b0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d005      	beq.n	800187e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187a:	2b02      	cmp	r3, #2
 800187c:	d130      	bne.n	80018e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 0201 	and.w	r2, r3, #1
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d017      	beq.n	800191c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d123      	bne.n	8001970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	08da      	lsrs	r2, r3, #3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3208      	adds	r2, #8
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	691a      	ldr	r2, [r3, #16]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	08da      	lsrs	r2, r3, #3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3208      	adds	r2, #8
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	2203      	movs	r2, #3
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80ae 	beq.w	8001b0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b2c <HAL_GPIO_Init+0x300>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	4a5c      	ldr	r2, [pc, #368]	@ (8001b2c <HAL_GPIO_Init+0x300>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c2:	4b5a      	ldr	r3, [pc, #360]	@ (8001b2c <HAL_GPIO_Init+0x300>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ce:	4a58      	ldr	r2, [pc, #352]	@ (8001b30 <HAL_GPIO_Init+0x304>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001b34 <HAL_GPIO_Init+0x308>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d025      	beq.n	8001a46 <HAL_GPIO_Init+0x21a>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001b38 <HAL_GPIO_Init+0x30c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x216>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4d      	ldr	r2, [pc, #308]	@ (8001b3c <HAL_GPIO_Init+0x310>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x212>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b40 <HAL_GPIO_Init+0x314>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x20e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4b      	ldr	r2, [pc, #300]	@ (8001b44 <HAL_GPIO_Init+0x318>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x20a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b48 <HAL_GPIO_Init+0x31c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x206>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a49      	ldr	r2, [pc, #292]	@ (8001b4c <HAL_GPIO_Init+0x320>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x202>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x21c>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4935      	ldr	r1, [pc, #212]	@ (8001b30 <HAL_GPIO_Init+0x304>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a66:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8a:	4a31      	ldr	r2, [pc, #196]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a90:	4b2f      	ldr	r3, [pc, #188]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab4:	4a26      	ldr	r2, [pc, #152]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aba:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b08:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <HAL_GPIO_Init+0x324>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f ae96 	bls.w	8001848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40013800 	.word	0x40013800
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020c00 	.word	0x40020c00
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40021400 	.word	0x40021400
 8001b4c:	40021800 	.word	0x40021800
 8001b50:	40013c00 	.word	0x40013c00

08001b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	807b      	strh	r3, [r7, #2]
 8001b60:	4613      	mov	r3, r2
 8001b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b64:	787b      	ldrb	r3, [r7, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b70:	e003      	b.n	8001b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	619a      	str	r2, [r3, #24]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e12b      	b.n	8001df2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7fe ff7e 	bl	8000ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2224      	movs	r2, #36	@ 0x24
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bec:	f000 fd6c 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 8001bf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a81      	ldr	r2, [pc, #516]	@ (8001dfc <HAL_I2C_Init+0x274>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d807      	bhi.n	8001c0c <HAL_I2C_Init+0x84>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	4a80      	ldr	r2, [pc, #512]	@ (8001e00 <HAL_I2C_Init+0x278>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	bf94      	ite	ls
 8001c04:	2301      	movls	r3, #1
 8001c06:	2300      	movhi	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e006      	b.n	8001c1a <HAL_I2C_Init+0x92>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e04 <HAL_I2C_Init+0x27c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	bf94      	ite	ls
 8001c14:	2301      	movls	r3, #1
 8001c16:	2300      	movhi	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0e7      	b.n	8001df2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4a78      	ldr	r2, [pc, #480]	@ (8001e08 <HAL_I2C_Init+0x280>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0c9b      	lsrs	r3, r3, #18
 8001c2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a6a      	ldr	r2, [pc, #424]	@ (8001dfc <HAL_I2C_Init+0x274>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d802      	bhi.n	8001c5c <HAL_I2C_Init+0xd4>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	e009      	b.n	8001c70 <HAL_I2C_Init+0xe8>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	4a69      	ldr	r2, [pc, #420]	@ (8001e0c <HAL_I2C_Init+0x284>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	3301      	adds	r3, #1
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	495c      	ldr	r1, [pc, #368]	@ (8001dfc <HAL_I2C_Init+0x274>)
 8001c8c:	428b      	cmp	r3, r1
 8001c8e:	d819      	bhi.n	8001cc4 <HAL_I2C_Init+0x13c>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	1e59      	subs	r1, r3, #1
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9e:	1c59      	adds	r1, r3, #1
 8001ca0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ca4:	400b      	ands	r3, r1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00a      	beq.n	8001cc0 <HAL_I2C_Init+0x138>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1e59      	subs	r1, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb8:	3301      	adds	r3, #1
 8001cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cbe:	e051      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	e04f      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d111      	bne.n	8001cf0 <HAL_I2C_Init+0x168>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1e58      	subs	r0, r3, #1
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	440b      	add	r3, r1
 8001cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf0c      	ite	eq
 8001ce8:	2301      	moveq	r3, #1
 8001cea:	2300      	movne	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e012      	b.n	8001d16 <HAL_I2C_Init+0x18e>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1e58      	subs	r0, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	0099      	lsls	r1, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bf0c      	ite	eq
 8001d10:	2301      	moveq	r3, #1
 8001d12:	2300      	movne	r3, #0
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Init+0x196>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e022      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10e      	bne.n	8001d44 <HAL_I2C_Init+0x1bc>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1e58      	subs	r0, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	440b      	add	r3, r1
 8001d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d42:	e00f      	b.n	8001d64 <HAL_I2C_Init+0x1dc>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	0099      	lsls	r1, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	6809      	ldr	r1, [r1, #0]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6911      	ldr	r1, [r2, #16]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68d2      	ldr	r2, [r2, #12]
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	430b      	orrs	r3, r1
 8001da6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	000186a0 	.word	0x000186a0
 8001e00:	001e847f 	.word	0x001e847f
 8001e04:	003d08ff 	.word	0x003d08ff
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	4608      	mov	r0, r1
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	817b      	strh	r3, [r7, #10]
 8001e22:	460b      	mov	r3, r1
 8001e24:	813b      	strh	r3, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e2a:	f7ff fbe9 	bl	8001600 <HAL_GetTick>
 8001e2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b20      	cmp	r3, #32
 8001e3a:	f040 80d9 	bne.w	8001ff0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2319      	movs	r3, #25
 8001e44:	2201      	movs	r2, #1
 8001e46:	496d      	ldr	r1, [pc, #436]	@ (8001ffc <HAL_I2C_Mem_Write+0x1ec>)
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f971 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
 8001e56:	e0cc      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_I2C_Mem_Write+0x56>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0c5      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d007      	beq.n	8001e8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2221      	movs	r2, #33	@ 0x21
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2240      	movs	r2, #64	@ 0x40
 8001ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ebc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4a4d      	ldr	r2, [pc, #308]	@ (8002000 <HAL_I2C_Mem_Write+0x1f0>)
 8001ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ece:	88f8      	ldrh	r0, [r7, #6]
 8001ed0:	893a      	ldrh	r2, [r7, #8]
 8001ed2:	8979      	ldrh	r1, [r7, #10]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	4603      	mov	r3, r0
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f890 	bl	8002004 <I2C_RequestMemoryWrite>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d052      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e081      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fa36 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d107      	bne.n	8001f16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e06b      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d11b      	bne.n	8001f90 <HAL_I2C_Mem_Write+0x180>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d017      	beq.n	8001f90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1aa      	bne.n	8001eee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fa29 	bl	80023f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d107      	bne.n	8001fc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e016      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e000      	b.n	8001ff2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	00100002 	.word	0x00100002
 8002000:	ffff0000 	.word	0xffff0000

08002004 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4603      	mov	r3, r0
 8002014:	817b      	strh	r3, [r7, #10]
 8002016:	460b      	mov	r3, r1
 8002018:	813b      	strh	r3, [r7, #8]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800202c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	2200      	movs	r2, #0
 8002036:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f878 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00d      	beq.n	8002062 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002054:	d103      	bne.n	800205e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800205c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e05f      	b.n	8002122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002062:	897b      	ldrh	r3, [r7, #10]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002070:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	6a3a      	ldr	r2, [r7, #32]
 8002076:	492d      	ldr	r1, [pc, #180]	@ (800212c <I2C_RequestMemoryWrite+0x128>)
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f8d3 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e04c      	b.n	8002122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800209e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020a0:	6a39      	ldr	r1, [r7, #32]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f95e 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00d      	beq.n	80020ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d107      	bne.n	80020c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e02b      	b.n	8002122 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020ca:	88fb      	ldrh	r3, [r7, #6]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80020d0:	893b      	ldrh	r3, [r7, #8]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	611a      	str	r2, [r3, #16]
 80020da:	e021      	b.n	8002120 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80020dc:	893b      	ldrh	r3, [r7, #8]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ec:	6a39      	ldr	r1, [r7, #32]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f938 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00d      	beq.n	8002116 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d107      	bne.n	8002112 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002110:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e005      	b.n	8002122 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002116:	893b      	ldrh	r3, [r7, #8]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	00010002 	.word	0x00010002

08002130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	e048      	b.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d044      	beq.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7ff fa59 	bl	8001600 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d139      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	43da      	mvns	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	e00c      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	43da      	mvns	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d116      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e023      	b.n	800221c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	e00c      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d093      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002232:	e071      	b.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002242:	d123      	bne.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800225c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e067      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d041      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7ff f9b4 	bl	8001600 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d136      	bne.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10c      	bne.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e00b      	b.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e021      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10c      	bne.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e00b      	b.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f af6d 	bne.w	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002370:	e034      	b.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f886 	bl	8002484 <I2C_IsAcknowledgeFailed>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e034      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d028      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238a:	f7ff f939 	bl	8001600 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d302      	bcc.n	80023a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11d      	bne.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023aa:	2b80      	cmp	r3, #128	@ 0x80
 80023ac:	d016      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e007      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e6:	2b80      	cmp	r3, #128	@ 0x80
 80023e8:	d1c3      	bne.n	8002372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002400:	e034      	b.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f83e 	bl	8002484 <I2C_IsAcknowledgeFailed>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e034      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d028      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7ff f8f1 	bl	8001600 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	68ba      	ldr	r2, [r7, #8]
 8002426:	429a      	cmp	r2, r3
 8002428:	d302      	bcc.n	8002430 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11d      	bne.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d016      	beq.n	800246c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e007      	b.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b04      	cmp	r3, #4
 8002478:	d1c3      	bne.n	8002402 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249a:	d11b      	bne.n	80024d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c0:	f043 0204 	orr.w	r2, r3, #4
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0cc      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b68      	ldr	r3, [pc, #416]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d90c      	bls.n	8002520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b65      	ldr	r3, [pc, #404]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b63      	ldr	r3, [pc, #396]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0b8      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002538:	4b59      	ldr	r3, [pc, #356]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4a58      	ldr	r2, [pc, #352]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002542:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002550:	4b53      	ldr	r3, [pc, #332]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a52      	ldr	r2, [pc, #328]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002556:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800255a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800255c:	4b50      	ldr	r3, [pc, #320]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	494d      	ldr	r1, [pc, #308]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d044      	beq.n	8002604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b47      	ldr	r3, [pc, #284]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d119      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e07f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d003      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d107      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025a2:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e06f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	4b3b      	ldr	r3, [pc, #236]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e067      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b37      	ldr	r3, [pc, #220]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4934      	ldr	r1, [pc, #208]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025d4:	f7ff f814 	bl	8001600 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7ff f810 	bl	8001600 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e04f      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b2b      	ldr	r3, [pc, #172]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002604:	4b25      	ldr	r3, [pc, #148]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d20c      	bcs.n	800262c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b20      	ldr	r3, [pc, #128]	@ (800269c <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e032      	b.n	8002692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4916      	ldr	r1, [pc, #88]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	490e      	ldr	r1, [pc, #56]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800266a:	f000 f855 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 800266e:	4602      	mov	r2, r0
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	490a      	ldr	r1, [pc, #40]	@ (80026a4 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	5ccb      	ldrb	r3, [r1, r3]
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	4a09      	ldr	r2, [pc, #36]	@ (80026a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe ff74 	bl	8001578 <HAL_InitTick>

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	080044b0 	.word	0x080044b0
 80026a8:	20000008 	.word	0x20000008
 80026ac:	2000000c 	.word	0x2000000c

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000008 	.word	0x20000008

080026c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026cc:	f7ff fff0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	0a9b      	lsrs	r3, r3, #10
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	4903      	ldr	r1, [pc, #12]	@ (80026ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80026de:	5ccb      	ldrb	r3, [r1, r3]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40023800 	.word	0x40023800
 80026ec:	080044c0 	.word	0x080044c0

080026f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f4:	f7ff ffdc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0b5b      	lsrs	r3, r3, #13
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4903      	ldr	r1, [pc, #12]	@ (8002714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40023800 	.word	0x40023800
 8002714:	080044c0 	.word	0x080044c0

08002718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b0a6      	sub	sp, #152	@ 0x98
 800271e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800273e:	4bc8      	ldr	r3, [pc, #800]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b0c      	cmp	r3, #12
 8002748:	f200 817e 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x330>
 800274c:	a201      	add	r2, pc, #4	@ (adr r2, 8002754 <HAL_RCC_GetSysClockFreq+0x3c>)
 800274e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002752:	bf00      	nop
 8002754:	08002789 	.word	0x08002789
 8002758:	08002a49 	.word	0x08002a49
 800275c:	08002a49 	.word	0x08002a49
 8002760:	08002a49 	.word	0x08002a49
 8002764:	08002791 	.word	0x08002791
 8002768:	08002a49 	.word	0x08002a49
 800276c:	08002a49 	.word	0x08002a49
 8002770:	08002a49 	.word	0x08002a49
 8002774:	08002799 	.word	0x08002799
 8002778:	08002a49 	.word	0x08002a49
 800277c:	08002a49 	.word	0x08002a49
 8002780:	08002a49 	.word	0x08002a49
 8002784:	08002903 	.word	0x08002903
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002788:	4bb6      	ldr	r3, [pc, #728]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x34c>)
 800278a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800278e:	e15f      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002790:	4bb5      	ldr	r3, [pc, #724]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002792:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002796:	e15b      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002798:	4bb1      	ldr	r3, [pc, #708]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027a4:	4bae      	ldr	r3, [pc, #696]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d031      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b0:	4bab      	ldr	r3, [pc, #684]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	2200      	movs	r2, #0
 80027b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027c4:	2300      	movs	r3, #0
 80027c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80027c8:	4ba7      	ldr	r3, [pc, #668]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 80027ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027ce:	462a      	mov	r2, r5
 80027d0:	fb03 f202 	mul.w	r2, r3, r2
 80027d4:	2300      	movs	r3, #0
 80027d6:	4621      	mov	r1, r4
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	4aa2      	ldr	r2, [pc, #648]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 80027e0:	4621      	mov	r1, r4
 80027e2:	fba1 1202 	umull	r1, r2, r1, r2
 80027e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80027e8:	460a      	mov	r2, r1
 80027ea:	67ba      	str	r2, [r7, #120]	@ 0x78
 80027ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80027ee:	4413      	add	r3, r2
 80027f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f6:	2200      	movs	r2, #0
 80027f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002800:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002804:	f7fd fd06 	bl	8000214 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002812:	e064      	b.n	80028de <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4b92      	ldr	r3, [pc, #584]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	653b      	str	r3, [r7, #80]	@ 0x50
 800281e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002826:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002828:	2300      	movs	r3, #0
 800282a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800282c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002830:	4622      	mov	r2, r4
 8002832:	462b      	mov	r3, r5
 8002834:	f04f 0000 	mov.w	r0, #0
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	0159      	lsls	r1, r3, #5
 800283e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002842:	0150      	lsls	r0, r2, #5
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4621      	mov	r1, r4
 800284a:	1a51      	subs	r1, r2, r1
 800284c:	6139      	str	r1, [r7, #16]
 800284e:	4629      	mov	r1, r5
 8002850:	eb63 0301 	sbc.w	r3, r3, r1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002862:	4659      	mov	r1, fp
 8002864:	018b      	lsls	r3, r1, #6
 8002866:	4651      	mov	r1, sl
 8002868:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286c:	4651      	mov	r1, sl
 800286e:	018a      	lsls	r2, r1, #6
 8002870:	4651      	mov	r1, sl
 8002872:	ebb2 0801 	subs.w	r8, r2, r1
 8002876:	4659      	mov	r1, fp
 8002878:	eb63 0901 	sbc.w	r9, r3, r1
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002888:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800288c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002890:	4690      	mov	r8, r2
 8002892:	4699      	mov	r9, r3
 8002894:	4623      	mov	r3, r4
 8002896:	eb18 0303 	adds.w	r3, r8, r3
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	462b      	mov	r3, r5
 800289e:	eb49 0303 	adc.w	r3, r9, r3
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028b0:	4629      	mov	r1, r5
 80028b2:	028b      	lsls	r3, r1, #10
 80028b4:	4621      	mov	r1, r4
 80028b6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ba:	4621      	mov	r1, r4
 80028bc:	028a      	lsls	r2, r1, #10
 80028be:	4610      	mov	r0, r2
 80028c0:	4619      	mov	r1, r3
 80028c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028c6:	2200      	movs	r2, #0
 80028c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80028ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80028cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80028d0:	f7fd fca0 	bl	8000214 <__aeabi_uldivmod>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4613      	mov	r3, r2
 80028da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028de:	4b60      	ldr	r3, [pc, #384]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	3301      	adds	r3, #1
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80028f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002900:	e0a6      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002902:	4b57      	ldr	r3, [pc, #348]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800290a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290e:	4b54      	ldr	r3, [pc, #336]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02a      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291a:	4b51      	ldr	r3, [pc, #324]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	2200      	movs	r2, #0
 8002922:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002924:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002928:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800292c:	2100      	movs	r1, #0
 800292e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002930:	fb03 f201 	mul.w	r2, r3, r1
 8002934:	2300      	movs	r3, #0
 8002936:	fb00 f303 	mul.w	r3, r0, r3
 800293a:	4413      	add	r3, r2
 800293c:	4a4a      	ldr	r2, [pc, #296]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x350>)
 800293e:	fba0 1202 	umull	r1, r2, r0, r2
 8002942:	677a      	str	r2, [r7, #116]	@ 0x74
 8002944:	460a      	mov	r2, r1
 8002946:	673a      	str	r2, [r7, #112]	@ 0x70
 8002948:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800294a:	4413      	add	r3, r2
 800294c:	677b      	str	r3, [r7, #116]	@ 0x74
 800294e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002952:	2200      	movs	r2, #0
 8002954:	633b      	str	r3, [r7, #48]	@ 0x30
 8002956:	637a      	str	r2, [r7, #52]	@ 0x34
 8002958:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800295c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002960:	f7fd fc58 	bl	8000214 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4613      	mov	r3, r2
 800296a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800296e:	e05b      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002970:	4b3b      	ldr	r3, [pc, #236]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	099b      	lsrs	r3, r3, #6
 8002976:	2200      	movs	r2, #0
 8002978:	62bb      	str	r3, [r7, #40]	@ 0x28
 800297a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	623b      	str	r3, [r7, #32]
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
 8002988:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	f04f 0000 	mov.w	r0, #0
 8002994:	f04f 0100 	mov.w	r1, #0
 8002998:	0159      	lsls	r1, r3, #5
 800299a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299e:	0150      	lsls	r0, r2, #5
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4641      	mov	r1, r8
 80029a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029c4:	ebb2 040a 	subs.w	r4, r2, sl
 80029c8:	eb63 050b 	sbc.w	r5, r3, fp
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	00eb      	lsls	r3, r5, #3
 80029d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029da:	00e2      	lsls	r2, r4, #3
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	18e3      	adds	r3, r4, r3
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	464b      	mov	r3, r9
 80029e8:	eb45 0303 	adc.w	r3, r5, r3
 80029ec:	607b      	str	r3, [r7, #4]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029fa:	4629      	mov	r1, r5
 80029fc:	028b      	lsls	r3, r1, #10
 80029fe:	4621      	mov	r1, r4
 8002a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a04:	4621      	mov	r1, r4
 8002a06:	028a      	lsls	r2, r1, #10
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a10:	2200      	movs	r2, #0
 8002a12:	61bb      	str	r3, [r7, #24]
 8002a14:	61fa      	str	r2, [r7, #28]
 8002a16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a1a:	f7fd fbfb 	bl	8000214 <__aeabi_uldivmod>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4613      	mov	r3, r2
 8002a24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a28:	4b0d      	ldr	r3, [pc, #52]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	0f1b      	lsrs	r3, r3, #28
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002a36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002a3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a46:	e003      	b.n	8002a50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b06      	ldr	r3, [pc, #24]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3798      	adds	r7, #152	@ 0x98
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5e:	bf00      	nop
 8002a60:	40023800 	.word	0x40023800
 8002a64:	00f42400 	.word	0x00f42400
 8002a68:	017d7840 	.word	0x017d7840

08002a6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e28d      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8083 	beq.w	8002b92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a8c:	4b94      	ldr	r3, [pc, #592]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d019      	beq.n	8002acc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a98:	4b91      	ldr	r3, [pc, #580]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ab0:	d00c      	beq.n	8002acc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d112      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002abe:	4b88      	ldr	r3, [pc, #544]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ac6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aca:	d10b      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	4b84      	ldr	r3, [pc, #528]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05b      	beq.n	8002b90 <HAL_RCC_OscConfig+0x124>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d157      	bne.n	8002b90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e25a      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x90>
 8002aee:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e01d      	b.n	8002b38 <HAL_RCC_OscConfig+0xcc>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0xb4>
 8002b06:	4b76      	ldr	r3, [pc, #472]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b73      	ldr	r3, [pc, #460]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a72      	ldr	r2, [pc, #456]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0xcc>
 8002b20:	4b6f      	ldr	r3, [pc, #444]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6b      	ldr	r2, [pc, #428]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe fd5e 	bl	8001600 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe fd5a 	bl	8001600 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e21f      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b61      	ldr	r3, [pc, #388]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0xdc>
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b68:	f7fe fd4a 	bl	8001600 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fd46 	bl	8001600 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	@ 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e20b      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b82:	4b57      	ldr	r3, [pc, #348]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x104>
 8002b8e:	e000      	b.n	8002b92 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d06f      	beq.n	8002c7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b9e:	4b50      	ldr	r3, [pc, #320]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d017      	beq.n	8002bda <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002baa:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
        || \
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00b      	beq.n	8002bda <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bc2:	4b47      	ldr	r3, [pc, #284]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d11c      	bne.n	8002c08 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	4b44      	ldr	r3, [pc, #272]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	4b41      	ldr	r3, [pc, #260]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x186>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1d3      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4937      	ldr	r1, [pc, #220]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c06:	e03a      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c10:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7fe fcf3 	bl	8001600 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fcef 	bl	8001600 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1b4      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3c:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4925      	ldr	r1, [pc, #148]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	600b      	str	r3, [r1, #0]
 8002c50:	e015      	b.n	8002c7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c52:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <HAL_RCC_OscConfig+0x278>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7fe fcd2 	bl	8001600 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c60:	f7fe fcce 	bl	8001600 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e193      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d036      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <HAL_RCC_OscConfig+0x27c>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe fcb2 	bl	8001600 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca0:	f7fe fcae 	bl	8001600 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e173      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0f0      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x234>
 8002cbe:	e01b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cc0:	4b09      	ldr	r3, [pc, #36]	@ (8002ce8 <HAL_RCC_OscConfig+0x27c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fc9b 	bl	8001600 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	e00e      	b.n	8002cec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fe fc97 	bl	8001600 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d907      	bls.n	8002cec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e15c      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	42470000 	.word	0x42470000
 8002ce8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cec:	4b8a      	ldr	r3, [pc, #552]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1ea      	bne.n	8002cce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8097 	beq.w	8002e34 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0a:	4b83      	ldr	r3, [pc, #524]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10f      	bne.n	8002d36 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d26:	4b7c      	ldr	r3, [pc, #496]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d36:	4b79      	ldr	r3, [pc, #484]	@ (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d118      	bne.n	8002d74 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d42:	4b76      	ldr	r3, [pc, #472]	@ (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a75      	ldr	r2, [pc, #468]	@ (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d4e:	f7fe fc57 	bl	8001600 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d56:	f7fe fc53 	bl	8001600 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e118      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d68:	4b6c      	ldr	r3, [pc, #432]	@ (8002f1c <HAL_RCC_OscConfig+0x4b0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <HAL_RCC_OscConfig+0x31e>
 8002d7c:	4b66      	ldr	r3, [pc, #408]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d80:	4a65      	ldr	r2, [pc, #404]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d88:	e01c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x358>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d10c      	bne.n	8002dac <HAL_RCC_OscConfig+0x340>
 8002d92:	4b61      	ldr	r3, [pc, #388]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	4a60      	ldr	r2, [pc, #384]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002daa:	e00b      	b.n	8002dc4 <HAL_RCC_OscConfig+0x358>
 8002dac:	4b5a      	ldr	r3, [pc, #360]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db0:	4a59      	ldr	r2, [pc, #356]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002db8:	4b57      	ldr	r3, [pc, #348]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbc:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dbe:	f023 0304 	bic.w	r3, r3, #4
 8002dc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe fc18 	bl	8001600 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd2:	e00a      	b.n	8002dea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fc14 	bl	8001600 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e0d7      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dea:	4b4b      	ldr	r3, [pc, #300]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0ee      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x368>
 8002df6:	e014      	b.n	8002e22 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe fc02 	bl	8001600 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e00:	f7fe fbfe 	bl	8001600 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e0c1      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e16:	4b40      	ldr	r3, [pc, #256]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ee      	bne.n	8002e00 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b3b      	ldr	r3, [pc, #236]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80ad 	beq.w	8002f98 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e3e:	4b36      	ldr	r3, [pc, #216]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d060      	beq.n	8002f0c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d145      	bne.n	8002ede <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e52:	4b33      	ldr	r3, [pc, #204]	@ (8002f20 <HAL_RCC_OscConfig+0x4b4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fbd2 	bl	8001600 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fbce 	bl	8001600 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e093      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e72:	4b29      	ldr	r3, [pc, #164]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	019b      	lsls	r3, r3, #6
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	061b      	lsls	r3, r3, #24
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	071b      	lsls	r3, r3, #28
 8002eaa:	491b      	ldr	r1, [pc, #108]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0x4b4>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fba3 	bl	8001600 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7fe fb9f 	bl	8001600 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e064      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ed0:	4b11      	ldr	r3, [pc, #68]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x452>
 8002edc:	e05c      	b.n	8002f98 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b10      	ldr	r3, [pc, #64]	@ (8002f20 <HAL_RCC_OscConfig+0x4b4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fb8c 	bl	8001600 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe fb88 	bl	8001600 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e04d      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x480>
 8002f0a:	e045      	b.n	8002f98 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e040      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40007000 	.word	0x40007000
 8002f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <HAL_RCC_OscConfig+0x538>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d030      	beq.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d129      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d122      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f54:	4013      	ands	r3, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d119      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d10f      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800

08002fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07b      	b.n	80030b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d108      	bne.n	8002fd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fca:	d009      	beq.n	8002fe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
 8002fd2:	e005      	b.n	8002fe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fef2 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003016:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	ea42 0103 	orr.w	r1, r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	f003 0104 	and.w	r1, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003086:	f003 0210 	and.w	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b08a      	sub	sp, #40	@ 0x28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030c8:	2301      	movs	r3, #1
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030cc:	f7fe fa98 	bl	8001600 <HAL_GetTick>
 80030d0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030d8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030e4:	7ffb      	ldrb	r3, [r7, #31]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d00c      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x4a>
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030f0:	d106      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x46>
 80030fa:	7ffb      	ldrb	r3, [r7, #31]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d001      	beq.n	8003104 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	e17f      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x5c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x5c>
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e174      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x6e>
 8003124:	2302      	movs	r3, #2
 8003126:	e16d      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34a>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b04      	cmp	r3, #4
 800313a:	d003      	beq.n	8003144 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2205      	movs	r2, #5
 8003140:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	887a      	ldrh	r2, [r7, #2]
 8003154:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	887a      	ldrh	r2, [r7, #2]
 800315a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	887a      	ldrh	r2, [r7, #2]
 8003166:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003184:	2b40      	cmp	r3, #64	@ 0x40
 8003186:	d007      	beq.n	8003198 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003196:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031a0:	d17e      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_SPI_TransmitReceive+0xf6>
 80031aa:	8afb      	ldrh	r3, [r7, #22]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d16c      	bne.n	800328a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	1c9a      	adds	r2, r3, #2
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031d4:	e059      	b.n	800328a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d11b      	bne.n	800321c <HAL_SPI_TransmitReceive+0x162>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d016      	beq.n	800321c <HAL_SPI_TransmitReceive+0x162>
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d113      	bne.n	800321c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	881a      	ldrh	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003204:	1c9a      	adds	r2, r3, #2
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b01      	cmp	r3, #1
 8003228:	d119      	bne.n	800325e <HAL_SPI_TransmitReceive+0x1a4>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d014      	beq.n	800325e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	b292      	uxth	r2, r2
 8003240:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800325a:	2301      	movs	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800325e:	f7fe f9cf 	bl	8001600 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326a:	429a      	cmp	r2, r3
 800326c:	d80d      	bhi.n	800328a <HAL_SPI_TransmitReceive+0x1d0>
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d009      	beq.n	800328a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0bc      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1a0      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x11c>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d19b      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x11c>
 800329e:	e082      	b.n	80033a6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_SPI_TransmitReceive+0x1f4>
 80032a8:	8afb      	ldrh	r3, [r7, #22]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d171      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	330c      	adds	r3, #12
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d4:	e05d      	b.n	8003392 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d11c      	bne.n	800331e <HAL_SPI_TransmitReceive+0x264>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d017      	beq.n	800331e <HAL_SPI_TransmitReceive+0x264>
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d114      	bne.n	800331e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	7812      	ldrb	r2, [r2, #0]
 8003300:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d119      	bne.n	8003360 <HAL_SPI_TransmitReceive+0x2a6>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d014      	beq.n	8003360 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800335c:	2301      	movs	r3, #1
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003360:	f7fe f94e 	bl	8001600 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800336c:	429a      	cmp	r2, r3
 800336e:	d803      	bhi.n	8003378 <HAL_SPI_TransmitReceive+0x2be>
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d102      	bne.n	800337e <HAL_SPI_TransmitReceive+0x2c4>
 8003378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e038      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d19c      	bne.n	80032d6 <HAL_SPI_TransmitReceive+0x21c>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d197      	bne.n	80032d6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8b6 	bl	800351c <SPI_EndRxTxTransaction>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e01d      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003402:	2300      	movs	r3, #0
  }
}
 8003404:	4618      	mov	r0, r3
 8003406:	3728      	adds	r7, #40	@ 0x28
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800341c:	f7fe f8f0 	bl	8001600 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	1a9b      	subs	r3, r3, r2
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	4413      	add	r3, r2
 800342a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800342c:	f7fe f8e8 	bl	8001600 <HAL_GetTick>
 8003430:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003432:	4b39      	ldr	r3, [pc, #228]	@ (8003518 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	015b      	lsls	r3, r3, #5
 8003438:	0d1b      	lsrs	r3, r3, #20
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	fb02 f303 	mul.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003442:	e055      	b.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d051      	beq.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800344c:	f7fe f8d8 	bl	8001600 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	69fa      	ldr	r2, [r7, #28]
 8003458:	429a      	cmp	r2, r3
 800345a:	d902      	bls.n	8003462 <SPI_WaitFlagStateUntilTimeout+0x56>
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d13d      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800347a:	d111      	bne.n	80034a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003484:	d004      	beq.n	8003490 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800348e:	d107      	bne.n	80034a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800349e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034a8:	d10f      	bne.n	80034ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e018      	b.n	8003510 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
 80034e8:	e002      	b.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3b01      	subs	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	4013      	ands	r3, r2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	429a      	cmp	r2, r3
 800350c:	d19a      	bne.n	8003444 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000008 	.word	0x20000008

0800351c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2201      	movs	r2, #1
 8003530:	2102      	movs	r1, #2
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f7ff ff6a 	bl	800340c <SPI_WaitFlagStateUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e032      	b.n	80035b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800354e:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <SPI_EndRxTxTransaction+0xa0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1b      	ldr	r2, [pc, #108]	@ (80035c0 <SPI_EndRxTxTransaction+0xa4>)
 8003554:	fba2 2303 	umull	r2, r3, r2, r3
 8003558:	0d5b      	lsrs	r3, r3, #21
 800355a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800356c:	d112      	bne.n	8003594 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2200      	movs	r2, #0
 8003576:	2180      	movs	r1, #128	@ 0x80
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff ff47 	bl	800340c <SPI_WaitFlagStateUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d016      	beq.n	80035b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e00f      	b.n	80035b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3b01      	subs	r3, #1
 800359e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035aa:	2b80      	cmp	r3, #128	@ 0x80
 80035ac:	d0f2      	beq.n	8003594 <SPI_EndRxTxTransaction+0x78>
 80035ae:	e000      	b.n	80035b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80035b0:	bf00      	nop
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000008 	.word	0x20000008
 80035c0:	165e9f81 	.word	0x165e9f81

080035c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e042      	b.n	800365c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd ff30 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2224      	movs	r2, #36	@ 0x24
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f973 	bl	80038f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800361c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800362c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800363c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	@ 0x28
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b20      	cmp	r3, #32
 8003682:	d175      	bne.n	8003770 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_Transmit+0x2c>
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e06e      	b.n	8003772 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2221      	movs	r2, #33	@ 0x21
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036a2:	f7fd ffad 	bl	8001600 <HAL_GetTick>
 80036a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	88fa      	ldrh	r2, [r7, #6]
 80036ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	88fa      	ldrh	r2, [r7, #6]
 80036b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036bc:	d108      	bne.n	80036d0 <HAL_UART_Transmit+0x6c>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d104      	bne.n	80036d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	e003      	b.n	80036d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036d8:	e02e      	b.n	8003738 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	2180      	movs	r1, #128	@ 0x80
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f848 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e03a      	b.n	8003772 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	3302      	adds	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e007      	b.n	800372a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1cb      	bne.n	80036da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2140      	movs	r1, #64	@ 0x40
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f814 	bl	800377a <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e006      	b.n	8003772 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378a:	e03b      	b.n	8003804 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d037      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003794:	f7fd ff34 	bl	8001600 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d302      	bcc.n	80037aa <UART_WaitOnFlagUntilTimeout+0x30>
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e03a      	b.n	8003824 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d023      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b80      	cmp	r3, #128	@ 0x80
 80037c0:	d020      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b40      	cmp	r3, #64	@ 0x40
 80037c6:	d01d      	beq.n	8003804 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d116      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f81d 	bl	800382c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2208      	movs	r2, #8
 80037f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e00f      	b.n	8003824 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	429a      	cmp	r2, r3
 8003820:	d0b4      	beq.n	800378c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800382c:	b480      	push	{r7}
 800382e:	b095      	sub	sp, #84	@ 0x54
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	330c      	adds	r3, #12
 800383a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800384a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003854:	643a      	str	r2, [r7, #64]	@ 0x40
 8003856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800385a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3314      	adds	r3, #20
 800386e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	61fb      	str	r3, [r7, #28]
   return(result);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3314      	adds	r3, #20
 8003886:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003888:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800388e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d119      	bne.n	80038d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f023 0310 	bic.w	r3, r3, #16
 80038ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038c4:	61ba      	str	r2, [r7, #24]
 80038c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6979      	ldr	r1, [r7, #20]
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	613b      	str	r3, [r7, #16]
   return(result);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e5      	bne.n	80038a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038e6:	bf00      	nop
 80038e8:	3754      	adds	r7, #84	@ 0x54
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f8:	b0c0      	sub	sp, #256	@ 0x100
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003910:	68d9      	ldr	r1, [r3, #12]
 8003912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	ea40 0301 	orr.w	r3, r0, r1
 800391c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800391e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	431a      	orrs	r2, r3
 800392c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	431a      	orrs	r2, r3
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800394c:	f021 010c 	bic.w	r1, r1, #12
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800395a:	430b      	orrs	r3, r1
 800395c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800395e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800396a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396e:	6999      	ldr	r1, [r3, #24]
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	ea40 0301 	orr.w	r3, r0, r1
 800397a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc0 <UART_SetConfig+0x2cc>)
 8003984:	429a      	cmp	r2, r3
 8003986:	d005      	beq.n	8003994 <UART_SetConfig+0xa0>
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4b8d      	ldr	r3, [pc, #564]	@ (8003bc4 <UART_SetConfig+0x2d0>)
 8003990:	429a      	cmp	r2, r3
 8003992:	d104      	bne.n	800399e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003994:	f7fe feac 	bl	80026f0 <HAL_RCC_GetPCLK2Freq>
 8003998:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800399c:	e003      	b.n	80039a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800399e:	f7fe fe93 	bl	80026c8 <HAL_RCC_GetPCLK1Freq>
 80039a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b0:	f040 810c 	bne.w	8003bcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039c6:	4622      	mov	r2, r4
 80039c8:	462b      	mov	r3, r5
 80039ca:	1891      	adds	r1, r2, r2
 80039cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039ce:	415b      	adcs	r3, r3
 80039d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039d6:	4621      	mov	r1, r4
 80039d8:	eb12 0801 	adds.w	r8, r2, r1
 80039dc:	4629      	mov	r1, r5
 80039de:	eb43 0901 	adc.w	r9, r3, r1
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039f6:	4690      	mov	r8, r2
 80039f8:	4699      	mov	r9, r3
 80039fa:	4623      	mov	r3, r4
 80039fc:	eb18 0303 	adds.w	r3, r8, r3
 8003a00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a04:	462b      	mov	r3, r5
 8003a06:	eb49 0303 	adc.w	r3, r9, r3
 8003a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a22:	460b      	mov	r3, r1
 8003a24:	18db      	adds	r3, r3, r3
 8003a26:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a28:	4613      	mov	r3, r2
 8003a2a:	eb42 0303 	adc.w	r3, r2, r3
 8003a2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a38:	f7fc fbec 	bl	8000214 <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4b61      	ldr	r3, [pc, #388]	@ (8003bc8 <UART_SetConfig+0x2d4>)
 8003a42:	fba3 2302 	umull	r2, r3, r3, r2
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	011c      	lsls	r4, r3, #4
 8003a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a5c:	4642      	mov	r2, r8
 8003a5e:	464b      	mov	r3, r9
 8003a60:	1891      	adds	r1, r2, r2
 8003a62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a64:	415b      	adcs	r3, r3
 8003a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a6c:	4641      	mov	r1, r8
 8003a6e:	eb12 0a01 	adds.w	sl, r2, r1
 8003a72:	4649      	mov	r1, r9
 8003a74:	eb43 0b01 	adc.w	fp, r3, r1
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a8c:	4692      	mov	sl, r2
 8003a8e:	469b      	mov	fp, r3
 8003a90:	4643      	mov	r3, r8
 8003a92:	eb1a 0303 	adds.w	r3, sl, r3
 8003a96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	eb4b 0303 	adc.w	r3, fp, r3
 8003aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ab0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ab4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	18db      	adds	r3, r3, r3
 8003abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003abe:	4613      	mov	r3, r2
 8003ac0:	eb42 0303 	adc.w	r3, r2, r3
 8003ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003aca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ace:	f7fc fba1 	bl	8000214 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <UART_SetConfig+0x2d4>)
 8003ada:	fba3 2301 	umull	r2, r3, r3, r1
 8003ade:	095b      	lsrs	r3, r3, #5
 8003ae0:	2264      	movs	r2, #100	@ 0x64
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	1acb      	subs	r3, r1, r3
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003aee:	4b36      	ldr	r3, [pc, #216]	@ (8003bc8 <UART_SetConfig+0x2d4>)
 8003af0:	fba3 2302 	umull	r2, r3, r3, r2
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003afc:	441c      	add	r4, r3
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b20:	4641      	mov	r1, r8
 8003b22:	1851      	adds	r1, r2, r1
 8003b24:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b26:	4649      	mov	r1, r9
 8003b28:	414b      	adcs	r3, r1
 8003b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b38:	4659      	mov	r1, fp
 8003b3a:	00cb      	lsls	r3, r1, #3
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b42:	4651      	mov	r1, sl
 8003b44:	00ca      	lsls	r2, r1, #3
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b54:	464b      	mov	r3, r9
 8003b56:	460a      	mov	r2, r1
 8003b58:	eb42 0303 	adc.w	r3, r2, r3
 8003b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b74:	460b      	mov	r3, r1
 8003b76:	18db      	adds	r3, r3, r3
 8003b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	eb42 0303 	adc.w	r3, r2, r3
 8003b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b8a:	f7fc fb43 	bl	8000214 <__aeabi_uldivmod>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4b0d      	ldr	r3, [pc, #52]	@ (8003bc8 <UART_SetConfig+0x2d4>)
 8003b94:	fba3 1302 	umull	r1, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	2164      	movs	r1, #100	@ 0x64
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	3332      	adds	r3, #50	@ 0x32
 8003ba6:	4a08      	ldr	r2, [pc, #32]	@ (8003bc8 <UART_SetConfig+0x2d4>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	f003 0207 	and.w	r2, r3, #7
 8003bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4422      	add	r2, r4
 8003bba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bbc:	e106      	b.n	8003dcc <UART_SetConfig+0x4d8>
 8003bbe:	bf00      	nop
 8003bc0:	40011000 	.word	0x40011000
 8003bc4:	40011400 	.word	0x40011400
 8003bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bde:	4642      	mov	r2, r8
 8003be0:	464b      	mov	r3, r9
 8003be2:	1891      	adds	r1, r2, r2
 8003be4:	6239      	str	r1, [r7, #32]
 8003be6:	415b      	adcs	r3, r3
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bee:	4641      	mov	r1, r8
 8003bf0:	1854      	adds	r4, r2, r1
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	eb43 0501 	adc.w	r5, r3, r1
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	00eb      	lsls	r3, r5, #3
 8003c02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c06:	00e2      	lsls	r2, r4, #3
 8003c08:	4614      	mov	r4, r2
 8003c0a:	461d      	mov	r5, r3
 8003c0c:	4643      	mov	r3, r8
 8003c0e:	18e3      	adds	r3, r4, r3
 8003c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c14:	464b      	mov	r3, r9
 8003c16:	eb45 0303 	adc.w	r3, r5, r3
 8003c1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	008b      	lsls	r3, r1, #2
 8003c3e:	4621      	mov	r1, r4
 8003c40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c44:	4621      	mov	r1, r4
 8003c46:	008a      	lsls	r2, r1, #2
 8003c48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c4c:	f7fc fae2 	bl	8000214 <__aeabi_uldivmod>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4b60      	ldr	r3, [pc, #384]	@ (8003dd8 <UART_SetConfig+0x4e4>)
 8003c56:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	011c      	lsls	r4, r3, #4
 8003c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c70:	4642      	mov	r2, r8
 8003c72:	464b      	mov	r3, r9
 8003c74:	1891      	adds	r1, r2, r2
 8003c76:	61b9      	str	r1, [r7, #24]
 8003c78:	415b      	adcs	r3, r3
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c80:	4641      	mov	r1, r8
 8003c82:	1851      	adds	r1, r2, r1
 8003c84:	6139      	str	r1, [r7, #16]
 8003c86:	4649      	mov	r1, r9
 8003c88:	414b      	adcs	r3, r1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c98:	4659      	mov	r1, fp
 8003c9a:	00cb      	lsls	r3, r1, #3
 8003c9c:	4651      	mov	r1, sl
 8003c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	00ca      	lsls	r2, r1, #3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	4619      	mov	r1, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	4642      	mov	r2, r8
 8003cae:	189b      	adds	r3, r3, r2
 8003cb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cb4:	464b      	mov	r3, r9
 8003cb6:	460a      	mov	r2, r1
 8003cb8:	eb42 0303 	adc.w	r3, r2, r3
 8003cbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cd8:	4649      	mov	r1, r9
 8003cda:	008b      	lsls	r3, r1, #2
 8003cdc:	4641      	mov	r1, r8
 8003cde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	008a      	lsls	r2, r1, #2
 8003ce6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cea:	f7fc fa93 	bl	8000214 <__aeabi_uldivmod>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4b38      	ldr	r3, [pc, #224]	@ (8003dd8 <UART_SetConfig+0x4e4>)
 8003cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8003cfa:	095b      	lsrs	r3, r3, #5
 8003cfc:	2264      	movs	r2, #100	@ 0x64
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	1acb      	subs	r3, r1, r3
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	3332      	adds	r3, #50	@ 0x32
 8003d08:	4a33      	ldr	r2, [pc, #204]	@ (8003dd8 <UART_SetConfig+0x4e4>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d14:	441c      	add	r4, r3
 8003d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	1891      	adds	r1, r2, r2
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	415b      	adcs	r3, r3
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d34:	4641      	mov	r1, r8
 8003d36:	1851      	adds	r1, r2, r1
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	607b      	str	r3, [r7, #4]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4651      	mov	r1, sl
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4642      	mov	r2, r8
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d66:	464b      	mov	r3, r9
 8003d68:	460a      	mov	r2, r1
 8003d6a:	eb42 0303 	adc.w	r3, r2, r3
 8003d6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d88:	4649      	mov	r1, r9
 8003d8a:	008b      	lsls	r3, r1, #2
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d92:	4641      	mov	r1, r8
 8003d94:	008a      	lsls	r2, r1, #2
 8003d96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d9a:	f7fc fa3b 	bl	8000214 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <UART_SetConfig+0x4e4>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2164      	movs	r1, #100	@ 0x64
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	3332      	adds	r3, #50	@ 0x32
 8003db6:	4a08      	ldr	r2, [pc, #32]	@ (8003dd8 <UART_SetConfig+0x4e4>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4422      	add	r2, r4
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dd8:	51eb851f 	.word	0x51eb851f

08003ddc <memset>:
 8003ddc:	4402      	add	r2, r0
 8003dde:	4603      	mov	r3, r0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d100      	bne.n	8003de6 <memset+0xa>
 8003de4:	4770      	bx	lr
 8003de6:	f803 1b01 	strb.w	r1, [r3], #1
 8003dea:	e7f9      	b.n	8003de0 <memset+0x4>

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	4d0d      	ldr	r5, [pc, #52]	@ (8003e24 <__libc_init_array+0x38>)
 8003df0:	4c0d      	ldr	r4, [pc, #52]	@ (8003e28 <__libc_init_array+0x3c>)
 8003df2:	1b64      	subs	r4, r4, r5
 8003df4:	10a4      	asrs	r4, r4, #2
 8003df6:	2600      	movs	r6, #0
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	4d0b      	ldr	r5, [pc, #44]	@ (8003e2c <__libc_init_array+0x40>)
 8003dfe:	4c0c      	ldr	r4, [pc, #48]	@ (8003e30 <__libc_init_array+0x44>)
 8003e00:	f000 f818 	bl	8003e34 <_init>
 8003e04:	1b64      	subs	r4, r4, r5
 8003e06:	10a4      	asrs	r4, r4, #2
 8003e08:	2600      	movs	r6, #0
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	080044d0 	.word	0x080044d0
 8003e28:	080044d0 	.word	0x080044d0
 8003e2c:	080044d0 	.word	0x080044d0
 8003e30:	080044d4 	.word	0x080044d4

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
