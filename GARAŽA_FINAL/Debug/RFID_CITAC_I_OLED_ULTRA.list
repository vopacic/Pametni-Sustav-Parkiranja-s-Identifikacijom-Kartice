
RFID_CITAC_I_OLED_ULTRA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060f0  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  080062b8  080062b8  000072b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  0000800c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006908  08006908  00007908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006910  08006910  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00007910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006918  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  2000000c  08006924  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08006924  00008648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014942  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300e  00000000  00000000  0001c97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0001f990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eff  00000000  00000000  00020cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239d3  00000000  00000000  00021bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018991  00000000  00000000  0004558a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6085  00000000  00000000  0005df1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133fa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d0  00000000  00000000  00133fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001391b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080062a0 	.word	0x080062a0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080062a0 	.word	0x080062a0

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b988 	b.w	8000d0c <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	468e      	mov	lr, r1
 8000a1c:	4604      	mov	r4, r0
 8000a1e:	4688      	mov	r8, r1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d14a      	bne.n	8000aba <__udivmoddi4+0xa6>
 8000a24:	428a      	cmp	r2, r1
 8000a26:	4617      	mov	r7, r2
 8000a28:	d962      	bls.n	8000af0 <__udivmoddi4+0xdc>
 8000a2a:	fab2 f682 	clz	r6, r2
 8000a2e:	b14e      	cbz	r6, 8000a44 <__udivmoddi4+0x30>
 8000a30:	f1c6 0320 	rsb	r3, r6, #32
 8000a34:	fa01 f806 	lsl.w	r8, r1, r6
 8000a38:	fa20 f303 	lsr.w	r3, r0, r3
 8000a3c:	40b7      	lsls	r7, r6
 8000a3e:	ea43 0808 	orr.w	r8, r3, r8
 8000a42:	40b4      	lsls	r4, r6
 8000a44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a48:	fa1f fc87 	uxth.w	ip, r7
 8000a4c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a50:	0c23      	lsrs	r3, r4, #16
 8000a52:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a5a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d909      	bls.n	8000a76 <__udivmoddi4+0x62>
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a68:	f080 80ea 	bcs.w	8000c40 <__udivmoddi4+0x22c>
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	f240 80e7 	bls.w	8000c40 <__udivmoddi4+0x22c>
 8000a72:	3902      	subs	r1, #2
 8000a74:	443b      	add	r3, r7
 8000a76:	1a9a      	subs	r2, r3, r2
 8000a78:	b2a3      	uxth	r3, r4
 8000a7a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a7e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a86:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a8a:	459c      	cmp	ip, r3
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0x8e>
 8000a8e:	18fb      	adds	r3, r7, r3
 8000a90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a94:	f080 80d6 	bcs.w	8000c44 <__udivmoddi4+0x230>
 8000a98:	459c      	cmp	ip, r3
 8000a9a:	f240 80d3 	bls.w	8000c44 <__udivmoddi4+0x230>
 8000a9e:	443b      	add	r3, r7
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000aa6:	eba3 030c 	sub.w	r3, r3, ip
 8000aaa:	2100      	movs	r1, #0
 8000aac:	b11d      	cbz	r5, 8000ab6 <__udivmoddi4+0xa2>
 8000aae:	40f3      	lsrs	r3, r6
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d905      	bls.n	8000aca <__udivmoddi4+0xb6>
 8000abe:	b10d      	cbz	r5, 8000ac4 <__udivmoddi4+0xb0>
 8000ac0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e7f5      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000aca:	fab3 f183 	clz	r1, r3
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d146      	bne.n	8000b60 <__udivmoddi4+0x14c>
 8000ad2:	4573      	cmp	r3, lr
 8000ad4:	d302      	bcc.n	8000adc <__udivmoddi4+0xc8>
 8000ad6:	4282      	cmp	r2, r0
 8000ad8:	f200 8105 	bhi.w	8000ce6 <__udivmoddi4+0x2d2>
 8000adc:	1a84      	subs	r4, r0, r2
 8000ade:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	4690      	mov	r8, r2
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d0e5      	beq.n	8000ab6 <__udivmoddi4+0xa2>
 8000aea:	e9c5 4800 	strd	r4, r8, [r5]
 8000aee:	e7e2      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	f000 8090 	beq.w	8000c16 <__udivmoddi4+0x202>
 8000af6:	fab2 f682 	clz	r6, r2
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	f040 80a4 	bne.w	8000c48 <__udivmoddi4+0x234>
 8000b00:	1a8a      	subs	r2, r1, r2
 8000b02:	0c03      	lsrs	r3, r0, #16
 8000b04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b08:	b280      	uxth	r0, r0
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b12:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b1a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d907      	bls.n	8000b32 <__udivmoddi4+0x11e>
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x11c>
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	f200 80e0 	bhi.w	8000cf0 <__udivmoddi4+0x2dc>
 8000b30:	46c4      	mov	ip, r8
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b38:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b3c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b40:	fb02 f404 	mul.w	r4, r2, r4
 8000b44:	429c      	cmp	r4, r3
 8000b46:	d907      	bls.n	8000b58 <__udivmoddi4+0x144>
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x142>
 8000b50:	429c      	cmp	r4, r3
 8000b52:	f200 80ca 	bhi.w	8000cea <__udivmoddi4+0x2d6>
 8000b56:	4602      	mov	r2, r0
 8000b58:	1b1b      	subs	r3, r3, r4
 8000b5a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b5e:	e7a5      	b.n	8000aac <__udivmoddi4+0x98>
 8000b60:	f1c1 0620 	rsb	r6, r1, #32
 8000b64:	408b      	lsls	r3, r1
 8000b66:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6a:	431f      	orrs	r7, r3
 8000b6c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b70:	fa20 f306 	lsr.w	r3, r0, r6
 8000b74:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b78:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b7c:	4323      	orrs	r3, r4
 8000b7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b82:	fa1f fc87 	uxth.w	ip, r7
 8000b86:	fbbe f0f9 	udiv	r0, lr, r9
 8000b8a:	0c1c      	lsrs	r4, r3, #16
 8000b8c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b90:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b94:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b98:	45a6      	cmp	lr, r4
 8000b9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9e:	d909      	bls.n	8000bb4 <__udivmoddi4+0x1a0>
 8000ba0:	193c      	adds	r4, r7, r4
 8000ba2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ba6:	f080 809c 	bcs.w	8000ce2 <__udivmoddi4+0x2ce>
 8000baa:	45a6      	cmp	lr, r4
 8000bac:	f240 8099 	bls.w	8000ce2 <__udivmoddi4+0x2ce>
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	443c      	add	r4, r7
 8000bb4:	eba4 040e 	sub.w	r4, r4, lr
 8000bb8:	fa1f fe83 	uxth.w	lr, r3
 8000bbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000bc4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000bc8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x1ce>
 8000bd0:	193c      	adds	r4, r7, r4
 8000bd2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bd6:	f080 8082 	bcs.w	8000cde <__udivmoddi4+0x2ca>
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	d97f      	bls.n	8000cde <__udivmoddi4+0x2ca>
 8000bde:	3b02      	subs	r3, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000be6:	eba4 040c 	sub.w	r4, r4, ip
 8000bea:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bee:	4564      	cmp	r4, ip
 8000bf0:	4673      	mov	r3, lr
 8000bf2:	46e1      	mov	r9, ip
 8000bf4:	d362      	bcc.n	8000cbc <__udivmoddi4+0x2a8>
 8000bf6:	d05f      	beq.n	8000cb8 <__udivmoddi4+0x2a4>
 8000bf8:	b15d      	cbz	r5, 8000c12 <__udivmoddi4+0x1fe>
 8000bfa:	ebb8 0203 	subs.w	r2, r8, r3
 8000bfe:	eb64 0409 	sbc.w	r4, r4, r9
 8000c02:	fa04 f606 	lsl.w	r6, r4, r6
 8000c06:	fa22 f301 	lsr.w	r3, r2, r1
 8000c0a:	431e      	orrs	r6, r3
 8000c0c:	40cc      	lsrs	r4, r1
 8000c0e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c12:	2100      	movs	r1, #0
 8000c14:	e74f      	b.n	8000ab6 <__udivmoddi4+0xa2>
 8000c16:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c1a:	0c01      	lsrs	r1, r0, #16
 8000c1c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c20:	b280      	uxth	r0, r0
 8000c22:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c26:	463b      	mov	r3, r7
 8000c28:	4638      	mov	r0, r7
 8000c2a:	463c      	mov	r4, r7
 8000c2c:	46b8      	mov	r8, r7
 8000c2e:	46be      	mov	lr, r7
 8000c30:	2620      	movs	r6, #32
 8000c32:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c36:	eba2 0208 	sub.w	r2, r2, r8
 8000c3a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c3e:	e766      	b.n	8000b0e <__udivmoddi4+0xfa>
 8000c40:	4601      	mov	r1, r0
 8000c42:	e718      	b.n	8000a76 <__udivmoddi4+0x62>
 8000c44:	4610      	mov	r0, r2
 8000c46:	e72c      	b.n	8000aa2 <__udivmoddi4+0x8e>
 8000c48:	f1c6 0220 	rsb	r2, r6, #32
 8000c4c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c50:	40b7      	lsls	r7, r6
 8000c52:	40b1      	lsls	r1, r6
 8000c54:	fa20 f202 	lsr.w	r2, r0, r2
 8000c58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6e:	fb08 f904 	mul.w	r9, r8, r4
 8000c72:	40b0      	lsls	r0, r6
 8000c74:	4589      	cmp	r9, r1
 8000c76:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c7a:	b280      	uxth	r0, r0
 8000c7c:	d93e      	bls.n	8000cfc <__udivmoddi4+0x2e8>
 8000c7e:	1879      	adds	r1, r7, r1
 8000c80:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c84:	d201      	bcs.n	8000c8a <__udivmoddi4+0x276>
 8000c86:	4589      	cmp	r9, r1
 8000c88:	d81f      	bhi.n	8000cca <__udivmoddi4+0x2b6>
 8000c8a:	eba1 0109 	sub.w	r1, r1, r9
 8000c8e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c92:	fb09 f804 	mul.w	r8, r9, r4
 8000c96:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca0:	4542      	cmp	r2, r8
 8000ca2:	d229      	bcs.n	8000cf8 <__udivmoddi4+0x2e4>
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000caa:	d2c4      	bcs.n	8000c36 <__udivmoddi4+0x222>
 8000cac:	4542      	cmp	r2, r8
 8000cae:	d2c2      	bcs.n	8000c36 <__udivmoddi4+0x222>
 8000cb0:	f1a9 0102 	sub.w	r1, r9, #2
 8000cb4:	443a      	add	r2, r7
 8000cb6:	e7be      	b.n	8000c36 <__udivmoddi4+0x222>
 8000cb8:	45f0      	cmp	r8, lr
 8000cba:	d29d      	bcs.n	8000bf8 <__udivmoddi4+0x1e4>
 8000cbc:	ebbe 0302 	subs.w	r3, lr, r2
 8000cc0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000cc4:	3801      	subs	r0, #1
 8000cc6:	46e1      	mov	r9, ip
 8000cc8:	e796      	b.n	8000bf8 <__udivmoddi4+0x1e4>
 8000cca:	eba7 0909 	sub.w	r9, r7, r9
 8000cce:	4449      	add	r1, r9
 8000cd0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cd4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cd8:	fb09 f804 	mul.w	r8, r9, r4
 8000cdc:	e7db      	b.n	8000c96 <__udivmoddi4+0x282>
 8000cde:	4673      	mov	r3, lr
 8000ce0:	e77f      	b.n	8000be2 <__udivmoddi4+0x1ce>
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	e766      	b.n	8000bb4 <__udivmoddi4+0x1a0>
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	e6fd      	b.n	8000ae6 <__udivmoddi4+0xd2>
 8000cea:	443b      	add	r3, r7
 8000cec:	3a02      	subs	r2, #2
 8000cee:	e733      	b.n	8000b58 <__udivmoddi4+0x144>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	443b      	add	r3, r7
 8000cf6:	e71c      	b.n	8000b32 <__udivmoddi4+0x11e>
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	e79c      	b.n	8000c36 <__udivmoddi4+0x222>
 8000cfc:	eba1 0109 	sub.w	r1, r1, r9
 8000d00:	46c4      	mov	ip, r8
 8000d02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d06:	fb09 f804 	mul.w	r8, r9, r4
 8000d0a:	e7c4      	b.n	8000c96 <__udivmoddi4+0x282>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af02      	add	r7, sp, #8
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000d1a:	f107 020f 	add.w	r2, r7, #15
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	@ 0x64
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2301      	movs	r3, #1
 8000d26:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <RC522_SPI_Transfer+0x28>)
 8000d28:	f003 fa9d 	bl	8004266 <HAL_SPI_TransmitReceive>

	return rx_data;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200000c4 	.word	0x200000c4

08000d3c <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d52:	480d      	ldr	r0, [pc, #52]	@ (8000d88 <Write_MFRC522+0x4c>)
 8000d54:	f001 ffd4 	bl	8002d00 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ffd3 	bl	8000d10 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ffcf 	bl	8000d10 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <Write_MFRC522+0x4c>)
 8000d7a:	f001 ffc1 	bl	8002d00 <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020400 	.word	0x40020400

08000d8c <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d9c:	4810      	ldr	r0, [pc, #64]	@ (8000de0 <Read_MFRC522+0x54>)
 8000d9e:	f001 ffaf 	bl	8002d00 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffa9 	bl	8000d10 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ffa6 	bl	8000d10 <RC522_SPI_Transfer>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <Read_MFRC522+0x54>)
 8000dd0:	f001 ff96 	bl	8002d00 <HAL_GPIO_WritePin>
	
	return val;	
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40020400 	.word	0x40020400

08000de4 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffc8 	bl	8000d8c <Read_MFRC522>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000e00:	7bfa      	ldrb	r2, [r7, #15]
 8000e02:	79bb      	ldrb	r3, [r7, #6]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff95 	bl	8000d3c <Write_MFRC522>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	460a      	mov	r2, r1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	4613      	mov	r3, r2
 8000e28:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ffad 	bl	8000d8c <Read_MFRC522>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000e36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4013      	ands	r3, r2
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff75 	bl	8000d3c <Write_MFRC522>
} 
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000e5e:	2014      	movs	r0, #20
 8000e60:	f7ff ff94 	bl	8000d8c <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000e64:	2103      	movs	r1, #3
 8000e66:	2014      	movs	r0, #20
 8000e68:	f7ff ffbc 	bl	8000de4 <SetBitMask>
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000e74:	210f      	movs	r1, #15
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff ff60 	bl	8000d3c <Write_MFRC522>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e8a:	4813      	ldr	r0, [pc, #76]	@ (8000ed8 <MFRC522_Init+0x58>)
 8000e8c:	f001 ff38 	bl	8002d00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	4811      	ldr	r0, [pc, #68]	@ (8000edc <MFRC522_Init+0x5c>)
 8000e96:	f001 ff33 	bl	8002d00 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000e9a:	f7ff ffe9 	bl	8000e70 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000e9e:	218d      	movs	r1, #141	@ 0x8d
 8000ea0:	202a      	movs	r0, #42	@ 0x2a
 8000ea2:	f7ff ff4b 	bl	8000d3c <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000ea6:	213e      	movs	r1, #62	@ 0x3e
 8000ea8:	202b      	movs	r0, #43	@ 0x2b
 8000eaa:	f7ff ff47 	bl	8000d3c <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8000eae:	211e      	movs	r1, #30
 8000eb0:	202d      	movs	r0, #45	@ 0x2d
 8000eb2:	f7ff ff43 	bl	8000d3c <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	202c      	movs	r0, #44	@ 0x2c
 8000eba:	f7ff ff3f 	bl	8000d3c <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000ebe:	2140      	movs	r1, #64	@ 0x40
 8000ec0:	2015      	movs	r0, #21
 8000ec2:	f7ff ff3b 	bl	8000d3c <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000ec6:	213d      	movs	r1, #61	@ 0x3d
 8000ec8:	2011      	movs	r0, #17
 8000eca:	f7ff ff37 	bl	8000d3c <Write_MFRC522>

	AntennaOn();
 8000ece:	f7ff ffc4 	bl	8000e5a <AntennaOn>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800

08000ee0 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000efa:	2300      	movs	r3, #0
 8000efc:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	2b0c      	cmp	r3, #12
 8000f02:	d006      	beq.n	8000f12 <MFRC522_ToCard+0x32>
 8000f04:	2b0e      	cmp	r3, #14
 8000f06:	d109      	bne.n	8000f1c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000f08:	2312      	movs	r3, #18
 8000f0a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	777b      	strb	r3, [r7, #29]
			break;
 8000f10:	e005      	b.n	8000f1e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000f12:	2377      	movs	r3, #119	@ 0x77
 8000f14:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000f16:	2330      	movs	r3, #48	@ 0x30
 8000f18:	777b      	strb	r3, [r7, #29]
			break;
 8000f1a:	e000      	b.n	8000f1e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000f1c:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000f1e:	7fbb      	ldrb	r3, [r7, #30]
 8000f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4619      	mov	r1, r3
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f7ff ff07 	bl	8000d3c <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	2004      	movs	r0, #4
 8000f32:	f7ff ff72 	bl	8000e1a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f7ff ff53 	bl	8000de4 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2001      	movs	r0, #1
 8000f42:	f7ff fefb 	bl	8000d3c <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	e00a      	b.n	8000f62 <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	2009      	movs	r0, #9
 8000f58:	f7ff fef0 	bl	8000d3c <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	7bbb      	ldrb	r3, [r7, #14]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d3f0      	bcc.n	8000f4c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f7ff fee4 	bl	8000d3c <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d103      	bne.n	8000f82 <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8000f7a:	2180      	movs	r1, #128	@ 0x80
 8000f7c:	200d      	movs	r0, #13
 8000f7e:	f7ff ff31 	bl	8000de4 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000f82:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f86:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8000f88:	2004      	movs	r0, #4
 8000f8a:	f7ff feff 	bl	8000d8c <Read_MFRC522>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	773b      	strb	r3, [r7, #28]
        i--;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00a      	beq.n	8000fb4 <MFRC522_ToCard+0xd4>
 8000f9e:	7f3b      	ldrb	r3, [r7, #28]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d105      	bne.n	8000fb4 <MFRC522_ToCard+0xd4>
 8000fa8:	7f3a      	ldrb	r2, [r7, #28]
 8000faa:	7f7b      	ldrb	r3, [r7, #29]
 8000fac:	4013      	ands	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0e9      	beq.n	8000f88 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8000fb4:	2180      	movs	r1, #128	@ 0x80
 8000fb6:	200d      	movs	r0, #13
 8000fb8:	f7ff ff2f 	bl	8000e1a <ClearBitMask>
	
    if (i != 0)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d052      	beq.n	8001068 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8000fc2:	2006      	movs	r0, #6
 8000fc4:	f7ff fee2 	bl	8000d8c <Read_MFRC522>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	f003 031b 	and.w	r3, r3, #27
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d148      	bne.n	8001064 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8000fd6:	7f3a      	ldrb	r2, [r7, #28]
 8000fd8:	7fbb      	ldrb	r3, [r7, #30]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b0c      	cmp	r3, #12
 8000fee:	d13b      	bne.n	8001068 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f7ff fecb 	bl	8000d8c <Read_MFRC522>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000ffa:	200c      	movs	r0, #12
 8000ffc:	f7ff fec6 	bl	8000d8c <Read_MFRC522>
 8001000:	4603      	mov	r3, r0
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d008      	beq.n	8001020 <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800100e:	7f3b      	ldrb	r3, [r7, #28]
 8001010:	3b01      	subs	r3, #1
 8001012:	00da      	lsls	r2, r3, #3
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	4413      	add	r3, r2
 8001018:	461a      	mov	r2, r3
 800101a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e004      	b.n	800102a <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 8001020:	7f3b      	ldrb	r3, [r7, #28]
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	461a      	mov	r2, r3
 8001026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001028:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 800102a:	7f3b      	ldrb	r3, [r7, #28]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 8001030:	2301      	movs	r3, #1
 8001032:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001034:	7f3b      	ldrb	r3, [r7, #28]
 8001036:	2b10      	cmp	r3, #16
 8001038:	d901      	bls.n	800103e <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 800103a:	2310      	movs	r3, #16
 800103c:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	e00a      	b.n	800105a <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	18d4      	adds	r4, r2, r3
 800104a:	2009      	movs	r0, #9
 800104c:	f7ff fe9e 	bl	8000d8c <Read_MFRC522>
 8001050:	4603      	mov	r3, r0
 8001052:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	3301      	adds	r3, #1
 8001058:	61bb      	str	r3, [r7, #24]
 800105a:	7f3b      	ldrb	r3, [r7, #28]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	429a      	cmp	r2, r3
 8001060:	d3f0      	bcc.n	8001044 <MFRC522_ToCard+0x164>
 8001062:	e001      	b.n	8001068 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8001064:	2302      	movs	r3, #2
 8001066:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8001068:	7ffb      	ldrb	r3, [r7, #31]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd90      	pop	{r4, r7, pc}

08001072 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af02      	add	r7, sp, #8
 8001078:	4603      	mov	r3, r0
 800107a:	6039      	str	r1, [r7, #0]
 800107c:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800107e:	2107      	movs	r1, #7
 8001080:	200d      	movs	r0, #13
 8001082:	f7ff fe5b 	bl	8000d3c <Write_MFRC522>
	
	TagType[0] = reqMode;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	2201      	movs	r2, #1
 8001096:	6839      	ldr	r1, [r7, #0]
 8001098:	200c      	movs	r0, #12
 800109a:	f7ff ff21 	bl	8000ee0 <MFRC522_ToCard>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <MFRC522_Request+0x3c>
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d001      	beq.n	80010b2 <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 80010ae:	2302      	movs	r3, #2
 80010b0:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80010c8:	2100      	movs	r1, #0
 80010ca:	200d      	movs	r0, #13
 80010cc:	f7ff fe36 	bl	8000d3c <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2293      	movs	r2, #147	@ 0x93
 80010d4:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3301      	adds	r3, #1
 80010da:	2220      	movs	r2, #32
 80010dc:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2202      	movs	r2, #2
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	200c      	movs	r0, #12
 80010ec:	f7ff fef8 	bl	8000ee0 <MFRC522_ToCard>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
 80010fe:	e009      	b.n	8001114 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	7b7b      	ldrb	r3, [r7, #13]
 800110a:	4053      	eors	r3, r2
 800110c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	3301      	adds	r3, #1
 8001112:	73bb      	strb	r3, [r7, #14]
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d9f2      	bls.n	8001100 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 800111a:	7bbb      	ldrb	r3, [r7, #14]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	7b7a      	ldrb	r2, [r7, #13]
 8001124:	429a      	cmp	r2, r3
 8001126:	d001      	beq.n	800112c <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8001128:	2302      	movs	r3, #2
 800112a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
} 
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	@ 0x28
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <MX_GPIO_Init+0x108>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a3a      	ldr	r2, [pc, #232]	@ (8001240 <MX_GPIO_Init+0x108>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <MX_GPIO_Init+0x108>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <MX_GPIO_Init+0x108>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a33      	ldr	r2, [pc, #204]	@ (8001240 <MX_GPIO_Init+0x108>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <MX_GPIO_Init+0x108>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <MX_GPIO_Init+0x108>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a2c      	ldr	r2, [pc, #176]	@ (8001240 <MX_GPIO_Init+0x108>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <MX_GPIO_Init+0x108>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b26      	ldr	r3, [pc, #152]	@ (8001240 <MX_GPIO_Init+0x108>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <MX_GPIO_Init+0x108>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <MX_GPIO_Init+0x108>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	218c      	movs	r1, #140	@ 0x8c
 80011c2:	4820      	ldr	r0, [pc, #128]	@ (8001244 <MX_GPIO_Init+0x10c>)
 80011c4:	f001 fd9c 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f240 2112 	movw	r1, #530	@ 0x212
 80011ce:	481e      	ldr	r0, [pc, #120]	@ (8001248 <MX_GPIO_Init+0x110>)
 80011d0:	f001 fd96 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_5
 80011d4:	2200      	movs	r2, #0
 80011d6:	f24a 2162 	movw	r1, #41570	@ 0xa262
 80011da:	481c      	ldr	r0, [pc, #112]	@ (800124c <MX_GPIO_Init+0x114>)
 80011dc:	f001 fd90 	bl	8002d00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC2 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 80011e0:	238c      	movs	r3, #140	@ 0x8c
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <MX_GPIO_Init+0x10c>)
 80011f8:	f001 fbee 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_9;
 80011fc:	f240 2312 	movw	r3, #530	@ 0x212
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	480c      	ldr	r0, [pc, #48]	@ (8001248 <MX_GPIO_Init+0x110>)
 8001216:	f001 fbdf 	bl	80029d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB15 PB5
                           PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_5
 800121a:	f24a 2362 	movw	r3, #41570	@ 0xa262
 800121e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <MX_GPIO_Init+0x114>)
 8001234:	f001 fbd0 	bl	80029d8 <HAL_GPIO_Init>

}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400

08001250 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_I2C1_Init+0x50>)
 8001256:	4a13      	ldr	r2, [pc, #76]	@ (80012a4 <MX_I2C1_Init+0x54>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_I2C1_Init+0x50>)
 800125c:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <MX_I2C1_Init+0x58>)
 800125e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001266:	4b0e      	ldr	r3, [pc, #56]	@ (80012a0 <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <MX_I2C1_Init+0x50>)
 800126e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_I2C1_Init+0x50>)
 800128e:	f001 fd51 	bl	8002d34 <HAL_I2C_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001298:	f000 fc3e 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000028 	.word	0x20000028
 80012a4:	40005400 	.word	0x40005400
 80012a8:	00061a80 	.word	0x00061a80

080012ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	@ 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	@ (8001330 <HAL_I2C_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12c      	bne.n	8001328 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <HAL_I2C_MspInit+0x88>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <HAL_I2C_MspInit+0x88>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b15      	ldr	r3, [pc, #84]	@ (8001334 <HAL_I2C_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80012ea:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80012ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f0:	2312      	movs	r3, #18
 80012f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f8:	2303      	movs	r3, #3
 80012fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012fc:	2304      	movs	r3, #4
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	480c      	ldr	r0, [pc, #48]	@ (8001338 <HAL_I2C_MspInit+0x8c>)
 8001308:	f001 fb66 	bl	80029d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <HAL_I2C_MspInit+0x88>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <HAL_I2C_MspInit+0x88>)
 8001316:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800131a:	6413      	str	r3, [r2, #64]	@ 0x40
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_I2C_MspInit+0x88>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	@ 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40005400 	.word	0x40005400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400
 800133c:	00000000 	.word	0x00000000

08001340 <HAL_TIM_IC_CaptureCallback>:
	__HAL_TIM_SET_COUNTER(&htim6, 0);
	while (__HAL_TIM_SET_COUNTER(&htim6, 0) < time)
		;
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	7f1b      	ldrb	r3, [r3, #28]
 800134c:	2b01      	cmp	r3, #1
 800134e:	f040 8083 	bne.w	8001458 <HAL_TIM_IC_CaptureCallback+0x118>
			{
		if (Is_First_Captured == 0) // if the first value is not captured
 8001352:	4b99      	ldr	r3, [pc, #612]	@ (80015b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d11a      	bne.n	8001390 <HAL_TIM_IC_CaptureCallback+0x50>
				{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800135a:	2100      	movs	r1, #0
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f004 f80d 	bl	800537c <HAL_TIM_ReadCapturedValue>
 8001362:	4603      	mov	r3, r0
 8001364:	4a95      	ldr	r2, [pc, #596]	@ (80015bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001366:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001368:	4b93      	ldr	r3, [pc, #588]	@ (80015b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a1a      	ldr	r2, [r3, #32]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 020a 	bic.w	r2, r2, #10
 800137c:	621a      	str	r2, [r3, #32]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a1a      	ldr	r2, [r3, #32]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0202 	orr.w	r2, r2, #2
 800138c:	621a      	str	r2, [r3, #32]
 800138e:	e063      	b.n	8001458 <HAL_TIM_IC_CaptureCallback+0x118>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured == 1)   // if the first is already captured
 8001390:	4b89      	ldr	r3, [pc, #548]	@ (80015b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d15f      	bne.n	8001458 <HAL_TIM_IC_CaptureCallback+0x118>
				{
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001398:	2100      	movs	r1, #0
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f003 ffee 	bl	800537c <HAL_TIM_ReadCapturedValue>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4a87      	ldr	r2, [pc, #540]	@ (80015c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80013a4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	@ 0x24

			if (IC_Val2 > IC_Val1) {
 80013ae:	4b84      	ldr	r3, [pc, #528]	@ (80015c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4b82      	ldr	r3, [pc, #520]	@ (80015bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d907      	bls.n	80013ca <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2 - IC_Val1;
 80013ba:	4b81      	ldr	r3, [pc, #516]	@ (80015c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b7f      	ldr	r3, [pc, #508]	@ (80015bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4a7f      	ldr	r2, [pc, #508]	@ (80015c4 <HAL_TIM_IC_CaptureCallback+0x284>)
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e00f      	b.n	80013ea <HAL_TIM_IC_CaptureCallback+0xaa>
			}

			else if (IC_Val1 > IC_Val2) {
 80013ca:	4b7c      	ldr	r3, [pc, #496]	@ (80015bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b7c      	ldr	r3, [pc, #496]	@ (80015c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d909      	bls.n	80013ea <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80013d6:	4b7a      	ldr	r3, [pc, #488]	@ (80015c0 <HAL_TIM_IC_CaptureCallback+0x280>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	4b78      	ldr	r3, [pc, #480]	@ (80015bc <HAL_TIM_IC_CaptureCallback+0x27c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80013e4:	33ff      	adds	r3, #255	@ 0xff
 80013e6:	4a77      	ldr	r2, [pc, #476]	@ (80015c4 <HAL_TIM_IC_CaptureCallback+0x284>)
 80013e8:	6013      	str	r3, [r2, #0]
			}

			Distance = Difference * .034 / 2;
 80013ea:	4b76      	ldr	r3, [pc, #472]	@ (80015c4 <HAL_TIM_IC_CaptureCallback+0x284>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f84c 	bl	800048c <__aeabi_ui2d>
 80013f4:	a36e      	add	r3, pc, #440	@ (adr r3, 80015b0 <HAL_TIM_IC_CaptureCallback+0x270>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	f7ff f8c1 	bl	8000580 <__aeabi_dmul>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4610      	mov	r0, r2
 8001404:	4619      	mov	r1, r3
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800140e:	f7ff f9e1 	bl	80007d4 <__aeabi_ddiv>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff fac3 	bl	80009a4 <__aeabi_d2uiz>
 800141e:	4603      	mov	r3, r0
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b69      	ldr	r3, [pc, #420]	@ (80015c8 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001424:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001426:	4b64      	ldr	r3, [pc, #400]	@ (80015b8 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a1a      	ldr	r2, [r3, #32]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 020a 	bic.w	r2, r2, #10
 800143a:	621a      	str	r2, [r3, #32]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6a12      	ldr	r2, [r2, #32]
 8001446:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8001448:	4b60      	ldr	r3, [pc, #384]	@ (80015cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	4b5f      	ldr	r3, [pc, #380]	@ (80015cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0202 	bic.w	r2, r2, #2
 8001456:	60da      	str	r2, [r3, #12]
		}
	}

	//2uz
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) // if the interrupt source is channel1
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7f1b      	ldrb	r3, [r3, #28]
 800145c:	2b04      	cmp	r3, #4
 800145e:	f040 8083 	bne.w	8001568 <HAL_TIM_IC_CaptureCallback+0x228>
			{
		if (Is_First_Captured_2 == 0) // if the first value is not captured
 8001462:	4b5b      	ldr	r3, [pc, #364]	@ (80015d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11a      	bne.n	80014a0 <HAL_TIM_IC_CaptureCallback+0x160>
				{
			IC_Val1_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 800146a:	2108      	movs	r1, #8
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f003 ff85 	bl	800537c <HAL_TIM_ReadCapturedValue>
 8001472:	4603      	mov	r3, r0
 8001474:	4a57      	ldr	r2, [pc, #348]	@ (80015d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 8001476:	6013      	str	r3, [r2, #0]
			Is_First_Captured_2 = 1;  // set the first captured as true
 8001478:	4b55      	ldr	r3, [pc, #340]	@ (80015d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800148c:	621a      	str	r2, [r3, #32]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6a1a      	ldr	r2, [r3, #32]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800149c:	621a      	str	r2, [r3, #32]
 800149e:	e063      	b.n	8001568 <HAL_TIM_IC_CaptureCallback+0x228>
					TIM_INPUTCHANNELPOLARITY_FALLING);
		}

		else if (Is_First_Captured_2 == 1)   // if the first is already captured
 80014a0:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d15f      	bne.n	8001568 <HAL_TIM_IC_CaptureCallback+0x228>
				{
			IC_Val2_2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read second value
 80014a8:	2108      	movs	r1, #8
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f003 ff66 	bl	800537c <HAL_TIM_ReadCapturedValue>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a49      	ldr	r2, [pc, #292]	@ (80015d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014b4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	625a      	str	r2, [r3, #36]	@ 0x24

			if (IC_Val2_2 > IC_Val1_2) {
 80014be:	4b46      	ldr	r3, [pc, #280]	@ (80015d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b44      	ldr	r3, [pc, #272]	@ (80015d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d907      	bls.n	80014da <HAL_TIM_IC_CaptureCallback+0x19a>
				Difference2 = IC_Val2_2 - IC_Val1_2;
 80014ca:	4b43      	ldr	r3, [pc, #268]	@ (80015d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	4a41      	ldr	r2, [pc, #260]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e00f      	b.n	80014fa <HAL_TIM_IC_CaptureCallback+0x1ba>
			}

			else if (IC_Val1_2 > IC_Val2_2) {
 80014da:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b3e      	ldr	r3, [pc, #248]	@ (80015d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d909      	bls.n	80014fa <HAL_TIM_IC_CaptureCallback+0x1ba>
				Difference2 = (0xffff - IC_Val1_2) + IC_Val2_2;
 80014e6:	4b3c      	ldr	r3, [pc, #240]	@ (80015d8 <HAL_TIM_IC_CaptureCallback+0x298>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4b3a      	ldr	r3, [pc, #232]	@ (80015d4 <HAL_TIM_IC_CaptureCallback+0x294>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80014f4:	33ff      	adds	r3, #255	@ 0xff
 80014f6:	4a39      	ldr	r2, [pc, #228]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014f8:	6013      	str	r3, [r2, #0]
			}

			Distance2 = Difference2 * .034 / 2;
 80014fa:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <HAL_TIM_IC_CaptureCallback+0x29c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ffc4 	bl	800048c <__aeabi_ui2d>
 8001504:	a32a      	add	r3, pc, #168	@ (adr r3, 80015b0 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f839 	bl	8000580 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800151e:	f7ff f959 	bl	80007d4 <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fa3b 	bl	80009a4 <__aeabi_d2uiz>
 800152e:	4603      	mov	r3, r0
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001534:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_2 = 0; // set it back to false
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6a1a      	ldr	r2, [r3, #32]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800154a:	621a      	str	r2, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6a12      	ldr	r2, [r2, #32]
 8001556:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_TIM_IC_CaptureCallback+0x28c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0208 	bic.w	r2, r2, #8
 8001566:	60da      	str	r2, [r3, #12]
		}
	}

	//3uz
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) // if the interrupt source is channel1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7f1b      	ldrb	r3, [r3, #28]
 800156c:	2b08      	cmp	r3, #8
 800156e:	f040 80a1 	bne.w	80016b4 <HAL_TIM_IC_CaptureCallback+0x374>
			{
		if (Is_First_Captured_3 == 0) // if the first value is not captured
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d138      	bne.n	80015ec <HAL_TIM_IC_CaptureCallback+0x2ac>
				{
			IC_Val1_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 800157a:	210c      	movs	r1, #12
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f003 fefd 	bl	800537c <HAL_TIM_ReadCapturedValue>
 8001582:	4603      	mov	r3, r0
 8001584:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001586:	6013      	str	r3, [r2, #0]
			Is_First_Captured_3 = 1;  // set the first captured as true
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800159c:	621a      	str	r2, [r3, #32]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a1a      	ldr	r2, [r3, #32]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015ac:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
		}
	}

}
 80015ae:	e081      	b.n	80016b4 <HAL_TIM_IC_CaptureCallback+0x374>
 80015b0:	b020c49c 	.word	0xb020c49c
 80015b4:	3fa16872 	.word	0x3fa16872
 80015b8:	20000088 	.word	0x20000088
 80015bc:	2000007c 	.word	0x2000007c
 80015c0:	20000080 	.word	0x20000080
 80015c4:	20000084 	.word	0x20000084
 80015c8:	20000089 	.word	0x20000089
 80015cc:	20000524 	.word	0x20000524
 80015d0:	20000094 	.word	0x20000094
 80015d4:	2000008c 	.word	0x2000008c
 80015d8:	20000090 	.word	0x20000090
 80015dc:	20000098 	.word	0x20000098
 80015e0:	20000095 	.word	0x20000095
 80015e4:	200000a4 	.word	0x200000a4
 80015e8:	2000009c 	.word	0x2000009c
		else if (Is_First_Captured_3 == 1)   // if the first is already captured
 80015ec:	4b36      	ldr	r3, [pc, #216]	@ (80016c8 <HAL_TIM_IC_CaptureCallback+0x388>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d15f      	bne.n	80016b4 <HAL_TIM_IC_CaptureCallback+0x374>
			IC_Val2_3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read second value
 80015f4:	210c      	movs	r1, #12
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f003 fec0 	bl	800537c <HAL_TIM_ReadCapturedValue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a33      	ldr	r2, [pc, #204]	@ (80016cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001600:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2_3 > IC_Val1_3) {
 800160a:	4b30      	ldr	r3, [pc, #192]	@ (80016cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d907      	bls.n	8001626 <HAL_TIM_IC_CaptureCallback+0x2e6>
				Difference3 = IC_Val2_3 - IC_Val1_3;
 8001616:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	4a2c      	ldr	r2, [pc, #176]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e00f      	b.n	8001646 <HAL_TIM_IC_CaptureCallback+0x306>
			else if (IC_Val1_3 > IC_Val2_3) {
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b28      	ldr	r3, [pc, #160]	@ (80016cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d909      	bls.n	8001646 <HAL_TIM_IC_CaptureCallback+0x306>
				Difference3 = (0xffff - IC_Val1_3) + IC_Val2_3;
 8001632:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001640:	33ff      	adds	r3, #255	@ 0xff
 8001642:	4a24      	ldr	r2, [pc, #144]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001644:	6013      	str	r3, [r2, #0]
			Distance3 = Difference3 * .034 / 2;
 8001646:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff1e 	bl	800048c <__aeabi_ui2d>
 8001650:	a31b      	add	r3, pc, #108	@ (adr r3, 80016c0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ff93 	bl	8000580 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800166a:	f7ff f8b3 	bl	80007d4 <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff f995 	bl	80009a4 <__aeabi_d2uiz>
 800167a:	4603      	mov	r3, r0
 800167c:	b2da      	uxtb	r2, r3
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x398>)
 8001680:	701a      	strb	r2, [r3, #0]
			Is_First_Captured_3 = 0; // set it back to false
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6a1a      	ldr	r2, [r3, #32]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001696:	621a      	str	r2, [r3, #32]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a12      	ldr	r2, [r2, #32]
 80016a2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x39c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x39c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0210 	bic.w	r2, r2, #16
 80016b2:	60da      	str	r2, [r3, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	f3af 8000 	nop.w
 80016c0:	b020c49c 	.word	0xb020c49c
 80016c4:	3fa16872 	.word	0x3fa16872
 80016c8:	200000a4 	.word	0x200000a4
 80016cc:	200000a0 	.word	0x200000a0
 80016d0:	2000009c 	.word	0x2000009c
 80016d4:	200000a8 	.word	0x200000a8
 80016d8:	200000a5 	.word	0x200000a5
 80016dc:	20000524 	.word	0x20000524

080016e0 <HCSR04_Read>:

void HCSR04_Read(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ea:	480b      	ldr	r0, [pc, #44]	@ (8001718 <HCSR04_Read+0x38>)
 80016ec:	f001 fb08 	bl	8002d00 <HAL_GPIO_WritePin>
	HAL_Delay(1);   // wait for 10 us
 80016f0:	2001      	movs	r0, #1
 80016f2:	f001 f83b 	bl	800276c <HAL_Delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <HCSR04_Read+0x38>)
 80016fe:	f001 faff 	bl	8002d00 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HCSR04_Read+0x3c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <HCSR04_Read+0x3c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0202 	orr.w	r2, r2, #2
 8001710:	60da      	str	r2, [r3, #12]
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40020000 	.word	0x40020000
 800171c:	20000524 	.word	0x20000524

08001720 <HCSR04_Read2>:
void HCSR04_Read2(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001724:	2201      	movs	r2, #1
 8001726:	2102      	movs	r1, #2
 8001728:	480a      	ldr	r0, [pc, #40]	@ (8001754 <HCSR04_Read2+0x34>)
 800172a:	f001 fae9 	bl	8002d00 <HAL_GPIO_WritePin>
	HAL_Delay(1);   // wait for 10 us
 800172e:	2001      	movs	r0, #1
 8001730:	f001 f81c 	bl	800276c <HAL_Delay>
	HAL_GPIO_WritePin(TRIG2_PORT, TRIG2_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001734:	2200      	movs	r2, #0
 8001736:	2102      	movs	r1, #2
 8001738:	4806      	ldr	r0, [pc, #24]	@ (8001754 <HCSR04_Read2+0x34>)
 800173a:	f001 fae1 	bl	8002d00 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC3);
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HCSR04_Read2+0x38>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <HCSR04_Read2+0x38>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0208 	orr.w	r2, r2, #8
 800174c:	60da      	str	r2, [r3, #12]
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40020000 	.word	0x40020000
 8001758:	20000524 	.word	0x20000524

0800175c <HCSR04_Read3>:
void HCSR04_Read3(void) {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG3_PORT, TRIG3_PIN, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001760:	2201      	movs	r2, #1
 8001762:	2110      	movs	r1, #16
 8001764:	480a      	ldr	r0, [pc, #40]	@ (8001790 <HCSR04_Read3+0x34>)
 8001766:	f001 facb 	bl	8002d00 <HAL_GPIO_WritePin>
	HAL_Delay(1);   // wait for 10 us
 800176a:	2001      	movs	r0, #1
 800176c:	f000 fffe 	bl	800276c <HAL_Delay>
	HAL_GPIO_WritePin(TRIG3_PORT, TRIG3_PIN, GPIO_PIN_RESET); // pull the TRIG pin low
 8001770:	2200      	movs	r2, #0
 8001772:	2110      	movs	r1, #16
 8001774:	4806      	ldr	r0, [pc, #24]	@ (8001790 <HCSR04_Read3+0x34>)
 8001776:	f001 fac3 	bl	8002d00 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC4);
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HCSR04_Read3+0x38>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <HCSR04_Read3+0x38>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0210 	orr.w	r2, r2, #16
 8001788:	60da      	str	r2, [r3, #12]
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020000 	.word	0x40020000
 8001794:	20000524 	.word	0x20000524

08001798 <playTone>:

void playTone(uint32_t freq, uint32_t duration_ms) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	uint32_t timer_clk = 1000000;  // After prescaler = 89
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <playTone+0x58>)
 80017a4:	617b      	str	r3, [r7, #20]
	uint32_t period = timer_clk / freq - 1;
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	613b      	str	r3, [r7, #16]
	uint32_t duty = (period + 1) / 2;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	3301      	adds	r3, #1
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(&htim3, period);
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <playTone+0x5c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017c2:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <playTone+0x5c>)
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 80017c8:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <playTone+0x5c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017d0:	2100      	movs	r1, #0
 80017d2:	4808      	ldr	r0, [pc, #32]	@ (80017f4 <playTone+0x5c>)
 80017d4:	f003 f8d4 	bl	8004980 <HAL_TIM_PWM_Start>
	HAL_Delay(duration_ms);
 80017d8:	6838      	ldr	r0, [r7, #0]
 80017da:	f000 ffc7 	bl	800276c <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80017de:	2100      	movs	r1, #0
 80017e0:	4804      	ldr	r0, [pc, #16]	@ (80017f4 <playTone+0x5c>)
 80017e2:	f003 f995 	bl	8004b10 <HAL_TIM_PWM_Stop>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	000f4240 	.word	0x000f4240
 80017f4:	2000056c 	.word	0x2000056c

080017f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017fe:	f000 ff43 	bl	8002688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001802:	f000 f91b 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001806:	f7ff fc97 	bl	8001138 <MX_GPIO_Init>
  MX_SPI1_Init();
 800180a:	f000 f98b 	bl	8001b24 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800180e:	f000 fe9f 	bl	8002550 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001812:	f7ff fd1d 	bl	8001250 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001816:	f000 fcd1 	bl	80021bc <MX_TIM1_Init>
  MX_TIM6_Init();
 800181a:	f000 fd95 	bl	8002348 <MX_TIM6_Init>
  MX_TIM3_Init();
 800181e:	f000 fd39 	bl	8002294 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	MFRC522_Init();
 8001822:	f7ff fb2d 	bl	8000e80 <MFRC522_Init>
	ssd1306_Init();
 8001826:	f000 fa55 	bl	8001cd4 <ssd1306_Init>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800182a:	2100      	movs	r1, #0
 800182c:	4875      	ldr	r0, [pc, #468]	@ (8001a04 <main+0x20c>)
 800182e:	f003 fa2f 	bl	8004c90 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001832:	2108      	movs	r1, #8
 8001834:	4873      	ldr	r0, [pc, #460]	@ (8001a04 <main+0x20c>)
 8001836:	f003 fa2b 	bl	8004c90 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 800183a:	210c      	movs	r1, #12
 800183c:	4871      	ldr	r0, [pc, #452]	@ (8001a04 <main+0x20c>)
 800183e:	f003 fa27 	bl	8004c90 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Base_Start(&htim6);
 8001842:	4871      	ldr	r0, [pc, #452]	@ (8001a08 <main+0x210>)
 8001844:	f002 ffe4 	bl	8004810 <HAL_TIM_Base_Start>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		status = MFRC522_Request(PICC_REQIDL, str);
 8001848:	4970      	ldr	r1, [pc, #448]	@ (8001a0c <main+0x214>)
 800184a:	2026      	movs	r0, #38	@ 0x26
 800184c:	f7ff fc11 	bl	8001072 <MFRC522_Request>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	4b6e      	ldr	r3, [pc, #440]	@ (8001a10 <main+0x218>)
 8001856:	701a      	strb	r2, [r3, #0]
		status = MFRC522_Anticoll(str);
 8001858:	486c      	ldr	r0, [pc, #432]	@ (8001a0c <main+0x214>)
 800185a:	f7ff fc2f 	bl	80010bc <MFRC522_Anticoll>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b6b      	ldr	r3, [pc, #428]	@ (8001a10 <main+0x218>)
 8001864:	701a      	strb	r2, [r3, #0]
		memcpy(sNum, str, 4);
 8001866:	4b69      	ldr	r3, [pc, #420]	@ (8001a0c <main+0x214>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a6a      	ldr	r2, [pc, #424]	@ (8001a14 <main+0x21c>)
 800186c:	6013      	str	r3, [r2, #0]
		HAL_Delay(200);
 800186e:	20c8      	movs	r0, #200	@ 0xc8
 8001870:	f000 ff7c 	bl	800276c <HAL_Delay>
		if ((str[0] == 0x75) && (str[1] == 0xED) && (str[2] == 0xE7)
 8001874:	4b65      	ldr	r3, [pc, #404]	@ (8001a0c <main+0x214>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b75      	cmp	r3, #117	@ 0x75
 800187a:	d125      	bne.n	80018c8 <main+0xd0>
 800187c:	4b63      	ldr	r3, [pc, #396]	@ (8001a0c <main+0x214>)
 800187e:	785b      	ldrb	r3, [r3, #1]
 8001880:	2bed      	cmp	r3, #237	@ 0xed
 8001882:	d121      	bne.n	80018c8 <main+0xd0>
 8001884:	4b61      	ldr	r3, [pc, #388]	@ (8001a0c <main+0x214>)
 8001886:	789b      	ldrb	r3, [r3, #2]
 8001888:	2be7      	cmp	r3, #231	@ 0xe7
 800188a:	d11d      	bne.n	80018c8 <main+0xd0>
				&& (str[3] == 0x2B)) {
 800188c:	4b5f      	ldr	r3, [pc, #380]	@ (8001a0c <main+0x214>)
 800188e:	78db      	ldrb	r3, [r3, #3]
 8001890:	2b2b      	cmp	r3, #43	@ 0x2b
 8001892:	d119      	bne.n	80018c8 <main+0xd0>
			playTone(2500, 200);
 8001894:	21c8      	movs	r1, #200	@ 0xc8
 8001896:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800189a:	f7ff ff7d 	bl	8001798 <playTone>
			ssd1306_Fill(Black);
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 fa82 	bl	8001da8 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 80018a4:	2100      	movs	r1, #0
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 fbca 	bl	8002040 <ssd1306_SetCursor>
			ssd1306_WriteString("Kartica ocitana!", Font_6x8, White);
 80018ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001a18 <main+0x220>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	9200      	str	r2, [sp, #0]
 80018b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b4:	4859      	ldr	r0, [pc, #356]	@ (8001a1c <main+0x224>)
 80018b6:	f000 fb9d 	bl	8001ff4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80018ba:	f000 fa8d 	bl	8001dd8 <ssd1306_UpdateScreen>
			HAL_Delay(5000);
 80018be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80018c2:	f000 ff53 	bl	800276c <HAL_Delay>
 80018c6:	e03e      	b.n	8001946 <main+0x14e>

		} else if ((str[0] != 0x75) && (str[1] != 0xED) && (str[2] != 0xE7)
 80018c8:	4b50      	ldr	r3, [pc, #320]	@ (8001a0c <main+0x214>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b75      	cmp	r3, #117	@ 0x75
 80018ce:	d02a      	beq.n	8001926 <main+0x12e>
 80018d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001a0c <main+0x214>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2bed      	cmp	r3, #237	@ 0xed
 80018d6:	d026      	beq.n	8001926 <main+0x12e>
 80018d8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a0c <main+0x214>)
 80018da:	789b      	ldrb	r3, [r3, #2]
 80018dc:	2be7      	cmp	r3, #231	@ 0xe7
 80018de:	d022      	beq.n	8001926 <main+0x12e>
				&& (str[3] != 0x2B)) {
 80018e0:	4b4a      	ldr	r3, [pc, #296]	@ (8001a0c <main+0x214>)
 80018e2:	78db      	ldrb	r3, [r3, #3]
 80018e4:	2b2b      	cmp	r3, #43	@ 0x2b
 80018e6:	d01e      	beq.n	8001926 <main+0x12e>
			playTone(2500, 200);
 80018e8:	21c8      	movs	r1, #200	@ 0xc8
 80018ea:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80018ee:	f7ff ff53 	bl	8001798 <playTone>
			playTone(2500, 200);
 80018f2:	21c8      	movs	r1, #200	@ 0xc8
 80018f4:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 80018f8:	f7ff ff4e 	bl	8001798 <playTone>
			ssd1306_Fill(Black);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 fa53 	bl	8001da8 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 8001902:	2100      	movs	r1, #0
 8001904:	2000      	movs	r0, #0
 8001906:	f000 fb9b 	bl	8002040 <ssd1306_SetCursor>
			ssd1306_WriteString("Pogresna kartica!.", Font_6x8, White);
 800190a:	4b43      	ldr	r3, [pc, #268]	@ (8001a18 <main+0x220>)
 800190c:	2201      	movs	r2, #1
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001912:	4843      	ldr	r0, [pc, #268]	@ (8001a20 <main+0x228>)
 8001914:	f000 fb6e 	bl	8001ff4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001918:	f000 fa5e 	bl	8001dd8 <ssd1306_UpdateScreen>

			HAL_Delay(5000);
 800191c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001920:	f000 ff24 	bl	800276c <HAL_Delay>
 8001924:	e00f      	b.n	8001946 <main+0x14e>
		}

		else {
			ssd1306_Fill(Black);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 fa3e 	bl	8001da8 <ssd1306_Fill>
			ssd1306_SetCursor(0, 0);
 800192c:	2100      	movs	r1, #0
 800192e:	2000      	movs	r0, #0
 8001930:	f000 fb86 	bl	8002040 <ssd1306_SetCursor>
			ssd1306_WriteString("Prislonite karticu.", Font_6x8, White);
 8001934:	4b38      	ldr	r3, [pc, #224]	@ (8001a18 <main+0x220>)
 8001936:	2201      	movs	r2, #1
 8001938:	9200      	str	r2, [sp, #0]
 800193a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800193c:	4839      	ldr	r0, [pc, #228]	@ (8001a24 <main+0x22c>)
 800193e:	f000 fb59 	bl	8001ff4 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8001942:	f000 fa49 	bl	8001dd8 <ssd1306_UpdateScreen>
		}

		HCSR04_Read();
 8001946:	f7ff fecb 	bl	80016e0 <HCSR04_Read>
		HAL_Delay(200);
 800194a:	20c8      	movs	r0, #200	@ 0xc8
 800194c:	f000 ff0e 	bl	800276c <HAL_Delay>

		if (Distance <= 5) {
 8001950:	4b35      	ldr	r3, [pc, #212]	@ (8001a28 <main+0x230>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d80a      	bhi.n	800196e <main+0x176>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2140      	movs	r1, #64	@ 0x40
 800195c:	4833      	ldr	r0, [pc, #204]	@ (8001a2c <main+0x234>)
 800195e:	f001 f9cf 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8001962:	2201      	movs	r2, #1
 8001964:	2108      	movs	r1, #8
 8001966:	4832      	ldr	r0, [pc, #200]	@ (8001a30 <main+0x238>)
 8001968:	f001 f9ca 	bl	8002d00 <HAL_GPIO_WritePin>
 800196c:	e009      	b.n	8001982 <main+0x18a>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	2140      	movs	r1, #64	@ 0x40
 8001972:	482e      	ldr	r0, [pc, #184]	@ (8001a2c <main+0x234>)
 8001974:	f001 f9c4 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2108      	movs	r1, #8
 800197c:	482c      	ldr	r0, [pc, #176]	@ (8001a30 <main+0x238>)
 800197e:	f001 f9bf 	bl	8002d00 <HAL_GPIO_WritePin>
		}

		HCSR04_Read2();
 8001982:	f7ff fecd 	bl	8001720 <HCSR04_Read2>
		HAL_Delay(200);
 8001986:	20c8      	movs	r0, #200	@ 0xc8
 8001988:	f000 fef0 	bl	800276c <HAL_Delay>

		if (Distance2 <= 5) {
 800198c:	4b29      	ldr	r3, [pc, #164]	@ (8001a34 <main+0x23c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d80b      	bhi.n	80019ac <main+0x1b4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800199a:	4824      	ldr	r0, [pc, #144]	@ (8001a2c <main+0x234>)
 800199c:	f001 f9b0 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 1); // LED2 ON
 80019a0:	2201      	movs	r2, #1
 80019a2:	2104      	movs	r1, #4
 80019a4:	4822      	ldr	r0, [pc, #136]	@ (8001a30 <main+0x238>)
 80019a6:	f001 f9ab 	bl	8002d00 <HAL_GPIO_WritePin>
 80019aa:	e00a      	b.n	80019c2 <main+0x1ca>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019b2:	481e      	ldr	r0, [pc, #120]	@ (8001a2c <main+0x234>)
 80019b4:	f001 f9a4 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2104      	movs	r1, #4
 80019bc:	481c      	ldr	r0, [pc, #112]	@ (8001a30 <main+0x238>)
 80019be:	f001 f99f 	bl	8002d00 <HAL_GPIO_WritePin>
		}

		HCSR04_Read3();
 80019c2:	f7ff fecb 	bl	800175c <HCSR04_Read3>
		HAL_Delay(200);
 80019c6:	20c8      	movs	r0, #200	@ 0xc8
 80019c8:	f000 fed0 	bl	800276c <HAL_Delay>

		if (Distance3 <= 5) {
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <main+0x240>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d80b      	bhi.n	80019ec <main+0x1f4>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2102      	movs	r1, #2
 80019d8:	4814      	ldr	r0, [pc, #80]	@ (8001a2c <main+0x234>)
 80019da:	f001 f991 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1); // LED2 ON
 80019de:	2201      	movs	r2, #1
 80019e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019e4:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <main+0x234>)
 80019e6:	f001 f98b 	bl	8002d00 <HAL_GPIO_WritePin>
 80019ea:	e72d      	b.n	8001848 <main+0x50>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	2102      	movs	r1, #2
 80019f0:	480e      	ldr	r0, [pc, #56]	@ (8001a2c <main+0x234>)
 80019f2:	f001 f985 	bl	8002d00 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019fc:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <main+0x234>)
 80019fe:	f001 f97f 	bl	8002d00 <HAL_GPIO_WritePin>
		status = MFRC522_Request(PICC_REQIDL, str);
 8001a02:	e721      	b.n	8001848 <main+0x50>
 8001a04:	20000524 	.word	0x20000524
 8001a08:	200005b4 	.word	0x200005b4
 8001a0c:	200000b0 	.word	0x200000b0
 8001a10:	200000ac 	.word	0x200000ac
 8001a14:	200000c0 	.word	0x200000c0
 8001a18:	080068e4 	.word	0x080068e4
 8001a1c:	080062b8 	.word	0x080062b8
 8001a20:	080062cc 	.word	0x080062cc
 8001a24:	080062e0 	.word	0x080062e0
 8001a28:	20000089 	.word	0x20000089
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	20000095 	.word	0x20000095
 8001a38:	200000a5 	.word	0x200000a5

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	@ 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	2234      	movs	r2, #52	@ 0x34
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 fbfc 	bl	8006248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <SystemClock_Config+0xd4>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a68:	4a29      	ldr	r2, [pc, #164]	@ (8001b10 <SystemClock_Config+0xd4>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a70:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <SystemClock_Config+0xd4>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <SystemClock_Config+0xd8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001a88:	4a22      	ldr	r2, [pc, #136]	@ (8001b14 <SystemClock_Config+0xd8>)
 8001a8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <SystemClock_Config+0xd8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aac:	2300      	movs	r3, #0
 8001aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001ab4:	2340      	movs	r3, #64	@ 0x40
 8001ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001abc:	2302      	movs	r3, #2
 8001abe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 f8a5 	bl	8003c18 <HAL_RCC_OscConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ad4:	f000 f820 	bl	8001b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad8:	230f      	movs	r3, #15
 8001ada:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001adc:	2302      	movs	r3, #2
 8001ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001ae0:	2390      	movs	r3, #144	@ 0x90
 8001ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ae4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f001 fdca 	bl	8003690 <HAL_RCC_ClockConfig>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001b02:	f000 f809 	bl	8001b18 <Error_Handler>
  }
}
 8001b06:	bf00      	nop
 8001b08:	3750      	adds	r7, #80	@ 0x50
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <Error_Handler+0x8>

08001b24 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b28:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b2a:	4a18      	ldr	r2, [pc, #96]	@ (8001b8c <MX_SPI1_Init+0x68>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b58:	2218      	movs	r2, #24
 8001b5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b70:	220a      	movs	r2, #10
 8001b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <MX_SPI1_Init+0x64>)
 8001b76:	f002 faed 	bl	8004154 <HAL_SPI_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b80:	f7ff ffca 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200000c4 	.word	0x200000c4
 8001b8c:	40013000 	.word	0x40013000

08001b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	@ 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a28      	ldr	r2, [pc, #160]	@ (8001c50 <HAL_SPI_MspInit+0xc0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d149      	bne.n	8001c46 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	4b27      	ldr	r3, [pc, #156]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bba:	4a26      	ldr	r2, [pc, #152]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc2:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a18      	ldr	r2, [pc, #96]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_SPI_MspInit+0xc4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c06:	23c0      	movs	r3, #192	@ 0xc0
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c16:	2305      	movs	r3, #5
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480d      	ldr	r0, [pc, #52]	@ (8001c58 <HAL_SPI_MspInit+0xc8>)
 8001c22:	f000 fed9 	bl	80029d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c26:	2308      	movs	r3, #8
 8001c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c36:	2305      	movs	r3, #5
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4806      	ldr	r0, [pc, #24]	@ (8001c5c <HAL_SPI_MspInit+0xcc>)
 8001c42:	f000 fec9 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c46:	bf00      	nop
 8001c48:	3728      	adds	r7, #40	@ 0x28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40013000 	.word	0x40013000
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400

08001c60 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af04      	add	r7, sp, #16
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	9302      	str	r3, [sp, #8]
 8001c80:	2301      	movs	r3, #1
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2178      	movs	r1, #120	@ 0x78
 8001c8e:	4803      	ldr	r0, [pc, #12]	@ (8001c9c <ssd1306_WriteCommand+0x2c>)
 8001c90:	f001 f994 	bl	8002fbc <HAL_I2C_Mem_Write>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000028 	.word	0x20000028

08001ca0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af04      	add	r7, sp, #16
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2240      	movs	r2, #64	@ 0x40
 8001cbe:	2178      	movs	r1, #120	@ 0x78
 8001cc0:	4803      	ldr	r0, [pc, #12]	@ (8001cd0 <ssd1306_WriteData+0x30>)
 8001cc2:	f001 f97b 	bl	8002fbc <HAL_I2C_Mem_Write>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000028 	.word	0x20000028

08001cd4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001cd8:	f7ff ffc2 	bl	8001c60 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001cdc:	2064      	movs	r0, #100	@ 0x64
 8001cde:	f000 fd45 	bl	800276c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f000 f9d8 	bl	8002098 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ce8:	2020      	movs	r0, #32
 8001cea:	f7ff ffc1 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff ffbe 	bl	8001c70 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001cf4:	20b0      	movs	r0, #176	@ 0xb0
 8001cf6:	f7ff ffbb 	bl	8001c70 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001cfa:	20c8      	movs	r0, #200	@ 0xc8
 8001cfc:	f7ff ffb8 	bl	8001c70 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff ffb5 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001d06:	2010      	movs	r0, #16
 8001d08:	f7ff ffb2 	bl	8001c70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001d0c:	2040      	movs	r0, #64	@ 0x40
 8001d0e:	f7ff ffaf 	bl	8001c70 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001d12:	20ff      	movs	r0, #255	@ 0xff
 8001d14:	f000 f9ac 	bl	8002070 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001d18:	20a1      	movs	r0, #161	@ 0xa1
 8001d1a:	f7ff ffa9 	bl	8001c70 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001d1e:	20a6      	movs	r0, #166	@ 0xa6
 8001d20:	f7ff ffa6 	bl	8001c70 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001d24:	20a8      	movs	r0, #168	@ 0xa8
 8001d26:	f7ff ffa3 	bl	8001c70 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001d2a:	203f      	movs	r0, #63	@ 0x3f
 8001d2c:	f7ff ffa0 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d30:	20a4      	movs	r0, #164	@ 0xa4
 8001d32:	f7ff ff9d 	bl	8001c70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001d36:	20d3      	movs	r0, #211	@ 0xd3
 8001d38:	f7ff ff9a 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7ff ff97 	bl	8001c70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d42:	20d5      	movs	r0, #213	@ 0xd5
 8001d44:	f7ff ff94 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001d48:	20f0      	movs	r0, #240	@ 0xf0
 8001d4a:	f7ff ff91 	bl	8001c70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001d4e:	20d9      	movs	r0, #217	@ 0xd9
 8001d50:	f7ff ff8e 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001d54:	2022      	movs	r0, #34	@ 0x22
 8001d56:	f7ff ff8b 	bl	8001c70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001d5a:	20da      	movs	r0, #218	@ 0xda
 8001d5c:	f7ff ff88 	bl	8001c70 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001d60:	2012      	movs	r0, #18
 8001d62:	f7ff ff85 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001d66:	20db      	movs	r0, #219	@ 0xdb
 8001d68:	f7ff ff82 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001d6c:	2020      	movs	r0, #32
 8001d6e:	f7ff ff7f 	bl	8001c70 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001d72:	208d      	movs	r0, #141	@ 0x8d
 8001d74:	f7ff ff7c 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001d78:	2014      	movs	r0, #20
 8001d7a:	f7ff ff79 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 f98a 	bl	8002098 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f000 f80f 	bl	8001da8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001d8a:	f000 f825 	bl	8001dd8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <ssd1306_Init+0xd0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001d94:	4b03      	ldr	r3, [pc, #12]	@ (8001da4 <ssd1306_Init+0xd0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001d9a:	4b02      	ldr	r3, [pc, #8]	@ (8001da4 <ssd1306_Init+0xd0>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	711a      	strb	r2, [r3, #4]
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2000051c 	.word	0x2000051c

08001da8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <ssd1306_Fill+0x14>
 8001db8:	2300      	movs	r3, #0
 8001dba:	e000      	b.n	8001dbe <ssd1306_Fill+0x16>
 8001dbc:	23ff      	movs	r3, #255	@ 0xff
 8001dbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4803      	ldr	r0, [pc, #12]	@ (8001dd4 <ssd1306_Fill+0x2c>)
 8001dc6:	f004 fa3f 	bl	8006248 <memset>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000011c 	.word	0x2000011c

08001dd8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	e016      	b.n	8001e12 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	3b50      	subs	r3, #80	@ 0x50
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff40 	bl	8001c70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ff3d 	bl	8001c70 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001df6:	2010      	movs	r0, #16
 8001df8:	f7ff ff3a 	bl	8001c70 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	01db      	lsls	r3, r3, #7
 8001e00:	4a08      	ldr	r2, [pc, #32]	@ (8001e24 <ssd1306_UpdateScreen+0x4c>)
 8001e02:	4413      	add	r3, r2
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff4a 	bl	8001ca0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	d9e5      	bls.n	8001de4 <ssd1306_UpdateScreen+0xc>
    }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000011c 	.word	0x2000011c

08001e28 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
 8001e32:	460b      	mov	r3, r1
 8001e34:	71bb      	strb	r3, [r7, #6]
 8001e36:	4613      	mov	r3, r2
 8001e38:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db3d      	blt.n	8001ebe <ssd1306_DrawPixel+0x96>
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e46:	d83a      	bhi.n	8001ebe <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001e48:	797b      	ldrb	r3, [r7, #5]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d11a      	bne.n	8001e84 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	08db      	lsrs	r3, r3, #3
 8001e54:	b2d8      	uxtb	r0, r3
 8001e56:	4603      	mov	r3, r0
 8001e58:	01db      	lsls	r3, r3, #7
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ecc <ssd1306_DrawPixel+0xa4>)
 8001e5e:	5cd3      	ldrb	r3, [r2, r3]
 8001e60:	b25a      	sxtb	r2, r3
 8001e62:	79bb      	ldrb	r3, [r7, #6]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	2101      	movs	r1, #1
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	b25b      	sxtb	r3, r3
 8001e70:	4313      	orrs	r3, r2
 8001e72:	b259      	sxtb	r1, r3
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	4603      	mov	r3, r0
 8001e78:	01db      	lsls	r3, r3, #7
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b2c9      	uxtb	r1, r1
 8001e7e:	4a13      	ldr	r2, [pc, #76]	@ (8001ecc <ssd1306_DrawPixel+0xa4>)
 8001e80:	54d1      	strb	r1, [r2, r3]
 8001e82:	e01d      	b.n	8001ec0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e84:	79fa      	ldrb	r2, [r7, #7]
 8001e86:	79bb      	ldrb	r3, [r7, #6]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	b2d8      	uxtb	r0, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	01db      	lsls	r3, r3, #7
 8001e90:	4413      	add	r3, r2
 8001e92:	4a0e      	ldr	r2, [pc, #56]	@ (8001ecc <ssd1306_DrawPixel+0xa4>)
 8001e94:	5cd3      	ldrb	r3, [r2, r3]
 8001e96:	b25a      	sxtb	r2, r3
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	4013      	ands	r3, r2
 8001eac:	b259      	sxtb	r1, r3
 8001eae:	79fa      	ldrb	r2, [r7, #7]
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	01db      	lsls	r3, r3, #7
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b2c9      	uxtb	r1, r1
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <ssd1306_DrawPixel+0xa4>)
 8001eba:	54d1      	strb	r1, [r2, r3]
 8001ebc:	e000      	b.n	8001ec0 <ssd1306_DrawPixel+0x98>
        return;
 8001ebe:	bf00      	nop
    }
}
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000011c 	.word	0x2000011c

08001ed0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b089      	sub	sp, #36	@ 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	4638      	mov	r0, r7
 8001eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ede:	4623      	mov	r3, r4
 8001ee0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	2b1f      	cmp	r3, #31
 8001ee6:	d902      	bls.n	8001eee <ssd1306_WriteChar+0x1e>
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	2b7e      	cmp	r3, #126	@ 0x7e
 8001eec:	d901      	bls.n	8001ef2 <ssd1306_WriteChar+0x22>
        return 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e079      	b.n	8001fe6 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <ssd1306_WriteChar+0x34>
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	3b20      	subs	r3, #32
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	e000      	b.n	8001f06 <ssd1306_WriteChar+0x36>
 8001f04:	783b      	ldrb	r3, [r7, #0]
 8001f06:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f08:	4b39      	ldr	r3, [pc, #228]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	4413      	add	r3, r2
 8001f12:	2b80      	cmp	r3, #128	@ 0x80
 8001f14:	dc06      	bgt.n	8001f24 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001f16:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001f18:	885b      	ldrh	r3, [r3, #2]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001f20:	2b40      	cmp	r3, #64	@ 0x40
 8001f22:	dd01      	ble.n	8001f28 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e05e      	b.n	8001fe6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
 8001f2c:	e04d      	b.n	8001fca <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	3b20      	subs	r3, #32
 8001f34:	7879      	ldrb	r1, [r7, #1]
 8001f36:	fb01 f303 	mul.w	r3, r1, r3
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	440b      	add	r3, r1
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e036      	b.n	8001fbc <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d013      	beq.n	8001f86 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	b2d8      	uxtb	r0, r3
 8001f6c:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001f6e:	885b      	ldrh	r3, [r3, #2]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4413      	add	r3, r2
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7ff ff52 	bl	8001e28 <ssd1306_DrawPixel>
 8001f84:	e017      	b.n	8001fb6 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4413      	add	r3, r2
 8001f92:	b2d8      	uxtb	r0, r3
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001f96:	885b      	ldrh	r3, [r3, #2]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	b2d9      	uxtb	r1, r3
 8001fa2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f7ff ff39 	bl	8001e28 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3c4      	bcc.n	8001f4e <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	787b      	ldrb	r3, [r7, #1]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d3ac      	bcc.n	8001f2e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	7dfb      	ldrb	r3, [r7, #23]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	4413      	add	r3, r2
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <ssd1306_WriteChar+0x120>)
 8001fe2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	@ 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd90      	pop	{r4, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000051c 	.word	0x2000051c

08001ff4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002002:	e013      	b.n	800202c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	7818      	ldrb	r0, [r3, #0]
 8002008:	7e3b      	ldrb	r3, [r7, #24]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	463b      	mov	r3, r7
 800200e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002010:	f7ff ff5e 	bl	8001ed0 <ssd1306_WriteChar>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d002      	beq.n	8002026 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	e008      	b.n	8002038 <ssd1306_WriteString+0x44>
        }
        str++;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e7      	bne.n	8002004 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	781b      	ldrb	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	460a      	mov	r2, r1
 800204a:	71fb      	strb	r3, [r7, #7]
 800204c:	4613      	mov	r3, r2
 800204e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	b29a      	uxth	r2, r3
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <ssd1306_SetCursor+0x2c>)
 8002056:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002058:	79bb      	ldrb	r3, [r7, #6]
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <ssd1306_SetCursor+0x2c>)
 800205e:	805a      	strh	r2, [r3, #2]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	2000051c 	.word	0x2000051c

08002070 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800207a:	2381      	movs	r3, #129	@ 0x81
 800207c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fdf5 	bl	8001c70 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fdf1 	bl	8001c70 <ssd1306_WriteCommand>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80020a8:	23af      	movs	r3, #175	@ 0xaf
 80020aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <ssd1306_SetDisplayOn+0x38>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	715a      	strb	r2, [r3, #5]
 80020b2:	e004      	b.n	80020be <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80020b4:	23ae      	movs	r3, #174	@ 0xae
 80020b6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <ssd1306_SetDisplayOn+0x38>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fdd5 	bl	8001c70 <ssd1306_WriteCommand>
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000051c 	.word	0x2000051c

080020d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	4b10      	ldr	r3, [pc, #64]	@ (8002120 <HAL_MspInit+0x4c>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <HAL_MspInit+0x4c>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002120 <HAL_MspInit+0x4c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4a08      	ldr	r2, [pc, #32]	@ (8002120 <HAL_MspInit+0x4c>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	@ 0x40
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_MspInit+0x4c>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <NMI_Handler+0x4>

0800212c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <MemManage_Handler+0x4>

0800213c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <UsageFault_Handler+0x4>

0800214c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217a:	f000 fad7 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <TIM1_CC_IRQHandler+0x10>)
 800218a:	f002 fea9 	bl	8004ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000524 	.word	0x20000524

08002198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <SystemInit+0x20>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	4a05      	ldr	r2, [pc, #20]	@ (80021b8 <SystemInit+0x20>)
 80021a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021cc:	463b      	mov	r3, r7
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021d8:	4b2c      	ldr	r3, [pc, #176]	@ (800228c <MX_TIM1_Init+0xd0>)
 80021da:	4a2d      	ldr	r2, [pc, #180]	@ (8002290 <MX_TIM1_Init+0xd4>)
 80021dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <MX_TIM1_Init+0xd0>)
 80021e0:	220f      	movs	r2, #15
 80021e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	4b29      	ldr	r3, [pc, #164]	@ (800228c <MX_TIM1_Init+0xd0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021ea:	4b28      	ldr	r3, [pc, #160]	@ (800228c <MX_TIM1_Init+0xd0>)
 80021ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f2:	4b26      	ldr	r3, [pc, #152]	@ (800228c <MX_TIM1_Init+0xd0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021f8:	4b24      	ldr	r3, [pc, #144]	@ (800228c <MX_TIM1_Init+0xd0>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fe:	4b23      	ldr	r3, [pc, #140]	@ (800228c <MX_TIM1_Init+0xd0>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002204:	4821      	ldr	r0, [pc, #132]	@ (800228c <MX_TIM1_Init+0xd0>)
 8002206:	f002 fcf3 	bl	8004bf0 <HAL_TIM_IC_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002210:	f7ff fc82 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800221c:	f107 0310 	add.w	r3, r7, #16
 8002220:	4619      	mov	r1, r3
 8002222:	481a      	ldr	r0, [pc, #104]	@ (800228c <MX_TIM1_Init+0xd0>)
 8002224:	f003 fcbc 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800222e:	f7ff fc73 	bl	8001b18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002232:	2300      	movs	r3, #0
 8002234:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002236:	2301      	movs	r3, #1
 8002238:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002242:	463b      	mov	r3, r7
 8002244:	2200      	movs	r2, #0
 8002246:	4619      	mov	r1, r3
 8002248:	4810      	ldr	r0, [pc, #64]	@ (800228c <MX_TIM1_Init+0xd0>)
 800224a:	f002 ff39 	bl	80050c0 <HAL_TIM_IC_ConfigChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002254:	f7ff fc60 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002258:	463b      	mov	r3, r7
 800225a:	2208      	movs	r2, #8
 800225c:	4619      	mov	r1, r3
 800225e:	480b      	ldr	r0, [pc, #44]	@ (800228c <MX_TIM1_Init+0xd0>)
 8002260:	f002 ff2e 	bl	80050c0 <HAL_TIM_IC_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800226a:	f7ff fc55 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800226e:	463b      	mov	r3, r7
 8002270:	220c      	movs	r2, #12
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	@ (800228c <MX_TIM1_Init+0xd0>)
 8002276:	f002 ff23 	bl	80050c0 <HAL_TIM_IC_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002280:	f7ff fc4a 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000524 	.word	0x20000524
 8002290:	40010000 	.word	0x40010000

08002294 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	f107 0320 	add.w	r3, r7, #32
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	615a      	str	r2, [r3, #20]
 80022b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022b6:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022b8:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <MX_TIM3_Init+0xb0>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 89;
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022be:	2259      	movs	r2, #89	@ 0x59
 80022c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 399;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022ca:	f240 128f 	movw	r2, #399	@ 0x18f
 80022ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022dc:	4818      	ldr	r0, [pc, #96]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022de:	f002 faff 	bl	80048e0 <HAL_TIM_PWM_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80022e8:	f7ff fc16 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022f4:	f107 0320 	add.w	r3, r7, #32
 80022f8:	4619      	mov	r1, r3
 80022fa:	4811      	ldr	r0, [pc, #68]	@ (8002340 <MX_TIM3_Init+0xac>)
 80022fc:	f003 fc50 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002306:	f7ff fc07 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230a:	2360      	movs	r3, #96	@ 0x60
 800230c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	4619      	mov	r1, r3
 8002320:	4807      	ldr	r0, [pc, #28]	@ (8002340 <MX_TIM3_Init+0xac>)
 8002322:	f002 ff69 	bl	80051f8 <HAL_TIM_PWM_ConfigChannel>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800232c:	f7ff fbf4 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002330:	4803      	ldr	r0, [pc, #12]	@ (8002340 <MX_TIM3_Init+0xac>)
 8002332:	f000 f8d3 	bl	80024dc <HAL_TIM_MspPostInit>

}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	@ 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000056c 	.word	0x2000056c
 8002344:	40000400 	.word	0x40000400

08002348 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234e:	463b      	mov	r3, r7
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <MX_TIM6_Init+0x64>)
 8002358:	4a15      	ldr	r2, [pc, #84]	@ (80023b0 <MX_TIM6_Init+0x68>)
 800235a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <MX_TIM6_Init+0x64>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <MX_TIM6_Init+0x64>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002368:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <MX_TIM6_Init+0x64>)
 800236a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800236e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <MX_TIM6_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <MX_TIM6_Init+0x64>)
 8002378:	f002 f9fa 	bl	8004770 <HAL_TIM_Base_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002382:	f7ff fbc9 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800238e:	463b      	mov	r3, r7
 8002390:	4619      	mov	r1, r3
 8002392:	4806      	ldr	r0, [pc, #24]	@ (80023ac <MX_TIM6_Init+0x64>)
 8002394:	f003 fc04 	bl	8005ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800239e:	f7ff fbbb 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	200005b4 	.word	0x200005b4
 80023b0:	40001000 	.word	0x40001000

080023b4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <HAL_TIM_IC_MspInit+0x94>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d134      	bne.n	8002440 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	4b1c      	ldr	r3, [pc, #112]	@ (800244c <HAL_TIM_IC_MspInit+0x98>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	4a1b      	ldr	r2, [pc, #108]	@ (800244c <HAL_TIM_IC_MspInit+0x98>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023e6:	4b19      	ldr	r3, [pc, #100]	@ (800244c <HAL_TIM_IC_MspInit+0x98>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <HAL_TIM_IC_MspInit+0x98>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a14      	ldr	r2, [pc, #80]	@ (800244c <HAL_TIM_IC_MspInit+0x98>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <HAL_TIM_IC_MspInit+0x98>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 800240e:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 8002412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002420:	2301      	movs	r3, #1
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4809      	ldr	r0, [pc, #36]	@ (8002450 <HAL_TIM_IC_MspInit+0x9c>)
 800242c:	f000 fad4 	bl	80029d8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2103      	movs	r1, #3
 8002434:	201b      	movs	r0, #27
 8002436:	f000 fa98 	bl	800296a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800243a:	201b      	movs	r0, #27
 800243c:	f000 fab1 	bl	80029a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	@ 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40010000 	.word	0x40010000
 800244c:	40023800 	.word	0x40023800
 8002450:	40020000 	.word	0x40020000

08002454 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <HAL_TIM_PWM_MspInit+0x3c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10d      	bne.n	8002482 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b0a      	ldr	r3, [pc, #40]	@ (8002494 <HAL_TIM_PWM_MspInit+0x40>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4a09      	ldr	r2, [pc, #36]	@ (8002494 <HAL_TIM_PWM_MspInit+0x40>)
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	6413      	str	r3, [r2, #64]	@ 0x40
 8002476:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <HAL_TIM_PWM_MspInit+0x40>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40000400 	.word	0x40000400
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0b      	ldr	r2, [pc, #44]	@ (80024d4 <HAL_TIM_Base_MspInit+0x3c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10d      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_TIM_Base_MspInit+0x40>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_TIM_Base_MspInit+0x40>)
 80024b4:	f043 0310 	orr.w	r3, r3, #16
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <HAL_TIM_Base_MspInit+0x40>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40001000 	.word	0x40001000
 80024d8:	40023800 	.word	0x40023800

080024dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 030c 	add.w	r3, r7, #12
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a12      	ldr	r2, [pc, #72]	@ (8002544 <HAL_TIM_MspPostInit+0x68>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d11d      	bne.n	800253a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <HAL_TIM_MspPostInit+0x6c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a10      	ldr	r2, [pc, #64]	@ (8002548 <HAL_TIM_MspPostInit+0x6c>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <HAL_TIM_MspPostInit+0x6c>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	60bb      	str	r3, [r7, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800251a:	2340      	movs	r3, #64	@ 0x40
 800251c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251e:	2302      	movs	r3, #2
 8002520:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800252a:	2302      	movs	r3, #2
 800252c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252e:	f107 030c 	add.w	r3, r7, #12
 8002532:	4619      	mov	r1, r3
 8002534:	4805      	ldr	r0, [pc, #20]	@ (800254c <HAL_TIM_MspPostInit+0x70>)
 8002536:	f000 fa4f 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800253a:	bf00      	nop
 800253c:	3720      	adds	r7, #32
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40000400 	.word	0x40000400
 8002548:	40023800 	.word	0x40023800
 800254c:	40020800 	.word	0x40020800

08002550 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 8002556:	4a12      	ldr	r2, [pc, #72]	@ (80025a0 <MX_USART2_UART_Init+0x50>)
 8002558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 800255c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002560:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 8002576:	220c      	movs	r2, #12
 8002578:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 800257c:	2200      	movs	r2, #0
 800257e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002580:	4b06      	ldr	r3, [pc, #24]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002586:	4805      	ldr	r0, [pc, #20]	@ (800259c <MX_USART2_UART_Init+0x4c>)
 8002588:	f003 fb9a 	bl	8005cc0 <HAL_UART_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002592:	f7ff fac1 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200005fc 	.word	0x200005fc
 80025a0:	40004400 	.word	0x40004400

080025a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	@ 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	@ (8002628 <HAL_UART_MspInit+0x84>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12b      	bne.n	800261e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b18      	ldr	r3, [pc, #96]	@ (800262c <HAL_UART_MspInit+0x88>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	4a17      	ldr	r2, [pc, #92]	@ (800262c <HAL_UART_MspInit+0x88>)
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_UART_MspInit+0x88>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_UART_MspInit+0x88>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	4a10      	ldr	r2, [pc, #64]	@ (800262c <HAL_UART_MspInit+0x88>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f2:	4b0e      	ldr	r3, [pc, #56]	@ (800262c <HAL_UART_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025fe:	230c      	movs	r3, #12
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	2303      	movs	r3, #3
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260e:	2307      	movs	r3, #7
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4805      	ldr	r0, [pc, #20]	@ (8002630 <HAL_UART_MspInit+0x8c>)
 800261a:	f000 f9dd 	bl	80029d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800261e:	bf00      	nop
 8002620:	3728      	adds	r7, #40	@ 0x28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40004400 	.word	0x40004400
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800266c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002638:	f7ff fdae 	bl	8002198 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800263c:	480c      	ldr	r0, [pc, #48]	@ (8002670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263e:	490d      	ldr	r1, [pc, #52]	@ (8002674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002640:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002654:	4c0a      	ldr	r4, [pc, #40]	@ (8002680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002662:	f003 fdf9 	bl	8006258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7ff f8c7 	bl	80017f8 <main>
  bx  lr    
 800266a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800266c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002678:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 800267c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002680:	20000648 	.word	0x20000648

08002684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	@ (80026c8 <HAL_Init+0x40>)
 8002692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <HAL_Init+0x40>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a07      	ldr	r2, [pc, #28]	@ (80026c8 <HAL_Init+0x40>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f000 f94f 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b6:	200f      	movs	r0, #15
 80026b8:	f000 f808 	bl	80026cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026bc:	f7ff fd0a 	bl	80020d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_InitTick+0x54>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <HAL_InitTick+0x58>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 f967 	bl	80029be <HAL_SYSTICK_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00e      	b.n	8002718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d80a      	bhi.n	8002716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002700:	2200      	movs	r2, #0
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f000 f92f 	bl	800296a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800270c:	4a06      	ldr	r2, [pc, #24]	@ (8002728 <HAL_InitTick+0x5c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000000 	.word	0x20000000
 8002724:	20000008 	.word	0x20000008
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_IncTick+0x20>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_IncTick+0x24>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <HAL_IncTick+0x24>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000008 	.word	0x20000008
 8002750:	20000644 	.word	0x20000644

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	20000644 	.word	0x20000644

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d005      	beq.n	8002792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002786:	4b0a      	ldr	r3, [pc, #40]	@ (80027b0 <HAL_Delay+0x44>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002792:	bf00      	nop
 8002794:	f7ff ffde 	bl	8002754 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d8f7      	bhi.n	8002794 <HAL_Delay+0x28>
  {
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000008 	.word	0x20000008

080027b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e6:	4a04      	ldr	r2, [pc, #16]	@ (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002800:	4b04      	ldr	r3, [pc, #16]	@ (8002814 <__NVIC_GetPriorityGrouping+0x18>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	f003 0307 	and.w	r3, r3, #7
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	2b00      	cmp	r3, #0
 8002828:	db0b      	blt.n	8002842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4907      	ldr	r1, [pc, #28]	@ (8002850 <__NVIC_EnableIRQ+0x38>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2001      	movs	r0, #1
 800283a:	fa00 f202 	lsl.w	r2, r0, r2
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db0a      	blt.n	800287e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	490c      	ldr	r1, [pc, #48]	@ (80028a0 <__NVIC_SetPriority+0x4c>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	440b      	add	r3, r1
 8002878:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800287c:	e00a      	b.n	8002894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4908      	ldr	r1, [pc, #32]	@ (80028a4 <__NVIC_SetPriority+0x50>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3b04      	subs	r3, #4
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	440b      	add	r3, r1
 8002892:	761a      	strb	r2, [r3, #24]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	@ 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f1c3 0307 	rsb	r3, r3, #7
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf28      	it	cs
 80028c6:	2304      	movcs	r3, #4
 80028c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d902      	bls.n	80028d8 <NVIC_EncodePriority+0x30>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3b03      	subs	r3, #3
 80028d6:	e000      	b.n	80028da <NVIC_EncodePriority+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	4313      	orrs	r3, r2
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	@ 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff8e 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	@ (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff29 	bl	80027b4 <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800297c:	f7ff ff3e 	bl	80027fc <__NVIC_GetPriorityGrouping>
 8002980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	6978      	ldr	r0, [r7, #20]
 8002988:	f7ff ff8e 	bl	80028a8 <NVIC_EncodePriority>
 800298c:	4602      	mov	r2, r0
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff5d 	bl	8002854 <__NVIC_SetPriority>
}
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff31 	bl	8002818 <__NVIC_EnableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa2 	bl	8002910 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	@ 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	e165      	b.n	8002cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029f4:	2201      	movs	r2, #1
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	f040 8154 	bne.w	8002cba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d005      	beq.n	8002a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d130      	bne.n	8002a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	2203      	movs	r2, #3
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 0201 	and.w	r2, r3, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d017      	beq.n	8002ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d123      	bne.n	8002b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	08da      	lsrs	r2, r3, #3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3208      	adds	r2, #8
 8002adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	220f      	movs	r2, #15
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	69b9      	ldr	r1, [r7, #24]
 8002b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0203 	and.w	r2, r3, #3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 80ae 	beq.w	8002cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd8 <HAL_GPIO_Init+0x300>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	4a5c      	ldr	r2, [pc, #368]	@ (8002cd8 <HAL_GPIO_Init+0x300>)
 8002b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd8 <HAL_GPIO_Init+0x300>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b7a:	4a58      	ldr	r2, [pc, #352]	@ (8002cdc <HAL_GPIO_Init+0x304>)
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ce0 <HAL_GPIO_Init+0x308>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d025      	beq.n	8002bf2 <HAL_GPIO_Init+0x21a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ce4 <HAL_GPIO_Init+0x30c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d01f      	beq.n	8002bee <HAL_GPIO_Init+0x216>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ce8 <HAL_GPIO_Init+0x310>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d019      	beq.n	8002bea <HAL_GPIO_Init+0x212>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8002cec <HAL_GPIO_Init+0x314>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_GPIO_Init+0x20e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf0 <HAL_GPIO_Init+0x318>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d00d      	beq.n	8002be2 <HAL_GPIO_Init+0x20a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002cf4 <HAL_GPIO_Init+0x31c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <HAL_GPIO_Init+0x206>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a49      	ldr	r2, [pc, #292]	@ (8002cf8 <HAL_GPIO_Init+0x320>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_GPIO_Init+0x202>
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	e00c      	b.n	8002bf4 <HAL_GPIO_Init+0x21c>
 8002bda:	2307      	movs	r3, #7
 8002bdc:	e00a      	b.n	8002bf4 <HAL_GPIO_Init+0x21c>
 8002bde:	2305      	movs	r3, #5
 8002be0:	e008      	b.n	8002bf4 <HAL_GPIO_Init+0x21c>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e006      	b.n	8002bf4 <HAL_GPIO_Init+0x21c>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e004      	b.n	8002bf4 <HAL_GPIO_Init+0x21c>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e002      	b.n	8002bf4 <HAL_GPIO_Init+0x21c>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_GPIO_Init+0x21c>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	69fa      	ldr	r2, [r7, #28]
 8002bf6:	f002 0203 	and.w	r2, r2, #3
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	4093      	lsls	r3, r2
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c04:	4935      	ldr	r1, [pc, #212]	@ (8002cdc <HAL_GPIO_Init+0x304>)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c12:	4b3a      	ldr	r3, [pc, #232]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c36:	4a31      	ldr	r2, [pc, #196]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c60:	4a26      	ldr	r2, [pc, #152]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c66:	4b25      	ldr	r3, [pc, #148]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c90:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb4:	4a11      	ldr	r2, [pc, #68]	@ (8002cfc <HAL_GPIO_Init+0x324>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	2b0f      	cmp	r3, #15
 8002cc4:	f67f ae96 	bls.w	80029f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3724      	adds	r7, #36	@ 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40021400 	.word	0x40021400
 8002cf8:	40021800 	.word	0x40021800
 8002cfc:	40013c00 	.word	0x40013c00

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d1c:	e003      	b.n	8002d26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	041a      	lsls	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e12b      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe faa6 	bl	80012ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	@ 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d98:	f000 fd6c 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a81      	ldr	r2, [pc, #516]	@ (8002fa8 <HAL_I2C_Init+0x274>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d807      	bhi.n	8002db8 <HAL_I2C_Init+0x84>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a80      	ldr	r2, [pc, #512]	@ (8002fac <HAL_I2C_Init+0x278>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e006      	b.n	8002dc6 <HAL_I2C_Init+0x92>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a7d      	ldr	r2, [pc, #500]	@ (8002fb0 <HAL_I2C_Init+0x27c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0e7      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a78      	ldr	r2, [pc, #480]	@ (8002fb4 <HAL_I2C_Init+0x280>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002fa8 <HAL_I2C_Init+0x274>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2C_Init+0xd4>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_I2C_Init+0xe8>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a69      	ldr	r2, [pc, #420]	@ (8002fb8 <HAL_I2C_Init+0x284>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	495c      	ldr	r1, [pc, #368]	@ (8002fa8 <HAL_I2C_Init+0x274>)
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	d819      	bhi.n	8002e70 <HAL_I2C_Init+0x13c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e50:	400b      	ands	r3, r1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_I2C_Init+0x138>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e59      	subs	r1, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6a:	e051      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e04f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_I2C_Init+0x168>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e012      	b.n	8002ec2 <HAL_I2C_Init+0x18e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	0099      	lsls	r1, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x196>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e022      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_I2C_Init+0x1bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e58      	subs	r0, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eee:	e00f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6809      	ldr	r1, [r1, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6911      	ldr	r1, [r2, #16]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68d2      	ldr	r2, [r2, #12]
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	000186a0 	.word	0x000186a0
 8002fac:	001e847f 	.word	0x001e847f
 8002fb0:	003d08ff 	.word	0x003d08ff
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	10624dd3 	.word	0x10624dd3

08002fbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	4608      	mov	r0, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4603      	mov	r3, r0
 8002fcc:	817b      	strh	r3, [r7, #10]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	813b      	strh	r3, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd6:	f7ff fbbd 	bl	8002754 <HAL_GetTick>
 8002fda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	f040 80d9 	bne.w	800319c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	2319      	movs	r3, #25
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	496d      	ldr	r1, [pc, #436]	@ (80031a8 <HAL_I2C_Mem_Write+0x1ec>)
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f971 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
 8003002:	e0cc      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Mem_Write+0x56>
 800300e:	2302      	movs	r3, #2
 8003010:	e0c5      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b01      	cmp	r3, #1
 8003026:	d007      	beq.n	8003038 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2221      	movs	r2, #33	@ 0x21
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2240      	movs	r2, #64	@ 0x40
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a3a      	ldr	r2, [r7, #32]
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a4d      	ldr	r2, [pc, #308]	@ (80031ac <HAL_I2C_Mem_Write+0x1f0>)
 8003078:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800307a:	88f8      	ldrh	r0, [r7, #6]
 800307c:	893a      	ldrh	r2, [r7, #8]
 800307e:	8979      	ldrh	r1, [r7, #10]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4603      	mov	r3, r0
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f890 	bl	80031b0 <I2C_RequestMemoryWrite>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d052      	beq.n	800313c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e081      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa36 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d107      	bne.n	80030c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e06b      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b04      	cmp	r3, #4
 8003102:	d11b      	bne.n	800313c <HAL_I2C_Mem_Write+0x180>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d017      	beq.n	800313c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1aa      	bne.n	800309a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fa29 	bl	80035a0 <I2C_WaitOnBTFFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	2b04      	cmp	r3, #4
 800315a:	d107      	bne.n	800316c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e016      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	e000      	b.n	800319e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800319c:	2302      	movs	r3, #2
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	00100002 	.word	0x00100002
 80031ac:	ffff0000 	.word	0xffff0000

080031b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	460b      	mov	r3, r1
 80031c4:	813b      	strh	r3, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f878 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00d      	beq.n	800320e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003200:	d103      	bne.n	800320a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e05f      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800320e:	897b      	ldrh	r3, [r7, #10]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800321c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	6a3a      	ldr	r2, [r7, #32]
 8003222:	492d      	ldr	r1, [pc, #180]	@ (80032d8 <I2C_RequestMemoryWrite+0x128>)
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f8d3 	bl	80033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04c      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324c:	6a39      	ldr	r1, [r7, #32]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f95e 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2b04      	cmp	r3, #4
 8003260:	d107      	bne.n	8003272 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003270:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e02b      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327c:	893b      	ldrh	r3, [r7, #8]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	e021      	b.n	80032cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003288:	893b      	ldrh	r3, [r7, #8]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	b29b      	uxth	r3, r3
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003298:	6a39      	ldr	r1, [r7, #32]
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f938 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00d      	beq.n	80032c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d107      	bne.n	80032be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e005      	b.n	80032ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c2:	893b      	ldrh	r3, [r7, #8]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	e048      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d044      	beq.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7ff fa2d 	bl	8002754 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d139      	bne.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b01      	cmp	r3, #1
 8003314:	d10d      	bne.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	e00c      	b.n	800334c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	43da      	mvns	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4013      	ands	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf0c      	ite	eq
 8003344:	2301      	moveq	r3, #1
 8003346:	2300      	movne	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	429a      	cmp	r2, r3
 8003350:	d116      	bne.n	8003380 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e023      	b.n	80033c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10d      	bne.n	80033a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	43da      	mvns	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	4013      	ands	r3, r2
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	bf0c      	ite	eq
 800339c:	2301      	moveq	r3, #1
 800339e:	2300      	movne	r3, #0
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	e00c      	b.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	43da      	mvns	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	4013      	ands	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d093      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033de:	e071      	b.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ee:	d123      	bne.n	8003438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003408:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	f043 0204 	orr.w	r2, r3, #4
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e067      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d041      	beq.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7ff f988 	bl	8002754 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d136      	bne.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d10c      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	4013      	ands	r3, r2
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	e00b      	b.n	8003492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e021      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10c      	bne.n	80034e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf14      	ite	ne
 80034e0:	2301      	movne	r3, #1
 80034e2:	2300      	moveq	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	e00b      	b.n	8003500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	43da      	mvns	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bf14      	ite	ne
 80034fa:	2301      	movne	r3, #1
 80034fc:	2300      	moveq	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	f47f af6d 	bne.w	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351c:	e034      	b.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f886 	bl	8003630 <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e034      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d028      	beq.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7ff f90d 	bl	8002754 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11d      	bne.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003556:	2b80      	cmp	r3, #128	@ 0x80
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003592:	2b80      	cmp	r3, #128	@ 0x80
 8003594:	d1c3      	bne.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ac:	e034      	b.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f83e 	bl	8003630 <I2C_IsAcknowledgeFailed>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e034      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d028      	beq.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7ff f8c5 	bl	8002754 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11d      	bne.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d016      	beq.n	8003618 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e007      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b04      	cmp	r3, #4
 8003624:	d1c3      	bne.n	80035ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003646:	d11b      	bne.n	8003680 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003650:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366c:	f043 0204 	orr.w	r2, r3, #4
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0cc      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b68      	ldr	r3, [pc, #416]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d90c      	bls.n	80036cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b65      	ldr	r3, [pc, #404]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b63      	ldr	r3, [pc, #396]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0b8      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e4:	4b59      	ldr	r3, [pc, #356]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4a58      	ldr	r2, [pc, #352]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036fc:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	4a52      	ldr	r2, [pc, #328]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b50      	ldr	r3, [pc, #320]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	494d      	ldr	r1, [pc, #308]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d044      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d119      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e07f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d003      	beq.n	800374e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374a:	2b03      	cmp	r3, #3
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b3f      	ldr	r3, [pc, #252]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e06f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e067      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b37      	ldr	r3, [pc, #220]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4934      	ldr	r1, [pc, #208]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fe ffe8 	bl	8002754 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fe ffe4 	bl	8002754 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e04f      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2b      	ldr	r3, [pc, #172]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b25      	ldr	r3, [pc, #148]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d20c      	bcs.n	80037d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d001      	beq.n	80037d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e032      	b.n	800383e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4916      	ldr	r1, [pc, #88]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003802:	4b12      	ldr	r3, [pc, #72]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	490e      	ldr	r1, [pc, #56]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003816:	f000 f855 	bl	80038c4 <HAL_RCC_GetSysClockFreq>
 800381a:	4602      	mov	r2, r0
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	490a      	ldr	r1, [pc, #40]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	5ccb      	ldrb	r3, [r1, r3]
 800382a:	fa22 f303 	lsr.w	r3, r2, r3
 800382e:	4a09      	ldr	r2, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003832:	4b09      	ldr	r3, [pc, #36]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe ff48 	bl	80026cc <HAL_InitTick>

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023c00 	.word	0x40023c00
 800384c:	40023800 	.word	0x40023800
 8003850:	080068f0 	.word	0x080068f0
 8003854:	20000000 	.word	0x20000000
 8003858:	20000004 	.word	0x20000004

0800385c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003860:	4b03      	ldr	r3, [pc, #12]	@ (8003870 <HAL_RCC_GetHCLKFreq+0x14>)
 8003862:	681b      	ldr	r3, [r3, #0]
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	20000000 	.word	0x20000000

08003874 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003878:	f7ff fff0 	bl	800385c <HAL_RCC_GetHCLKFreq>
 800387c:	4602      	mov	r2, r0
 800387e:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	0a9b      	lsrs	r3, r3, #10
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	4903      	ldr	r1, [pc, #12]	@ (8003898 <HAL_RCC_GetPCLK1Freq+0x24>)
 800388a:	5ccb      	ldrb	r3, [r1, r3]
 800388c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003890:	4618      	mov	r0, r3
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40023800 	.word	0x40023800
 8003898:	08006900 	.word	0x08006900

0800389c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038a0:	f7ff ffdc 	bl	800385c <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	0b5b      	lsrs	r3, r3, #13
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4903      	ldr	r1, [pc, #12]	@ (80038c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	08006900 	.word	0x08006900

080038c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c8:	b0a6      	sub	sp, #152	@ 0x98
 80038ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ea:	4bc8      	ldr	r3, [pc, #800]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	f200 817e 	bhi.w	8003bf4 <HAL_RCC_GetSysClockFreq+0x330>
 80038f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003935 	.word	0x08003935
 8003904:	08003bf5 	.word	0x08003bf5
 8003908:	08003bf5 	.word	0x08003bf5
 800390c:	08003bf5 	.word	0x08003bf5
 8003910:	0800393d 	.word	0x0800393d
 8003914:	08003bf5 	.word	0x08003bf5
 8003918:	08003bf5 	.word	0x08003bf5
 800391c:	08003bf5 	.word	0x08003bf5
 8003920:	08003945 	.word	0x08003945
 8003924:	08003bf5 	.word	0x08003bf5
 8003928:	08003bf5 	.word	0x08003bf5
 800392c:	08003bf5 	.word	0x08003bf5
 8003930:	08003aaf 	.word	0x08003aaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4bb6      	ldr	r3, [pc, #728]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800393a:	e15f      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800393c:	4bb5      	ldr	r3, [pc, #724]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x350>)
 800393e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003942:	e15b      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003944:	4bb1      	ldr	r3, [pc, #708]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800394c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003950:	4bae      	ldr	r3, [pc, #696]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d031      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395c:	4bab      	ldr	r3, [pc, #684]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	099b      	lsrs	r3, r3, #6
 8003962:	2200      	movs	r2, #0
 8003964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003966:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003968:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003970:	2300      	movs	r3, #0
 8003972:	667b      	str	r3, [r7, #100]	@ 0x64
 8003974:	4ba7      	ldr	r3, [pc, #668]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x350>)
 8003976:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800397a:	462a      	mov	r2, r5
 800397c:	fb03 f202 	mul.w	r2, r3, r2
 8003980:	2300      	movs	r3, #0
 8003982:	4621      	mov	r1, r4
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	4aa2      	ldr	r2, [pc, #648]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x350>)
 800398c:	4621      	mov	r1, r4
 800398e:	fba1 1202 	umull	r1, r2, r1, r2
 8003992:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003994:	460a      	mov	r2, r1
 8003996:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003998:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800399a:	4413      	add	r3, r2
 800399c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800399e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a2:	2200      	movs	r2, #0
 80039a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80039a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80039b0:	f7fd f818 	bl	80009e4 <__aeabi_uldivmod>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4613      	mov	r3, r2
 80039ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039be:	e064      	b.n	8003a8a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c0:	4b92      	ldr	r3, [pc, #584]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	099b      	lsrs	r3, r3, #6
 80039c6:	2200      	movs	r2, #0
 80039c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80039ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80039cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d4:	2300      	movs	r3, #0
 80039d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80039dc:	4622      	mov	r2, r4
 80039de:	462b      	mov	r3, r5
 80039e0:	f04f 0000 	mov.w	r0, #0
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	0159      	lsls	r1, r3, #5
 80039ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ee:	0150      	lsls	r0, r2, #5
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4621      	mov	r1, r4
 80039f6:	1a51      	subs	r1, r2, r1
 80039f8:	6139      	str	r1, [r7, #16]
 80039fa:	4629      	mov	r1, r5
 80039fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a0e:	4659      	mov	r1, fp
 8003a10:	018b      	lsls	r3, r1, #6
 8003a12:	4651      	mov	r1, sl
 8003a14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a18:	4651      	mov	r1, sl
 8003a1a:	018a      	lsls	r2, r1, #6
 8003a1c:	4651      	mov	r1, sl
 8003a1e:	ebb2 0801 	subs.w	r8, r2, r1
 8003a22:	4659      	mov	r1, fp
 8003a24:	eb63 0901 	sbc.w	r9, r3, r1
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3c:	4690      	mov	r8, r2
 8003a3e:	4699      	mov	r9, r3
 8003a40:	4623      	mov	r3, r4
 8003a42:	eb18 0303 	adds.w	r3, r8, r3
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	462b      	mov	r3, r5
 8003a4a:	eb49 0303 	adc.w	r3, r9, r3
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	028b      	lsls	r3, r1, #10
 8003a60:	4621      	mov	r1, r4
 8003a62:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a66:	4621      	mov	r1, r4
 8003a68:	028a      	lsls	r2, r1, #10
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a72:	2200      	movs	r2, #0
 8003a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a76:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a7c:	f7fc ffb2 	bl	80009e4 <__aeabi_uldivmod>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4613      	mov	r3, r2
 8003a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a8a:	4b60      	ldr	r3, [pc, #384]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	0c1b      	lsrs	r3, r3, #16
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	3301      	adds	r3, #1
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003a9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003aac:	e0a6      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aae:	4b57      	ldr	r3, [pc, #348]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aba:	4b54      	ldr	r3, [pc, #336]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d02a      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b51      	ldr	r3, [pc, #324]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	2200      	movs	r2, #0
 8003ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4b4e      	ldr	r3, [pc, #312]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x350>)
 8003adc:	fb03 f201 	mul.w	r2, r3, r1
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a4a      	ldr	r2, [pc, #296]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x350>)
 8003aea:	fba0 1202 	umull	r1, r2, r0, r2
 8003aee:	677a      	str	r2, [r7, #116]	@ 0x74
 8003af0:	460a      	mov	r2, r1
 8003af2:	673a      	str	r2, [r7, #112]	@ 0x70
 8003af4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003af6:	4413      	add	r3, r2
 8003af8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003afe:	2200      	movs	r2, #0
 8003b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b02:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b0c:	f7fc ff6a 	bl	80009e4 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b1a:	e05b      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	2200      	movs	r2, #0
 8003b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	623b      	str	r3, [r7, #32]
 8003b30:	2300      	movs	r3, #0
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0159      	lsls	r1, r3, #5
 8003b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4a:	0150      	lsls	r0, r2, #5
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4641      	mov	r1, r8
 8003b52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b56:	4649      	mov	r1, r9
 8003b58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b70:	ebb2 040a 	subs.w	r4, r2, sl
 8003b74:	eb63 050b 	sbc.w	r5, r3, fp
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	00eb      	lsls	r3, r5, #3
 8003b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b86:	00e2      	lsls	r2, r4, #3
 8003b88:	4614      	mov	r4, r2
 8003b8a:	461d      	mov	r5, r3
 8003b8c:	4643      	mov	r3, r8
 8003b8e:	18e3      	adds	r3, r4, r3
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	464b      	mov	r3, r9
 8003b94:	eb45 0303 	adc.w	r3, r5, r3
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	028b      	lsls	r3, r1, #10
 8003baa:	4621      	mov	r1, r4
 8003bac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	028a      	lsls	r2, r1, #10
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	61fa      	str	r2, [r7, #28]
 8003bc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc6:	f7fc ff0d 	bl	80009e4 <__aeabi_uldivmod>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4613      	mov	r3, r2
 8003bd0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0x348>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0f1b      	lsrs	r3, r3, #28
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003be2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003bf2:	e003      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003bf6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3798      	adds	r7, #152	@ 0x98
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	017d7840 	.word	0x017d7840

08003c18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e28d      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8083 	beq.w	8003d3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c38:	4b94      	ldr	r3, [pc, #592]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d019      	beq.n	8003c78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c44:	4b91      	ldr	r3, [pc, #580]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c50:	4b8e      	ldr	r3, [pc, #568]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c5c:	d00c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5e:	4b8b      	ldr	r3, [pc, #556]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c66:	2b0c      	cmp	r3, #12
 8003c68:	d112      	bne.n	8003c90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6a:	4b88      	ldr	r3, [pc, #544]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c76:	d10b      	bne.n	8003c90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	4b84      	ldr	r3, [pc, #528]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d05b      	beq.n	8003d3c <HAL_RCC_OscConfig+0x124>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d157      	bne.n	8003d3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e25a      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c98:	d106      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x90>
 8003c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7b      	ldr	r2, [pc, #492]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e01d      	b.n	8003ce4 <HAL_RCC_OscConfig+0xcc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0xb4>
 8003cb2:	4b76      	ldr	r3, [pc, #472]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a75      	ldr	r2, [pc, #468]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b73      	ldr	r3, [pc, #460]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a72      	ldr	r2, [pc, #456]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0xcc>
 8003ccc:	4b6f      	ldr	r3, [pc, #444]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a6e      	ldr	r2, [pc, #440]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4b6c      	ldr	r3, [pc, #432]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a6b      	ldr	r2, [pc, #428]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003cde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fd32 	bl	8002754 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fe fd2e 	bl	8002754 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	@ 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e21f      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d06:	4b61      	ldr	r3, [pc, #388]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xdc>
 8003d12:	e014      	b.n	8003d3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fe fd1e 	bl	8002754 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d1c:	f7fe fd1a 	bl	8002754 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	@ 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e20b      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2e:	4b57      	ldr	r3, [pc, #348]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x104>
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d06f      	beq.n	8003e2a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d4a:	4b50      	ldr	r3, [pc, #320]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d017      	beq.n	8003d86 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d56:	4b4d      	ldr	r3, [pc, #308]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d105      	bne.n	8003d6e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d62:	4b4a      	ldr	r3, [pc, #296]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d11c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b44      	ldr	r3, [pc, #272]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d86:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x186>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1d3      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4937      	ldr	r1, [pc, #220]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	e03a      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbc:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_RCC_OscConfig+0x278>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fcc7 	bl	8002754 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fe fcc3 	bl	8002754 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e1b4      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4b28      	ldr	r3, [pc, #160]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4925      	ldr	r1, [pc, #148]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_RCC_OscConfig+0x278>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fe fca6 	bl	8002754 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fca2 	bl	8002754 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e193      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d036      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b15      	ldr	r3, [pc, #84]	@ (8003e94 <HAL_RCC_OscConfig+0x27c>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fe fc86 	bl	8002754 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fc82 	bl	8002754 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e173      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_OscConfig+0x274>)
 8003e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x234>
 8003e6a:	e01b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6c:	4b09      	ldr	r3, [pc, #36]	@ (8003e94 <HAL_RCC_OscConfig+0x27c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fe fc6f 	bl	8002754 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	e00e      	b.n	8003e98 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fe fc6b 	bl	8002754 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d907      	bls.n	8003e98 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e15c      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	42470000 	.word	0x42470000
 8003e94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b8a      	ldr	r3, [pc, #552]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ea      	bne.n	8003e7a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8097 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b83      	ldr	r3, [pc, #524]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10f      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	4b7f      	ldr	r3, [pc, #508]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	4a7e      	ldr	r2, [pc, #504]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ed2:	4b7c      	ldr	r3, [pc, #496]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b79      	ldr	r3, [pc, #484]	@ (80040c8 <HAL_RCC_OscConfig+0x4b0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d118      	bne.n	8003f20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eee:	4b76      	ldr	r3, [pc, #472]	@ (80040c8 <HAL_RCC_OscConfig+0x4b0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a75      	ldr	r2, [pc, #468]	@ (80040c8 <HAL_RCC_OscConfig+0x4b0>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efa:	f7fe fc2b 	bl	8002754 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f02:	f7fe fc27 	bl	8002754 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e118      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	4b6c      	ldr	r3, [pc, #432]	@ (80040c8 <HAL_RCC_OscConfig+0x4b0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x31e>
 8003f28:	4b66      	ldr	r3, [pc, #408]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2c:	4a65      	ldr	r2, [pc, #404]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f34:	e01c      	b.n	8003f70 <HAL_RCC_OscConfig+0x358>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x340>
 8003f3e:	4b61      	ldr	r3, [pc, #388]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f42:	4a60      	ldr	r2, [pc, #384]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f4a:	4b5e      	ldr	r3, [pc, #376]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4e:	4a5d      	ldr	r2, [pc, #372]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0x358>
 8003f58:	4b5a      	ldr	r3, [pc, #360]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a59      	ldr	r2, [pc, #356]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	4b57      	ldr	r3, [pc, #348]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f68:	4a56      	ldr	r2, [pc, #344]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f6a:	f023 0304 	bic.w	r3, r3, #4
 8003f6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe fbec 	bl	8002754 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fe fbe8 	bl	8002754 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0d7      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	4b4b      	ldr	r3, [pc, #300]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ee      	beq.n	8003f80 <HAL_RCC_OscConfig+0x368>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fe fbd6 	bl	8002754 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fe fbd2 	bl	8002754 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0c1      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc2:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ee      	bne.n	8003fac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80ad 	beq.w	8004144 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fea:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d060      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d145      	bne.n	800408a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b33      	ldr	r3, [pc, #204]	@ (80040cc <HAL_RCC_OscConfig+0x4b4>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004004:	f7fe fba6 	bl	8002754 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fe fba2 	bl	8002754 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e093      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b29      	ldr	r3, [pc, #164]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	019b      	lsls	r3, r3, #6
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	3b01      	subs	r3, #1
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	431a      	orrs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004054:	071b      	lsls	r3, r3, #28
 8004056:	491b      	ldr	r1, [pc, #108]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_RCC_OscConfig+0x4b4>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fe fb77 	bl	8002754 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe fb73 	bl	8002754 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e064      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407c:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x452>
 8004088:	e05c      	b.n	8004144 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <HAL_RCC_OscConfig+0x4b4>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004090:	f7fe fb60 	bl	8002754 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fe fb5c 	bl	8002754 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e04d      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040aa:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x480>
 80040b6:	e045      	b.n	8004144 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e040      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
 80040c4:	40023800 	.word	0x40023800
 80040c8:	40007000 	.word	0x40007000
 80040cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004150 <HAL_RCC_OscConfig+0x538>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d030      	beq.n	8004140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d129      	bne.n	8004140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d122      	bne.n	8004140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004100:	4013      	ands	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004106:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004108:	4293      	cmp	r3, r2
 800410a:	d119      	bne.n	8004140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	3b01      	subs	r3, #1
 800411a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d10f      	bne.n	8004140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800412c:	429a      	cmp	r2, r3
 800412e:	d107      	bne.n	8004140 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800

08004154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07b      	b.n	800425e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d108      	bne.n	8004180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004176:	d009      	beq.n	800418c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	61da      	str	r2, [r3, #28]
 800417e:	e005      	b.n	800418c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd fcf2 	bl	8001b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004210:	ea42 0103 	orr.w	r1, r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	f003 0104 	and.w	r1, r3, #4
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	f003 0210 	and.w	r2, r3, #16
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69da      	ldr	r2, [r3, #28]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800424c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b08a      	sub	sp, #40	@ 0x28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004274:	2301      	movs	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004278:	f7fe fa6c 	bl	8002754 <HAL_GetTick>
 800427c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004284:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004290:	7ffb      	ldrb	r3, [r7, #31]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d00c      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x4a>
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800429c:	d106      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_SPI_TransmitReceive+0x46>
 80042a6:	7ffb      	ldrb	r3, [r7, #31]
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d001      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
 80042ae:	e17f      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x5c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_SPI_TransmitReceive+0x5c>
 80042bc:	887b      	ldrh	r3, [r7, #2]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e174      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_SPI_TransmitReceive+0x6e>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e16d      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x34a>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d003      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2205      	movs	r2, #5
 80042ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	887a      	ldrh	r2, [r7, #2]
 8004300:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	887a      	ldrh	r2, [r7, #2]
 8004306:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	887a      	ldrh	r2, [r7, #2]
 8004312:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b40      	cmp	r3, #64	@ 0x40
 8004332:	d007      	beq.n	8004344 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004342:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800434c:	d17e      	bne.n	800444c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_SPI_TransmitReceive+0xf6>
 8004356:	8afb      	ldrh	r3, [r7, #22]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d16c      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	881a      	ldrh	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	1c9a      	adds	r2, r3, #2
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004380:	e059      	b.n	8004436 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b02      	cmp	r3, #2
 800438e:	d11b      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x162>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_SPI_TransmitReceive+0x162>
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	2b01      	cmp	r3, #1
 800439e:	d113      	bne.n	80043c8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b0:	1c9a      	adds	r2, r3, #2
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d119      	bne.n	800440a <HAL_SPI_TransmitReceive+0x1a4>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d014      	beq.n	800440a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	b292      	uxth	r2, r2
 80043ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f2:	1c9a      	adds	r2, r3, #2
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004406:	2301      	movs	r3, #1
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800440a:	f7fe f9a3 	bl	8002754 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004416:	429a      	cmp	r2, r3
 8004418:	d80d      	bhi.n	8004436 <HAL_SPI_TransmitReceive+0x1d0>
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004420:	d009      	beq.n	8004436 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e0bc      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1a0      	bne.n	8004382 <HAL_SPI_TransmitReceive+0x11c>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d19b      	bne.n	8004382 <HAL_SPI_TransmitReceive+0x11c>
 800444a:	e082      	b.n	8004552 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_SPI_TransmitReceive+0x1f4>
 8004454:	8afb      	ldrh	r3, [r7, #22]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d171      	bne.n	800453e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	7812      	ldrb	r2, [r2, #0]
 8004466:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004480:	e05d      	b.n	800453e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d11c      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x264>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <HAL_SPI_TransmitReceive+0x264>
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	2b01      	cmp	r3, #1
 800449e:	d114      	bne.n	80044ca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d119      	bne.n	800450c <HAL_SPI_TransmitReceive+0x2a6>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d014      	beq.n	800450c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004508:	2301      	movs	r3, #1
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800450c:	f7fe f922 	bl	8002754 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004518:	429a      	cmp	r2, r3
 800451a:	d803      	bhi.n	8004524 <HAL_SPI_TransmitReceive+0x2be>
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d102      	bne.n	800452a <HAL_SPI_TransmitReceive+0x2c4>
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e038      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004542:	b29b      	uxth	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d19c      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x21c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d197      	bne.n	8004482 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004552:	6a3a      	ldr	r2, [r7, #32]
 8004554:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 f8b6 	bl	80046c8 <SPI_EndRxTxTransaction>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d008      	beq.n	8004574 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e01d      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10a      	bne.n	8004592 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e000      	b.n	80045b0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80045ae:	2300      	movs	r3, #0
  }
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3728      	adds	r7, #40	@ 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045c8:	f7fe f8c4 	bl	8002754 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	4413      	add	r3, r2
 80045d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045d8:	f7fe f8bc 	bl	8002754 <HAL_GetTick>
 80045dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045de:	4b39      	ldr	r3, [pc, #228]	@ (80046c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	015b      	lsls	r3, r3, #5
 80045e4:	0d1b      	lsrs	r3, r3, #20
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	fb02 f303 	mul.w	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ee:	e055      	b.n	800469c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f6:	d051      	beq.n	800469c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f8:	f7fe f8ac 	bl	8002754 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	429a      	cmp	r2, r3
 8004606:	d902      	bls.n	800460e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d13d      	bne.n	800468a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800461c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004626:	d111      	bne.n	800464c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004630:	d004      	beq.n	800463c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463a:	d107      	bne.n	800464c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800464a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004654:	d10f      	bne.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004674:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e018      	b.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	e002      	b.n	800469c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	3b01      	subs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d19a      	bne.n	80045f0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	20000000 	.word	0x20000000

080046c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2201      	movs	r2, #1
 80046dc:	2102      	movs	r1, #2
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff ff6a 	bl	80045b8 <SPI_WaitFlagStateUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e032      	b.n	8004760 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <SPI_EndRxTxTransaction+0xa0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <SPI_EndRxTxTransaction+0xa4>)
 8004700:	fba2 2303 	umull	r2, r3, r2, r3
 8004704:	0d5b      	lsrs	r3, r3, #21
 8004706:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004718:	d112      	bne.n	8004740 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	2180      	movs	r1, #128	@ 0x80
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ff47 	bl	80045b8 <SPI_WaitFlagStateUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d016      	beq.n	800475e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e00f      	b.n	8004760 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	3b01      	subs	r3, #1
 800474a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004756:	2b80      	cmp	r3, #128	@ 0x80
 8004758:	d0f2      	beq.n	8004740 <SPI_EndRxTxTransaction+0x78>
 800475a:	e000      	b.n	800475e <SPI_EndRxTxTransaction+0x96>
        break;
 800475c:	bf00      	nop
  }

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000000 	.word	0x20000000
 800476c:	165e9f81 	.word	0x165e9f81

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e041      	b.n	8004806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd fe7e 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fe50 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d001      	beq.n	8004828 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e046      	b.n	80048b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a23      	ldr	r2, [pc, #140]	@ (80048c4 <HAL_TIM_Base_Start+0xb4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d022      	beq.n	8004880 <HAL_TIM_Base_Start+0x70>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004842:	d01d      	beq.n	8004880 <HAL_TIM_Base_Start+0x70>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <HAL_TIM_Base_Start+0xb8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_TIM_Base_Start+0x70>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a1e      	ldr	r2, [pc, #120]	@ (80048cc <HAL_TIM_Base_Start+0xbc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <HAL_TIM_Base_Start+0x70>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a1c      	ldr	r2, [pc, #112]	@ (80048d0 <HAL_TIM_Base_Start+0xc0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_TIM_Base_Start+0x70>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1b      	ldr	r2, [pc, #108]	@ (80048d4 <HAL_TIM_Base_Start+0xc4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_TIM_Base_Start+0x70>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a19      	ldr	r2, [pc, #100]	@ (80048d8 <HAL_TIM_Base_Start+0xc8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIM_Base_Start+0x70>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a18      	ldr	r2, [pc, #96]	@ (80048dc <HAL_TIM_Base_Start+0xcc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d111      	bne.n	80048a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d010      	beq.n	80048b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	e007      	b.n	80048b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40010000 	.word	0x40010000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	40010400 	.word	0x40010400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40001800 	.word	0x40001800

080048e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e041      	b.n	8004976 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd fda4 	bl	8002454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f000 fd98 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start+0x24>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e022      	b.n	80049ea <HAL_TIM_PWM_Start+0x6a>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d109      	bne.n	80049be <HAL_TIM_PWM_Start+0x3e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	bf14      	ite	ne
 80049b6:	2301      	movne	r3, #1
 80049b8:	2300      	moveq	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	e015      	b.n	80049ea <HAL_TIM_PWM_Start+0x6a>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d109      	bne.n	80049d8 <HAL_TIM_PWM_Start+0x58>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	bf14      	ite	ne
 80049d0:	2301      	movne	r3, #1
 80049d2:	2300      	moveq	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	e008      	b.n	80049ea <HAL_TIM_PWM_Start+0x6a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	bf14      	ite	ne
 80049e4:	2301      	movne	r3, #1
 80049e6:	2300      	moveq	r3, #0
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e07c      	b.n	8004aec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d104      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x82>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a00:	e013      	b.n	8004a2a <HAL_TIM_PWM_Start+0xaa>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x92>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a10:	e00b      	b.n	8004a2a <HAL_TIM_PWM_Start+0xaa>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0xa2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a20:	e003      	b.n	8004a2a <HAL_TIM_PWM_Start+0xaa>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	6839      	ldr	r1, [r7, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f88e 	bl	8005b54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004af4 <HAL_TIM_PWM_Start+0x174>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <HAL_TIM_PWM_Start+0xcc>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a2c      	ldr	r2, [pc, #176]	@ (8004af8 <HAL_TIM_PWM_Start+0x178>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIM_PWM_Start+0xd0>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <HAL_TIM_PWM_Start+0xd2>
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a22      	ldr	r2, [pc, #136]	@ (8004af4 <HAL_TIM_PWM_Start+0x174>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d022      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x136>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a78:	d01d      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x136>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <HAL_TIM_PWM_Start+0x17c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d018      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x136>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a1d      	ldr	r2, [pc, #116]	@ (8004b00 <HAL_TIM_PWM_Start+0x180>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x136>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <HAL_TIM_PWM_Start+0x184>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x136>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	@ (8004af8 <HAL_TIM_PWM_Start+0x178>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x136>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_TIM_PWM_Start+0x188>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x136>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a16      	ldr	r2, [pc, #88]	@ (8004b0c <HAL_TIM_PWM_Start+0x18c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d111      	bne.n	8004ada <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d010      	beq.n	8004aea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad8:	e007      	b.n	8004aea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0201 	orr.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40010400 	.word	0x40010400
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40001800 	.word	0x40001800

08004b10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f001 f816 	bl	8005b54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8004be8 <HAL_TIM_PWM_Stop+0xd8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIM_PWM_Stop+0x2c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2d      	ldr	r2, [pc, #180]	@ (8004bec <HAL_TIM_PWM_Stop+0xdc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d101      	bne.n	8004b40 <HAL_TIM_PWM_Stop+0x30>
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_PWM_Stop+0x32>
 8004b40:	2300      	movs	r3, #0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d017      	beq.n	8004b76 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10f      	bne.n	8004b76 <HAL_TIM_PWM_Stop+0x66>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a1a      	ldr	r2, [r3, #32]
 8004b5c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_PWM_Stop+0x66>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a1a      	ldr	r2, [r3, #32]
 8004b7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <HAL_TIM_PWM_Stop+0x96>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d107      	bne.n	8004ba6 <HAL_TIM_PWM_Stop+0x96>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Stop+0xa6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bb4:	e013      	b.n	8004bde <HAL_TIM_PWM_Stop+0xce>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Stop+0xb6>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bc4:	e00b      	b.n	8004bde <HAL_TIM_PWM_Stop+0xce>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Stop+0xc6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bd4:	e003      	b.n	8004bde <HAL_TIM_PWM_Stop+0xce>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40010400 	.word	0x40010400

08004bf0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e041      	b.n	8004c86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fd fbcc 	bl	80023b4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f000 fc10 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_IC_Start_IT+0x1e>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	e013      	b.n	8004cd6 <HAL_TIM_IC_Start_IT+0x46>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_IC_Start_IT+0x2e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	e00b      	b.n	8004cd6 <HAL_TIM_IC_Start_IT+0x46>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_IC_Start_IT+0x3e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	e003      	b.n	8004cd6 <HAL_TIM_IC_Start_IT+0x46>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d104      	bne.n	8004ce8 <HAL_TIM_IC_Start_IT+0x58>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e013      	b.n	8004d10 <HAL_TIM_IC_Start_IT+0x80>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d104      	bne.n	8004cf8 <HAL_TIM_IC_Start_IT+0x68>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e00b      	b.n	8004d10 <HAL_TIM_IC_Start_IT+0x80>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d104      	bne.n	8004d08 <HAL_TIM_IC_Start_IT+0x78>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e003      	b.n	8004d10 <HAL_TIM_IC_Start_IT+0x80>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d12:	7bbb      	ldrb	r3, [r7, #14]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d102      	bne.n	8004d1e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d18:	7b7b      	ldrb	r3, [r7, #13]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d001      	beq.n	8004d22 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0cc      	b.n	8004ebc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_IC_Start_IT+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d30:	e013      	b.n	8004d5a <HAL_TIM_IC_Start_IT+0xca>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d104      	bne.n	8004d42 <HAL_TIM_IC_Start_IT+0xb2>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d40:	e00b      	b.n	8004d5a <HAL_TIM_IC_Start_IT+0xca>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d104      	bne.n	8004d52 <HAL_TIM_IC_Start_IT+0xc2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d50:	e003      	b.n	8004d5a <HAL_TIM_IC_Start_IT+0xca>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d104      	bne.n	8004d6a <HAL_TIM_IC_Start_IT+0xda>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d68:	e013      	b.n	8004d92 <HAL_TIM_IC_Start_IT+0x102>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_IC_Start_IT+0xea>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d78:	e00b      	b.n	8004d92 <HAL_TIM_IC_Start_IT+0x102>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_IC_Start_IT+0xfa>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d88:	e003      	b.n	8004d92 <HAL_TIM_IC_Start_IT+0x102>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b0c      	cmp	r3, #12
 8004d96:	d841      	bhi.n	8004e1c <HAL_TIM_IC_Start_IT+0x18c>
 8004d98:	a201      	add	r2, pc, #4	@ (adr r2, 8004da0 <HAL_TIM_IC_Start_IT+0x110>)
 8004d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9e:	bf00      	nop
 8004da0:	08004dd5 	.word	0x08004dd5
 8004da4:	08004e1d 	.word	0x08004e1d
 8004da8:	08004e1d 	.word	0x08004e1d
 8004dac:	08004e1d 	.word	0x08004e1d
 8004db0:	08004de7 	.word	0x08004de7
 8004db4:	08004e1d 	.word	0x08004e1d
 8004db8:	08004e1d 	.word	0x08004e1d
 8004dbc:	08004e1d 	.word	0x08004e1d
 8004dc0:	08004df9 	.word	0x08004df9
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	08004e1d 	.word	0x08004e1d
 8004dcc:	08004e1d 	.word	0x08004e1d
 8004dd0:	08004e0b 	.word	0x08004e0b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0202 	orr.w	r2, r2, #2
 8004de2:	60da      	str	r2, [r3, #12]
      break;
 8004de4:	e01d      	b.n	8004e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0204 	orr.w	r2, r2, #4
 8004df4:	60da      	str	r2, [r3, #12]
      break;
 8004df6:	e014      	b.n	8004e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	60da      	str	r2, [r3, #12]
      break;
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0210 	orr.w	r2, r2, #16
 8004e18:	60da      	str	r2, [r3, #12]
      break;
 8004e1a:	e002      	b.n	8004e22 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d148      	bne.n	8004eba <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fe8f 	bl	8005b54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a22      	ldr	r2, [pc, #136]	@ (8004ec4 <HAL_TIM_IC_Start_IT+0x234>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e48:	d01d      	beq.n	8004e86 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec8 <HAL_TIM_IC_Start_IT+0x238>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <HAL_TIM_IC_Start_IT+0x23c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed0 <HAL_TIM_IC_Start_IT+0x240>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ed4 <HAL_TIM_IC_Start_IT+0x244>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a18      	ldr	r2, [pc, #96]	@ (8004ed8 <HAL_TIM_IC_Start_IT+0x248>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_TIM_IC_Start_IT+0x1f6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a16      	ldr	r2, [pc, #88]	@ (8004edc <HAL_TIM_IC_Start_IT+0x24c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d111      	bne.n	8004eaa <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	d010      	beq.n	8004eba <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0201 	orr.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea8:	e007      	b.n	8004eba <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40001800 	.word	0x40001800

08004ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d020      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01b      	beq.n	8004f44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0202 	mvn.w	r2, #2
 8004f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fc fa08 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8004f30:	e005      	b.n	8004f3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fa70 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 fa77 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d020      	beq.n	8004f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01b      	beq.n	8004f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0204 	mvn.w	r2, #4
 8004f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc f9e2 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8004f7c:	e005      	b.n	8004f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa4a 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fa51 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d020      	beq.n	8004fdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01b      	beq.n	8004fdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0208 	mvn.w	r2, #8
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2204      	movs	r2, #4
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc f9bc 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa24 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fa2b 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d020      	beq.n	8005028 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01b      	beq.n	8005028 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0210 	mvn.w	r2, #16
 8004ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2208      	movs	r2, #8
 8004ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc f996 	bl	8001340 <HAL_TIM_IC_CaptureCallback>
 8005014:	e005      	b.n	8005022 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9fe 	bl	8005418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fa05 	bl	800542c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00c      	beq.n	800504c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f06f 0201 	mvn.w	r2, #1
 8005044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9dc 	bl	8005404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00c      	beq.n	8005070 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505c:	2b00      	cmp	r3, #0
 800505e:	d007      	beq.n	8005070 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fe1e 	bl	8005cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00c      	beq.n	8005094 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b00      	cmp	r3, #0
 8005082:	d007      	beq.n	8005094 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9d6 	bl	8005440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0220 	mvn.w	r2, #32
 80050b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fdf0 	bl	8005c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b8:	bf00      	nop
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_TIM_IC_ConfigChannel+0x1e>
 80050da:	2302      	movs	r3, #2
 80050dc:	e088      	b.n	80051f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80050fc:	f000 fc00 	bl	8005900 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 020c 	bic.w	r2, r2, #12
 800510e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	619a      	str	r2, [r3, #24]
 8005122:	e060      	b.n	80051e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d11c      	bne.n	8005164 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800513a:	f000 fc55 	bl	80059e8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800514c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	021a      	lsls	r2, r3, #8
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	619a      	str	r2, [r3, #24]
 8005162:	e040      	b.n	80051e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11b      	bne.n	80051a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800517a:	f000 fc72 	bl	8005a62 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 020c 	bic.w	r2, r2, #12
 800518c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	61da      	str	r2, [r3, #28]
 80051a0:	e021      	b.n	80051e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b0c      	cmp	r3, #12
 80051a6:	d11c      	bne.n	80051e2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051b8:	f000 fc8f 	bl	8005ada <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69da      	ldr	r2, [r3, #28]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80051ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69d9      	ldr	r1, [r3, #28]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	021a      	lsls	r2, r3, #8
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	61da      	str	r2, [r3, #28]
 80051e0:	e001      	b.n	80051e6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005204:	2300      	movs	r3, #0
 8005206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005212:	2302      	movs	r3, #2
 8005214:	e0ae      	b.n	8005374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b0c      	cmp	r3, #12
 8005222:	f200 809f 	bhi.w	8005364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005226:	a201      	add	r2, pc, #4	@ (adr r2, 800522c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	08005261 	.word	0x08005261
 8005230:	08005365 	.word	0x08005365
 8005234:	08005365 	.word	0x08005365
 8005238:	08005365 	.word	0x08005365
 800523c:	080052a1 	.word	0x080052a1
 8005240:	08005365 	.word	0x08005365
 8005244:	08005365 	.word	0x08005365
 8005248:	08005365 	.word	0x08005365
 800524c:	080052e3 	.word	0x080052e3
 8005250:	08005365 	.word	0x08005365
 8005254:	08005365 	.word	0x08005365
 8005258:	08005365 	.word	0x08005365
 800525c:	08005323 	.word	0x08005323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 f99a 	bl	80055a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0208 	orr.w	r2, r2, #8
 800527a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0204 	bic.w	r2, r2, #4
 800528a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6999      	ldr	r1, [r3, #24]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	619a      	str	r2, [r3, #24]
      break;
 800529e:	e064      	b.n	800536a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f9ea 	bl	8005680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6999      	ldr	r1, [r3, #24]
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	021a      	lsls	r2, r3, #8
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	619a      	str	r2, [r3, #24]
      break;
 80052e0:	e043      	b.n	800536a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fa3f 	bl	800576c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0208 	orr.w	r2, r2, #8
 80052fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 0204 	bic.w	r2, r2, #4
 800530c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69d9      	ldr	r1, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	61da      	str	r2, [r3, #28]
      break;
 8005320:	e023      	b.n	800536a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fa93 	bl	8005854 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800533c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800534c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69d9      	ldr	r1, [r3, #28]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	021a      	lsls	r2, r3, #8
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	61da      	str	r2, [r3, #28]
      break;
 8005362:	e002      	b.n	800536a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
      break;
 8005368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005372:	7dfb      	ldrb	r3, [r7, #23]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b0c      	cmp	r3, #12
 800538e:	d831      	bhi.n	80053f4 <HAL_TIM_ReadCapturedValue+0x78>
 8005390:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053cd 	.word	0x080053cd
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	080053f5 	.word	0x080053f5
 80053a8:	080053d7 	.word	0x080053d7
 80053ac:	080053f5 	.word	0x080053f5
 80053b0:	080053f5 	.word	0x080053f5
 80053b4:	080053f5 	.word	0x080053f5
 80053b8:	080053e1 	.word	0x080053e1
 80053bc:	080053f5 	.word	0x080053f5
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	080053f5 	.word	0x080053f5
 80053c8:	080053eb 	.word	0x080053eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d2:	60fb      	str	r3, [r7, #12]

      break;
 80053d4:	e00f      	b.n	80053f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	60fb      	str	r3, [r7, #12]

      break;
 80053de:	e00a      	b.n	80053f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e6:	60fb      	str	r3, [r7, #12]

      break;
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	60fb      	str	r3, [r7, #12]

      break;
 80053f2:	e000      	b.n	80053f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80053f4:	bf00      	nop
  }

  return tmpreg;
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a43      	ldr	r2, [pc, #268]	@ (8005574 <TIM_Base_SetConfig+0x120>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d00f      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a40      	ldr	r2, [pc, #256]	@ (8005578 <TIM_Base_SetConfig+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00b      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3f      	ldr	r2, [pc, #252]	@ (800557c <TIM_Base_SetConfig+0x128>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a3e      	ldr	r2, [pc, #248]	@ (8005580 <TIM_Base_SetConfig+0x12c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a3d      	ldr	r2, [pc, #244]	@ (8005584 <TIM_Base_SetConfig+0x130>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d108      	bne.n	80054a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800549a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a32      	ldr	r2, [pc, #200]	@ (8005574 <TIM_Base_SetConfig+0x120>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d02b      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b4:	d027      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005578 <TIM_Base_SetConfig+0x124>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d023      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2e      	ldr	r2, [pc, #184]	@ (800557c <TIM_Base_SetConfig+0x128>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01f      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005580 <TIM_Base_SetConfig+0x12c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d01b      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005584 <TIM_Base_SetConfig+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d017      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005588 <TIM_Base_SetConfig+0x134>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d013      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2a      	ldr	r2, [pc, #168]	@ (800558c <TIM_Base_SetConfig+0x138>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00f      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a29      	ldr	r2, [pc, #164]	@ (8005590 <TIM_Base_SetConfig+0x13c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00b      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a28      	ldr	r2, [pc, #160]	@ (8005594 <TIM_Base_SetConfig+0x140>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d007      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a27      	ldr	r2, [pc, #156]	@ (8005598 <TIM_Base_SetConfig+0x144>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a26      	ldr	r2, [pc, #152]	@ (800559c <TIM_Base_SetConfig+0x148>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d108      	bne.n	8005518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a0e      	ldr	r2, [pc, #56]	@ (8005574 <TIM_Base_SetConfig+0x120>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_Base_SetConfig+0xf2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a10      	ldr	r2, [pc, #64]	@ (8005584 <TIM_Base_SetConfig+0x130>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d103      	bne.n	800554e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	691a      	ldr	r2, [r3, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f043 0204 	orr.w	r2, r3, #4
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	601a      	str	r2, [r3, #0]
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40010400 	.word	0x40010400
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800
 8005594:	40001800 	.word	0x40001800
 8005598:	40001c00 	.word	0x40001c00
 800559c:	40002000 	.word	0x40002000

080055a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	f023 0201 	bic.w	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f023 0302 	bic.w	r3, r3, #2
 80055e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a20      	ldr	r2, [pc, #128]	@ (8005678 <TIM_OC1_SetConfig+0xd8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC1_SetConfig+0x64>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a1f      	ldr	r2, [pc, #124]	@ (800567c <TIM_OC1_SetConfig+0xdc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d10c      	bne.n	800561e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f023 0308 	bic.w	r3, r3, #8
 800560a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0304 	bic.w	r3, r3, #4
 800561c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <TIM_OC1_SetConfig+0xd8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_OC1_SetConfig+0x8e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a14      	ldr	r2, [pc, #80]	@ (800567c <TIM_OC1_SetConfig+0xdc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d111      	bne.n	8005652 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800563c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	4313      	orrs	r3, r2
 8005650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	621a      	str	r2, [r3, #32]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	40010000 	.word	0x40010000
 800567c:	40010400 	.word	0x40010400

08005680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 0210 	bic.w	r2, r3, #16
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0320 	bic.w	r3, r3, #32
 80056ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a22      	ldr	r2, [pc, #136]	@ (8005764 <TIM_OC2_SetConfig+0xe4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_OC2_SetConfig+0x68>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a21      	ldr	r2, [pc, #132]	@ (8005768 <TIM_OC2_SetConfig+0xe8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d10d      	bne.n	8005704 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005702:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a17      	ldr	r2, [pc, #92]	@ (8005764 <TIM_OC2_SetConfig+0xe4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC2_SetConfig+0x94>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <TIM_OC2_SetConfig+0xe8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d113      	bne.n	800573c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800571a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	621a      	str	r2, [r3, #32]
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40010000 	.word	0x40010000
 8005768:	40010400 	.word	0x40010400

0800576c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0303 	bic.w	r3, r3, #3
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a21      	ldr	r2, [pc, #132]	@ (800584c <TIM_OC3_SetConfig+0xe0>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC3_SetConfig+0x66>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a20      	ldr	r2, [pc, #128]	@ (8005850 <TIM_OC3_SetConfig+0xe4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d10d      	bne.n	80057ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a16      	ldr	r2, [pc, #88]	@ (800584c <TIM_OC3_SetConfig+0xe0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_OC3_SetConfig+0x92>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <TIM_OC3_SetConfig+0xe4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d113      	bne.n	8005826 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800580c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	621a      	str	r2, [r3, #32]
}
 8005840:	bf00      	nop
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	40010000 	.word	0x40010000
 8005850:	40010400 	.word	0x40010400

08005854 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800588a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	021b      	lsls	r3, r3, #8
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800589e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	031b      	lsls	r3, r3, #12
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a12      	ldr	r2, [pc, #72]	@ (80058f8 <TIM_OC4_SetConfig+0xa4>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_OC4_SetConfig+0x68>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a11      	ldr	r2, [pc, #68]	@ (80058fc <TIM_OC4_SetConfig+0xa8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d109      	bne.n	80058d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	019b      	lsls	r3, r3, #6
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40010000 	.word	0x40010000
 80058fc:	40010400 	.word	0x40010400

08005900 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f023 0201 	bic.w	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a28      	ldr	r2, [pc, #160]	@ (80059cc <TIM_TI1_SetConfig+0xcc>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d01b      	beq.n	8005966 <TIM_TI1_SetConfig+0x66>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005934:	d017      	beq.n	8005966 <TIM_TI1_SetConfig+0x66>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a25      	ldr	r2, [pc, #148]	@ (80059d0 <TIM_TI1_SetConfig+0xd0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <TIM_TI1_SetConfig+0x66>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a24      	ldr	r2, [pc, #144]	@ (80059d4 <TIM_TI1_SetConfig+0xd4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00f      	beq.n	8005966 <TIM_TI1_SetConfig+0x66>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a23      	ldr	r2, [pc, #140]	@ (80059d8 <TIM_TI1_SetConfig+0xd8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00b      	beq.n	8005966 <TIM_TI1_SetConfig+0x66>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a22      	ldr	r2, [pc, #136]	@ (80059dc <TIM_TI1_SetConfig+0xdc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <TIM_TI1_SetConfig+0x66>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4a21      	ldr	r2, [pc, #132]	@ (80059e0 <TIM_TI1_SetConfig+0xe0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d003      	beq.n	8005966 <TIM_TI1_SetConfig+0x66>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4a20      	ldr	r2, [pc, #128]	@ (80059e4 <TIM_TI1_SetConfig+0xe4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d101      	bne.n	800596a <TIM_TI1_SetConfig+0x6a>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <TIM_TI1_SetConfig+0x6c>
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	e003      	b.n	800598a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005990:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	b2db      	uxtb	r3, r3
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	f023 030a 	bic.w	r3, r3, #10
 80059a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f003 030a 	and.w	r3, r3, #10
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40001800 	.word	0x40001800

080059e8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	f023 0210 	bic.w	r2, r3, #16
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	021b      	lsls	r3, r3, #8
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	031b      	lsls	r3, r3, #12
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	621a      	str	r2, [r3, #32]
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f023 0303 	bic.w	r3, r3, #3
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005ab2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b087      	sub	sp, #28
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
 8005ae6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	031b      	lsls	r3, r3, #12
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	031b      	lsls	r3, r3, #12
 8005b32:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	621a      	str	r2, [r3, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 031f 	and.w	r3, r3, #31
 8005b66:	2201      	movs	r2, #1
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1a      	ldr	r2, [r3, #32]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	43db      	mvns	r3, r3
 8005b76:	401a      	ands	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1a      	ldr	r2, [r3, #32]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	621a      	str	r2, [r3, #32]
}
 8005b92:	bf00      	nop
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e05a      	b.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a21      	ldr	r2, [pc, #132]	@ (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d022      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c04:	d01d      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d018      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1b      	ldr	r2, [pc, #108]	@ (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d013      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a18      	ldr	r2, [pc, #96]	@ (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a17      	ldr	r2, [pc, #92]	@ (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a15      	ldr	r2, [pc, #84]	@ (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10c      	bne.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800
 8005c88:	40000c00 	.word	0x40000c00
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40001800 	.word	0x40001800

08005c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca0:	bf00      	nop
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e042      	b.n	8005d58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d106      	bne.n	8005cec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc fc5c 	bl	80025a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	@ 0x24
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f82b 	bl	8005d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695a      	ldr	r2, [r3, #20]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d64:	b0c0      	sub	sp, #256	@ 0x100
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	68d9      	ldr	r1, [r3, #12]
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	ea40 0301 	orr.w	r3, r0, r1
 8005d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005db8:	f021 010c 	bic.w	r1, r1, #12
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005dc6:	430b      	orrs	r3, r1
 8005dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dda:	6999      	ldr	r1, [r3, #24]
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	ea40 0301 	orr.w	r3, r0, r1
 8005de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4b8f      	ldr	r3, [pc, #572]	@ (800602c <UART_SetConfig+0x2cc>)
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d005      	beq.n	8005e00 <UART_SetConfig+0xa0>
 8005df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8006030 <UART_SetConfig+0x2d0>)
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d104      	bne.n	8005e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e00:	f7fd fd4c 	bl	800389c <HAL_RCC_GetPCLK2Freq>
 8005e04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e08:	e003      	b.n	8005e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e0a:	f7fd fd33 	bl	8003874 <HAL_RCC_GetPCLK1Freq>
 8005e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e1c:	f040 810c 	bne.w	8006038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e32:	4622      	mov	r2, r4
 8005e34:	462b      	mov	r3, r5
 8005e36:	1891      	adds	r1, r2, r2
 8005e38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e3a:	415b      	adcs	r3, r3
 8005e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e42:	4621      	mov	r1, r4
 8005e44:	eb12 0801 	adds.w	r8, r2, r1
 8005e48:	4629      	mov	r1, r5
 8005e4a:	eb43 0901 	adc.w	r9, r3, r1
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	f04f 0300 	mov.w	r3, #0
 8005e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e62:	4690      	mov	r8, r2
 8005e64:	4699      	mov	r9, r3
 8005e66:	4623      	mov	r3, r4
 8005e68:	eb18 0303 	adds.w	r3, r8, r3
 8005e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e70:	462b      	mov	r3, r5
 8005e72:	eb49 0303 	adc.w	r3, r9, r3
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e8e:	460b      	mov	r3, r1
 8005e90:	18db      	adds	r3, r3, r3
 8005e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e94:	4613      	mov	r3, r2
 8005e96:	eb42 0303 	adc.w	r3, r2, r3
 8005e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ea4:	f7fa fd9e 	bl	80009e4 <__aeabi_uldivmod>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4b61      	ldr	r3, [pc, #388]	@ (8006034 <UART_SetConfig+0x2d4>)
 8005eae:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	011c      	lsls	r4, r3, #4
 8005eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ec8:	4642      	mov	r2, r8
 8005eca:	464b      	mov	r3, r9
 8005ecc:	1891      	adds	r1, r2, r2
 8005ece:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ed0:	415b      	adcs	r3, r3
 8005ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ed8:	4641      	mov	r1, r8
 8005eda:	eb12 0a01 	adds.w	sl, r2, r1
 8005ede:	4649      	mov	r1, r9
 8005ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ee4:	f04f 0200 	mov.w	r2, #0
 8005ee8:	f04f 0300 	mov.w	r3, #0
 8005eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef8:	4692      	mov	sl, r2
 8005efa:	469b      	mov	fp, r3
 8005efc:	4643      	mov	r3, r8
 8005efe:	eb1a 0303 	adds.w	r3, sl, r3
 8005f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f06:	464b      	mov	r3, r9
 8005f08:	eb4b 0303 	adc.w	r3, fp, r3
 8005f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f24:	460b      	mov	r3, r1
 8005f26:	18db      	adds	r3, r3, r3
 8005f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	eb42 0303 	adc.w	r3, r2, r3
 8005f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f3a:	f7fa fd53 	bl	80009e4 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	4b3b      	ldr	r3, [pc, #236]	@ (8006034 <UART_SetConfig+0x2d4>)
 8005f46:	fba3 2301 	umull	r2, r3, r3, r1
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2264      	movs	r2, #100	@ 0x64
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	1acb      	subs	r3, r1, r3
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f5a:	4b36      	ldr	r3, [pc, #216]	@ (8006034 <UART_SetConfig+0x2d4>)
 8005f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f68:	441c      	add	r4, r3
 8005f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f7c:	4642      	mov	r2, r8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	1891      	adds	r1, r2, r2
 8005f82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f84:	415b      	adcs	r3, r3
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	1851      	adds	r1, r2, r1
 8005f90:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f92:	4649      	mov	r1, r9
 8005f94:	414b      	adcs	r3, r1
 8005f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fa4:	4659      	mov	r1, fp
 8005fa6:	00cb      	lsls	r3, r1, #3
 8005fa8:	4651      	mov	r1, sl
 8005faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fae:	4651      	mov	r1, sl
 8005fb0:	00ca      	lsls	r2, r1, #3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4642      	mov	r2, r8
 8005fba:	189b      	adds	r3, r3, r2
 8005fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	eb42 0303 	adc.w	r3, r2, r3
 8005fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	18db      	adds	r3, r3, r3
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	eb42 0303 	adc.w	r3, r2, r3
 8005fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ff6:	f7fa fcf5 	bl	80009e4 <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8006034 <UART_SetConfig+0x2d4>)
 8006000:	fba3 1302 	umull	r1, r3, r3, r2
 8006004:	095b      	lsrs	r3, r3, #5
 8006006:	2164      	movs	r1, #100	@ 0x64
 8006008:	fb01 f303 	mul.w	r3, r1, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	3332      	adds	r3, #50	@ 0x32
 8006012:	4a08      	ldr	r2, [pc, #32]	@ (8006034 <UART_SetConfig+0x2d4>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	f003 0207 	and.w	r2, r3, #7
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4422      	add	r2, r4
 8006026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006028:	e106      	b.n	8006238 <UART_SetConfig+0x4d8>
 800602a:	bf00      	nop
 800602c:	40011000 	.word	0x40011000
 8006030:	40011400 	.word	0x40011400
 8006034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800603c:	2200      	movs	r2, #0
 800603e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006042:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800604a:	4642      	mov	r2, r8
 800604c:	464b      	mov	r3, r9
 800604e:	1891      	adds	r1, r2, r2
 8006050:	6239      	str	r1, [r7, #32]
 8006052:	415b      	adcs	r3, r3
 8006054:	627b      	str	r3, [r7, #36]	@ 0x24
 8006056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800605a:	4641      	mov	r1, r8
 800605c:	1854      	adds	r4, r2, r1
 800605e:	4649      	mov	r1, r9
 8006060:	eb43 0501 	adc.w	r5, r3, r1
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	00eb      	lsls	r3, r5, #3
 800606e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006072:	00e2      	lsls	r2, r4, #3
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	4643      	mov	r3, r8
 800607a:	18e3      	adds	r3, r4, r3
 800607c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006080:	464b      	mov	r3, r9
 8006082:	eb45 0303 	adc.w	r3, r5, r3
 8006086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060a6:	4629      	mov	r1, r5
 80060a8:	008b      	lsls	r3, r1, #2
 80060aa:	4621      	mov	r1, r4
 80060ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b0:	4621      	mov	r1, r4
 80060b2:	008a      	lsls	r2, r1, #2
 80060b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060b8:	f7fa fc94 	bl	80009e4 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4b60      	ldr	r3, [pc, #384]	@ (8006244 <UART_SetConfig+0x4e4>)
 80060c2:	fba3 2302 	umull	r2, r3, r3, r2
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	011c      	lsls	r4, r3, #4
 80060ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ce:	2200      	movs	r2, #0
 80060d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060dc:	4642      	mov	r2, r8
 80060de:	464b      	mov	r3, r9
 80060e0:	1891      	adds	r1, r2, r2
 80060e2:	61b9      	str	r1, [r7, #24]
 80060e4:	415b      	adcs	r3, r3
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ec:	4641      	mov	r1, r8
 80060ee:	1851      	adds	r1, r2, r1
 80060f0:	6139      	str	r1, [r7, #16]
 80060f2:	4649      	mov	r1, r9
 80060f4:	414b      	adcs	r3, r1
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006104:	4659      	mov	r1, fp
 8006106:	00cb      	lsls	r3, r1, #3
 8006108:	4651      	mov	r1, sl
 800610a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800610e:	4651      	mov	r1, sl
 8006110:	00ca      	lsls	r2, r1, #3
 8006112:	4610      	mov	r0, r2
 8006114:	4619      	mov	r1, r3
 8006116:	4603      	mov	r3, r0
 8006118:	4642      	mov	r2, r8
 800611a:	189b      	adds	r3, r3, r2
 800611c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006120:	464b      	mov	r3, r9
 8006122:	460a      	mov	r2, r1
 8006124:	eb42 0303 	adc.w	r3, r2, r3
 8006128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800612c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006136:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006144:	4649      	mov	r1, r9
 8006146:	008b      	lsls	r3, r1, #2
 8006148:	4641      	mov	r1, r8
 800614a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800614e:	4641      	mov	r1, r8
 8006150:	008a      	lsls	r2, r1, #2
 8006152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006156:	f7fa fc45 	bl	80009e4 <__aeabi_uldivmod>
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4611      	mov	r1, r2
 8006160:	4b38      	ldr	r3, [pc, #224]	@ (8006244 <UART_SetConfig+0x4e4>)
 8006162:	fba3 2301 	umull	r2, r3, r3, r1
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	2264      	movs	r2, #100	@ 0x64
 800616a:	fb02 f303 	mul.w	r3, r2, r3
 800616e:	1acb      	subs	r3, r1, r3
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	3332      	adds	r3, #50	@ 0x32
 8006174:	4a33      	ldr	r2, [pc, #204]	@ (8006244 <UART_SetConfig+0x4e4>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006180:	441c      	add	r4, r3
 8006182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006186:	2200      	movs	r2, #0
 8006188:	673b      	str	r3, [r7, #112]	@ 0x70
 800618a:	677a      	str	r2, [r7, #116]	@ 0x74
 800618c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	1891      	adds	r1, r2, r2
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	415b      	adcs	r3, r3
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061a0:	4641      	mov	r1, r8
 80061a2:	1851      	adds	r1, r2, r1
 80061a4:	6039      	str	r1, [r7, #0]
 80061a6:	4649      	mov	r1, r9
 80061a8:	414b      	adcs	r3, r1
 80061aa:	607b      	str	r3, [r7, #4]
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061b8:	4659      	mov	r1, fp
 80061ba:	00cb      	lsls	r3, r1, #3
 80061bc:	4651      	mov	r1, sl
 80061be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061c2:	4651      	mov	r1, sl
 80061c4:	00ca      	lsls	r2, r1, #3
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	4642      	mov	r2, r8
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061d2:	464b      	mov	r3, r9
 80061d4:	460a      	mov	r2, r1
 80061d6:	eb42 0303 	adc.w	r3, r2, r3
 80061da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80061e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061f4:	4649      	mov	r1, r9
 80061f6:	008b      	lsls	r3, r1, #2
 80061f8:	4641      	mov	r1, r8
 80061fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061fe:	4641      	mov	r1, r8
 8006200:	008a      	lsls	r2, r1, #2
 8006202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006206:	f7fa fbed 	bl	80009e4 <__aeabi_uldivmod>
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4b0d      	ldr	r3, [pc, #52]	@ (8006244 <UART_SetConfig+0x4e4>)
 8006210:	fba3 1302 	umull	r1, r3, r3, r2
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	2164      	movs	r1, #100	@ 0x64
 8006218:	fb01 f303 	mul.w	r3, r1, r3
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	3332      	adds	r3, #50	@ 0x32
 8006222:	4a08      	ldr	r2, [pc, #32]	@ (8006244 <UART_SetConfig+0x4e4>)
 8006224:	fba2 2303 	umull	r2, r3, r2, r3
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	f003 020f 	and.w	r2, r3, #15
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4422      	add	r2, r4
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800623e:	46bd      	mov	sp, r7
 8006240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006244:	51eb851f 	.word	0x51eb851f

08006248 <memset>:
 8006248:	4402      	add	r2, r0
 800624a:	4603      	mov	r3, r0
 800624c:	4293      	cmp	r3, r2
 800624e:	d100      	bne.n	8006252 <memset+0xa>
 8006250:	4770      	bx	lr
 8006252:	f803 1b01 	strb.w	r1, [r3], #1
 8006256:	e7f9      	b.n	800624c <memset+0x4>

08006258 <__libc_init_array>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4d0d      	ldr	r5, [pc, #52]	@ (8006290 <__libc_init_array+0x38>)
 800625c:	4c0d      	ldr	r4, [pc, #52]	@ (8006294 <__libc_init_array+0x3c>)
 800625e:	1b64      	subs	r4, r4, r5
 8006260:	10a4      	asrs	r4, r4, #2
 8006262:	2600      	movs	r6, #0
 8006264:	42a6      	cmp	r6, r4
 8006266:	d109      	bne.n	800627c <__libc_init_array+0x24>
 8006268:	4d0b      	ldr	r5, [pc, #44]	@ (8006298 <__libc_init_array+0x40>)
 800626a:	4c0c      	ldr	r4, [pc, #48]	@ (800629c <__libc_init_array+0x44>)
 800626c:	f000 f818 	bl	80062a0 <_init>
 8006270:	1b64      	subs	r4, r4, r5
 8006272:	10a4      	asrs	r4, r4, #2
 8006274:	2600      	movs	r6, #0
 8006276:	42a6      	cmp	r6, r4
 8006278:	d105      	bne.n	8006286 <__libc_init_array+0x2e>
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006280:	4798      	blx	r3
 8006282:	3601      	adds	r6, #1
 8006284:	e7ee      	b.n	8006264 <__libc_init_array+0xc>
 8006286:	f855 3b04 	ldr.w	r3, [r5], #4
 800628a:	4798      	blx	r3
 800628c:	3601      	adds	r6, #1
 800628e:	e7f2      	b.n	8006276 <__libc_init_array+0x1e>
 8006290:	08006910 	.word	0x08006910
 8006294:	08006910 	.word	0x08006910
 8006298:	08006910 	.word	0x08006910
 800629c:	08006914 	.word	0x08006914

080062a0 <_init>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	bf00      	nop
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr

080062ac <_fini>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	bf00      	nop
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr
